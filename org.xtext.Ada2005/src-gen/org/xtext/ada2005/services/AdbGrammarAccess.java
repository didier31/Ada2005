/*
 * generated by Xtext
 */
package org.xtext.ada2005.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class AdbGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CompilationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Compilation");
		private final Assignment cCompilationUnitsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCompilationUnitsCompilationUnitParserRuleCall_0 = (RuleCall)cCompilationUnitsAssignment.eContents().get(0);
		
		//Compilation:
		//	compilationUnits+=CompilationUnit*;
		@Override public ParserRule getRule() { return rule; }

		//compilationUnits+=CompilationUnit*
		public Assignment getCompilationUnitsAssignment() { return cCompilationUnitsAssignment; }

		//CompilationUnit
		public RuleCall getCompilationUnitsCompilationUnitParserRuleCall_0() { return cCompilationUnitsCompilationUnitParserRuleCall_0; }
	}

	public class CompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.CompilationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextClauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContextClauseContextClauseParserRuleCall_0_0 = (RuleCall)cContextClauseAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPragmasAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPragmasPragmaParserRuleCall_3_0_0 = (RuleCall)cPragmasAssignment_3_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//CompilationUnit:
		//	contextClause=ContextClause unit=Unit PV (=> pragmas+=Pragma PV)*;
		@Override public ParserRule getRule() { return rule; }

		//contextClause=ContextClause unit=Unit PV (=> pragmas+=Pragma PV)*
		public Group getGroup() { return cGroup; }

		//contextClause=ContextClause
		public Assignment getContextClauseAssignment_0() { return cContextClauseAssignment_0; }

		//ContextClause
		public RuleCall getContextClauseContextClauseParserRuleCall_0_0() { return cContextClauseContextClauseParserRuleCall_0_0; }

		//unit=Unit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//Unit
		public RuleCall getUnitUnitParserRuleCall_1_0() { return cUnitUnitParserRuleCall_1_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_2() { return cPVTerminalRuleCall_2; }

		//(=> pragmas+=Pragma PV)*
		public Group getGroup_3() { return cGroup_3; }

		//=> pragmas+=Pragma
		public Assignment getPragmasAssignment_3_0() { return cPragmasAssignment_3_0; }

		//Pragma
		public RuleCall getPragmasPragmaParserRuleCall_3_0_0() { return cPragmasPragmaParserRuleCall_3_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_3_1() { return cPVTerminalRuleCall_3_1; }
	}

	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Unit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubprogramBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLibraryUnitDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPackageBodyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSeparateSubunitParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Unit:
		//	=> SubprogramBody
		//	| => LibraryUnitDeclaration // TODO: Cutting Subunit, Package_body alternative for ads
		//	| PackageBody
		//	| SeparateSubunit // TODO: Cutting Library_unit_declaration for adb
		//;
		@Override public ParserRule getRule() { return rule; }

		//=> SubprogramBody | => LibraryUnitDeclaration // TODO: Cutting Subunit, Package_body alternative for ads
		//| PackageBody | SeparateSubunit
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> SubprogramBody
		public RuleCall getSubprogramBodyParserRuleCall_0() { return cSubprogramBodyParserRuleCall_0; }

		//=> LibraryUnitDeclaration
		public RuleCall getLibraryUnitDeclarationParserRuleCall_1() { return cLibraryUnitDeclarationParserRuleCall_1; }

		//PackageBody
		public RuleCall getPackageBodyParserRuleCall_2() { return cPackageBodyParserRuleCall_2; }

		//SeparateSubunit
		public RuleCall getSeparateSubunitParserRuleCall_3() { return cSeparateSubunitParserRuleCall_3; }
	}

	public class ContextClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ContextClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContextClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cContextItemsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cContextItemsContextItemParserRuleCall_1_0_0 = (RuleCall)cContextItemsAssignment_1_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// Context clause
		//ContextClause:
		//	{ContextClause} (contextItems+=ContextItem PV)*;
		@Override public ParserRule getRule() { return rule; }

		//{ContextClause} (contextItems+=ContextItem PV)*
		public Group getGroup() { return cGroup; }

		//{ContextClause}
		public Action getContextClauseAction_0() { return cContextClauseAction_0; }

		//(contextItems+=ContextItem PV)*
		public Group getGroup_1() { return cGroup_1; }

		//contextItems+=ContextItem
		public Assignment getContextItemsAssignment_1_0() { return cContextItemsAssignment_1_0; }

		//ContextItem
		public RuleCall getContextItemsContextItemParserRuleCall_1_0_0() { return cContextItemsContextItemParserRuleCall_1_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_1_1() { return cPVTerminalRuleCall_1_1; }
	}

	public class ContextItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ContextItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWithClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUseClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPragmaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ContextItem:
		//	WithClause
		//	| UseClause
		//	| Pragma;
		@Override public ParserRule getRule() { return rule; }

		//WithClause | UseClause | Pragma
		public Alternatives getAlternatives() { return cAlternatives; }

		//WithClause
		public RuleCall getWithClauseParserRuleCall_0() { return cWithClauseParserRuleCall_0; }

		//UseClause
		public RuleCall getUseClauseParserRuleCall_1() { return cUseClauseParserRuleCall_1; }

		//Pragma
		public RuleCall getPragmaParserRuleCall_2() { return cPragmaParserRuleCall_2; }
	}

	public class WithClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.WithClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLimitedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLimitedLIMITED_TerminalRuleCall_0_0 = (RuleCall)cLimitedAssignment_0.eContents().get(0);
		private final Assignment cPrivateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrivatePRIVATE_TerminalRuleCall_1_0 = (RuleCall)cPrivateAssignment_1.eContents().get(0);
		private final RuleCall cWITH_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cImportURIAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cImportURILibraryUnitDeclarationCrossReference_3_0 = (CrossReference)cImportURIAssignment_3.eContents().get(0);
		private final RuleCall cImportURILibraryUnitDeclarationPATHIDENTIFIERParserRuleCall_3_0_1 = (RuleCall)cImportURILibraryUnitDeclarationCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cVTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cImportURIAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cImportURILibraryUnitDeclarationCrossReference_4_1_0 = (CrossReference)cImportURIAssignment_4_1.eContents().get(0);
		private final RuleCall cImportURILibraryUnitDeclarationPATHIDENTIFIERParserRuleCall_4_1_0_1 = (RuleCall)cImportURILibraryUnitDeclarationCrossReference_4_1_0.eContents().get(1);
		
		//WithClause:
		//	limited?=LIMITED_? private?=PRIVATE_? WITH_ importURI+=[LibraryUnitDeclaration|PATHIDENTIFIER] (V
		//	importURI+=[LibraryUnitDeclaration|PATHIDENTIFIER])*;
		@Override public ParserRule getRule() { return rule; }

		//limited?=LIMITED_? private?=PRIVATE_? WITH_ importURI+=[LibraryUnitDeclaration|PATHIDENTIFIER] (V
		//importURI+=[LibraryUnitDeclaration|PATHIDENTIFIER])*
		public Group getGroup() { return cGroup; }

		//limited?=LIMITED_?
		public Assignment getLimitedAssignment_0() { return cLimitedAssignment_0; }

		//LIMITED_
		public RuleCall getLimitedLIMITED_TerminalRuleCall_0_0() { return cLimitedLIMITED_TerminalRuleCall_0_0; }

		//private?=PRIVATE_?
		public Assignment getPrivateAssignment_1() { return cPrivateAssignment_1; }

		//PRIVATE_
		public RuleCall getPrivatePRIVATE_TerminalRuleCall_1_0() { return cPrivatePRIVATE_TerminalRuleCall_1_0; }

		//WITH_
		public RuleCall getWITH_TerminalRuleCall_2() { return cWITH_TerminalRuleCall_2; }

		//importURI+=[LibraryUnitDeclaration|PATHIDENTIFIER]
		public Assignment getImportURIAssignment_3() { return cImportURIAssignment_3; }

		//[LibraryUnitDeclaration|PATHIDENTIFIER]
		public CrossReference getImportURILibraryUnitDeclarationCrossReference_3_0() { return cImportURILibraryUnitDeclarationCrossReference_3_0; }

		//PATHIDENTIFIER
		public RuleCall getImportURILibraryUnitDeclarationPATHIDENTIFIERParserRuleCall_3_0_1() { return cImportURILibraryUnitDeclarationPATHIDENTIFIERParserRuleCall_3_0_1; }

		//(V importURI+=[LibraryUnitDeclaration|PATHIDENTIFIER])*
		public Group getGroup_4() { return cGroup_4; }

		//V
		public RuleCall getVTerminalRuleCall_4_0() { return cVTerminalRuleCall_4_0; }

		//importURI+=[LibraryUnitDeclaration|PATHIDENTIFIER]
		public Assignment getImportURIAssignment_4_1() { return cImportURIAssignment_4_1; }

		//[LibraryUnitDeclaration|PATHIDENTIFIER]
		public CrossReference getImportURILibraryUnitDeclarationCrossReference_4_1_0() { return cImportURILibraryUnitDeclarationCrossReference_4_1_0; }

		//PATHIDENTIFIER
		public RuleCall getImportURILibraryUnitDeclarationPATHIDENTIFIERParserRuleCall_4_1_0_1() { return cImportURILibraryUnitDeclarationPATHIDENTIFIERParserRuleCall_4_1_0_1; }
	}

	public class UseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.UseClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUsePackageClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUseTypeClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// TODO: check if Name should be Defining_program_unit_name, because
		//// it seems XXX.XXX.XXX.XXX is the sole notation possible 
		//UseClause:
		//	UsePackageClause
		//	| UseTypeClause;
		@Override public ParserRule getRule() { return rule; }

		//UsePackageClause | UseTypeClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//UsePackageClause
		public RuleCall getUsePackageClauseParserRuleCall_0() { return cUsePackageClauseParserRuleCall_0; }

		//UseTypeClause
		public RuleCall getUseTypeClauseParserRuleCall_1() { return cUseTypeClauseParserRuleCall_1; }
	}

	public class UsePackageClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.UsePackageClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUSE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImportedNamespaceLibraryUnitDeclarationCrossReference_1_0 = (CrossReference)cImportedNamespaceAssignment_1.eContents().get(0);
		private final RuleCall cImportedNamespaceLibraryUnitDeclarationPATHIDENTIFIERParserRuleCall_1_0_1 = (RuleCall)cImportedNamespaceLibraryUnitDeclarationCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cVTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cImportedNamespaceLibraryUnitDeclarationCrossReference_2_1_0 = (CrossReference)cImportedNamespaceAssignment_2_1.eContents().get(0);
		private final RuleCall cImportedNamespaceLibraryUnitDeclarationPATHIDENTIFIERParserRuleCall_2_1_0_1 = (RuleCall)cImportedNamespaceLibraryUnitDeclarationCrossReference_2_1_0.eContents().get(1);
		
		//UsePackageClause:
		//	USE_ importedNamespace+=[LibraryUnitDeclaration|PATHIDENTIFIER] (V
		//	importedNamespace+=[LibraryUnitDeclaration|PATHIDENTIFIER])*;
		@Override public ParserRule getRule() { return rule; }

		//USE_ importedNamespace+=[LibraryUnitDeclaration|PATHIDENTIFIER] (V
		//importedNamespace+=[LibraryUnitDeclaration|PATHIDENTIFIER])*
		public Group getGroup() { return cGroup; }

		//USE_
		public RuleCall getUSE_TerminalRuleCall_0() { return cUSE_TerminalRuleCall_0; }

		//importedNamespace+=[LibraryUnitDeclaration|PATHIDENTIFIER]
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//[LibraryUnitDeclaration|PATHIDENTIFIER]
		public CrossReference getImportedNamespaceLibraryUnitDeclarationCrossReference_1_0() { return cImportedNamespaceLibraryUnitDeclarationCrossReference_1_0; }

		//PATHIDENTIFIER
		public RuleCall getImportedNamespaceLibraryUnitDeclarationPATHIDENTIFIERParserRuleCall_1_0_1() { return cImportedNamespaceLibraryUnitDeclarationPATHIDENTIFIERParserRuleCall_1_0_1; }

		//(V importedNamespace+=[LibraryUnitDeclaration|PATHIDENTIFIER])*
		public Group getGroup_2() { return cGroup_2; }

		//V
		public RuleCall getVTerminalRuleCall_2_0() { return cVTerminalRuleCall_2_0; }

		//importedNamespace+=[LibraryUnitDeclaration|PATHIDENTIFIER]
		public Assignment getImportedNamespaceAssignment_2_1() { return cImportedNamespaceAssignment_2_1; }

		//[LibraryUnitDeclaration|PATHIDENTIFIER]
		public CrossReference getImportedNamespaceLibraryUnitDeclarationCrossReference_2_1_0() { return cImportedNamespaceLibraryUnitDeclarationCrossReference_2_1_0; }

		//PATHIDENTIFIER
		public RuleCall getImportedNamespaceLibraryUnitDeclarationPATHIDENTIFIERParserRuleCall_2_1_0_1() { return cImportedNamespaceLibraryUnitDeclarationPATHIDENTIFIERParserRuleCall_2_1_0_1; }
	}

	public class UseTypeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.UseTypeClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUSE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTYPE_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypesNamesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesNamesPATHIDENTIFIERParserRuleCall_2_0 = (RuleCall)cTypesNamesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cVTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cUseTypeRefsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUseTypeRefsPATHIDENTIFIERParserRuleCall_3_1_0 = (RuleCall)cUseTypeRefsAssignment_3_1.eContents().get(0);
		
		//// TODO: check if Name should be Defining_program_unit_name, because
		//// it seems XXX.XXX.XXX.XXX is the sole notation possible
		//// TODO: check importedNamespace refers to LibraryUnitDeclaration's names.
		//UseTypeClause:
		//	USE_ TYPE_ typesNames+=PATHIDENTIFIER (V useTypeRefs+=PATHIDENTIFIER)*;
		@Override public ParserRule getRule() { return rule; }

		//USE_ TYPE_ typesNames+=PATHIDENTIFIER (V useTypeRefs+=PATHIDENTIFIER)*
		public Group getGroup() { return cGroup; }

		//USE_
		public RuleCall getUSE_TerminalRuleCall_0() { return cUSE_TerminalRuleCall_0; }

		//TYPE_
		public RuleCall getTYPE_TerminalRuleCall_1() { return cTYPE_TerminalRuleCall_1; }

		//typesNames+=PATHIDENTIFIER
		public Assignment getTypesNamesAssignment_2() { return cTypesNamesAssignment_2; }

		//PATHIDENTIFIER
		public RuleCall getTypesNamesPATHIDENTIFIERParserRuleCall_2_0() { return cTypesNamesPATHIDENTIFIERParserRuleCall_2_0; }

		//(V useTypeRefs+=PATHIDENTIFIER)*
		public Group getGroup_3() { return cGroup_3; }

		//V
		public RuleCall getVTerminalRuleCall_3_0() { return cVTerminalRuleCall_3_0; }

		//useTypeRefs+=PATHIDENTIFIER
		public Assignment getUseTypeRefsAssignment_3_1() { return cUseTypeRefsAssignment_3_1; }

		//PATHIDENTIFIER
		public RuleCall getUseTypeRefsPATHIDENTIFIERParserRuleCall_3_1_0() { return cUseTypeRefsPATHIDENTIFIERParserRuleCall_3_1_0; }
	}

	public class LibraryUnitDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.LibraryUnitDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrivateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrivatePRIVATE_TerminalRuleCall_0_0 = (RuleCall)cPrivateAssignment_0.eContents().get(0);
		private final Assignment cLibraryUnitSpecificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLibraryUnitSpecificationLibraryUnitSpecificationParserRuleCall_1_0 = (RuleCall)cLibraryUnitSpecificationAssignment_1.eContents().get(0);
		
		//// TODO: check if Name should be Defining_program_unit_name (or something adapted), because
		//// it seems XXX.XXX.XXX.XXX is the sole notation possible
		//LibraryUnitDeclaration:
		//	private?=PRIVATE_?
		//	libraryUnitSpecification=LibraryUnitSpecification;
		@Override public ParserRule getRule() { return rule; }

		//private?=PRIVATE_? libraryUnitSpecification=LibraryUnitSpecification
		public Group getGroup() { return cGroup; }

		//private?=PRIVATE_?
		public Assignment getPrivateAssignment_0() { return cPrivateAssignment_0; }

		//PRIVATE_
		public RuleCall getPrivatePRIVATE_TerminalRuleCall_0_0() { return cPrivatePRIVATE_TerminalRuleCall_0_0; }

		//libraryUnitSpecification=LibraryUnitSpecification
		public Assignment getLibraryUnitSpecificationAssignment_1() { return cLibraryUnitSpecificationAssignment_1; }

		//LibraryUnitSpecification
		public RuleCall getLibraryUnitSpecificationLibraryUnitSpecificationParserRuleCall_1_0() { return cLibraryUnitSpecificationLibraryUnitSpecificationParserRuleCall_1_0; }
	}

	public class LibraryUnitSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.LibraryUnitSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGenericInstantiationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSubprogramSpecificationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGenericDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LibraryUnitSpecification:
		//	PackageDeclaration
		//	| GenericInstantiation
		//	| SubprogramSpecification
		//	| GenericDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//PackageDeclaration | GenericInstantiation | SubprogramSpecification | GenericDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_0() { return cPackageDeclarationParserRuleCall_0; }

		//GenericInstantiation
		public RuleCall getGenericInstantiationParserRuleCall_1() { return cGenericInstantiationParserRuleCall_1; }

		//SubprogramSpecification
		public RuleCall getSubprogramSpecificationParserRuleCall_2() { return cSubprogramSpecificationParserRuleCall_2; }

		//GenericDeclaration
		public RuleCall getGenericDeclarationParserRuleCall_3() { return cGenericDeclarationParserRuleCall_3; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PackageDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRenamingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PackageDeclaration:
		//	PackageDefinition | Renaming;
		@Override public ParserRule getRule() { return rule; }

		//PackageDefinition | Renaming
		public Alternatives getAlternatives() { return cAlternatives; }

		//PackageDefinition
		public RuleCall getPackageDefinitionParserRuleCall_0() { return cPackageDefinitionParserRuleCall_0; }

		//Renaming
		public RuleCall getRenamingParserRuleCall_1() { return cRenamingParserRuleCall_1; }
	}

	public class PackageDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PackageDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPACKAGE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePATHIDENTIFIERParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cPackageSpecificationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPackageSpecificationPackageSpecificationParserRuleCall_3_0 = (RuleCall)cPackageSpecificationAssignment_3.eContents().get(0);
		
		//PackageDefinition:
		//	PACKAGE_ name=PATHIDENTIFIER IS_ packageSpecification=PackageSpecification;
		@Override public ParserRule getRule() { return rule; }

		//PACKAGE_ name=PATHIDENTIFIER IS_ packageSpecification=PackageSpecification
		public Group getGroup() { return cGroup; }

		//PACKAGE_
		public RuleCall getPACKAGE_TerminalRuleCall_0() { return cPACKAGE_TerminalRuleCall_0; }

		//name=PATHIDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//PATHIDENTIFIER
		public RuleCall getNamePATHIDENTIFIERParserRuleCall_1_0() { return cNamePATHIDENTIFIERParserRuleCall_1_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_2() { return cIS_TerminalRuleCall_2; }

		//packageSpecification=PackageSpecification
		public Assignment getPackageSpecificationAssignment_3() { return cPackageSpecificationAssignment_3; }

		//PackageSpecification
		public RuleCall getPackageSpecificationPackageSpecificationParserRuleCall_3_0() { return cPackageSpecificationPackageSpecificationParserRuleCall_3_0; }
	}

	public class RenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Renaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPACKAGE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePATHIDENTIFIERParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cRENAMES_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cRenamedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRenamedPATHIDENTIFIERParserRuleCall_3_0 = (RuleCall)cRenamedAssignment_3.eContents().get(0);
		
		//Renaming:
		//	PACKAGE_ name=PATHIDENTIFIER RENAMES_ renamed=PATHIDENTIFIER;
		@Override public ParserRule getRule() { return rule; }

		//PACKAGE_ name=PATHIDENTIFIER RENAMES_ renamed=PATHIDENTIFIER
		public Group getGroup() { return cGroup; }

		//PACKAGE_
		public RuleCall getPACKAGE_TerminalRuleCall_0() { return cPACKAGE_TerminalRuleCall_0; }

		//name=PATHIDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//PATHIDENTIFIER
		public RuleCall getNamePATHIDENTIFIERParserRuleCall_1_0() { return cNamePATHIDENTIFIERParserRuleCall_1_0; }

		//RENAMES_
		public RuleCall getRENAMES_TerminalRuleCall_2() { return cRENAMES_TerminalRuleCall_2; }

		//renamed=PATHIDENTIFIER
		public Assignment getRenamedAssignment_3() { return cRenamedAssignment_3; }

		//PATHIDENTIFIER
		public RuleCall getRenamedPATHIDENTIFIERParserRuleCall_3_0() { return cRenamedPATHIDENTIFIERParserRuleCall_3_0; }
	}

	public class GenericDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.GenericDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGENERIC_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cGenericItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGenericItemsGenericItemsParserRuleCall_1_0 = (RuleCall)cGenericItemsAssignment_1.eContents().get(0);
		private final Assignment cLibrarySpecificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLibrarySpecificationLibrarySpecificationParserRuleCall_2_0 = (RuleCall)cLibrarySpecificationAssignment_2.eContents().get(0);
		
		//GenericDeclaration:
		//	GENERIC_
		//	genericItems=GenericItems
		//	librarySpecification=LibrarySpecification;
		@Override public ParserRule getRule() { return rule; }

		//GENERIC_ genericItems=GenericItems librarySpecification=LibrarySpecification
		public Group getGroup() { return cGroup; }

		//GENERIC_
		public RuleCall getGENERIC_TerminalRuleCall_0() { return cGENERIC_TerminalRuleCall_0; }

		//genericItems=GenericItems
		public Assignment getGenericItemsAssignment_1() { return cGenericItemsAssignment_1; }

		//GenericItems
		public RuleCall getGenericItemsGenericItemsParserRuleCall_1_0() { return cGenericItemsGenericItemsParserRuleCall_1_0; }

		//librarySpecification=LibrarySpecification
		public Assignment getLibrarySpecificationAssignment_2() { return cLibrarySpecificationAssignment_2; }

		//LibrarySpecification
		public RuleCall getLibrarySpecificationLibrarySpecificationParserRuleCall_2_0() { return cLibrarySpecificationLibrarySpecificationParserRuleCall_2_0; }
	}

	public class GenericInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.GenericInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cPACKAGE_TerminalRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cNamePATHIDENTIFIERParserRuleCall_0_0_1_0 = (RuleCall)cNameAssignment_0_0_1.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_0_0_2 = (RuleCall)cGroup_0_0.eContents().get(2);
		private final RuleCall cNEW_TerminalRuleCall_0_0_3 = (RuleCall)cGroup_0_0.eContents().get(3);
		private final Assignment cGenericNameAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cGenericNamePATHIDENTIFIERParserRuleCall_0_0_4_0 = (RuleCall)cGenericNameAssignment_0_0_4.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cOverridingAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cOverridingOverridingIndicatorParserRuleCall_0_1_0_0 = (RuleCall)cOverridingAssignment_0_1_0.eContents().get(0);
		private final RuleCall cPROCEDURE_TerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Assignment cNameAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cNamePATHIDENTIFIERParserRuleCall_0_1_2_0 = (RuleCall)cNameAssignment_0_1_2.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_0_1_3 = (RuleCall)cGroup_0_1.eContents().get(3);
		private final RuleCall cNEW_TerminalRuleCall_0_1_4 = (RuleCall)cGroup_0_1.eContents().get(4);
		private final Assignment cGenericNameAssignment_0_1_5 = (Assignment)cGroup_0_1.eContents().get(5);
		private final RuleCall cGenericNamePATHIDENTIFIERParserRuleCall_0_1_5_0 = (RuleCall)cGenericNameAssignment_0_1_5.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Assignment cOverridingAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final RuleCall cOverridingOverridingIndicatorParserRuleCall_0_2_0_0 = (RuleCall)cOverridingAssignment_0_2_0.eContents().get(0);
		private final RuleCall cFUNCTION_TerminalRuleCall_0_2_1 = (RuleCall)cGroup_0_2.eContents().get(1);
		private final Assignment cNameAssignment_0_2_2 = (Assignment)cGroup_0_2.eContents().get(2);
		private final RuleCall cNamePATHNAMEParserRuleCall_0_2_2_0 = (RuleCall)cNameAssignment_0_2_2.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_0_2_3 = (RuleCall)cGroup_0_2.eContents().get(3);
		private final RuleCall cNEW_TerminalRuleCall_0_2_4 = (RuleCall)cGroup_0_2.eContents().get(4);
		private final Assignment cGenericNameAssignment_0_2_5 = (Assignment)cGroup_0_2.eContents().get(5);
		private final RuleCall cGenericNamePATHNAMEParserRuleCall_0_2_5_0 = (RuleCall)cGenericNameAssignment_0_2_5.eContents().get(0);
		private final Assignment cGenericActualPartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGenericActualPartGenericActualPartParserRuleCall_1_0 = (RuleCall)cGenericActualPartAssignment_1.eContents().get(0);
		
		//GenericInstantiation:
		//	(PACKAGE_ name=PATHIDENTIFIER IS_ NEW_ genericName=PATHIDENTIFIER
		//	| overriding=OverridingIndicator? PROCEDURE_ name=PATHIDENTIFIER IS_ NEW_ genericName=PATHIDENTIFIER
		//	| overriding=OverridingIndicator? FUNCTION_ name=PATHNAME IS_ NEW_ genericName=PATHNAME)
		//	genericActualPart=GenericActualPart? // NOTE: Changed genericName = Name by Simple_name  
		//	// TODO : semantic check: 
		//	// if actual parameter Expression = Name, check it is either a :
		//	//        | Variable_name
		//	//        | Subprogram_name
		//	//        | Entry_name
		//	//        | Subtype_mark
		//	//        | Package_instance_name 
		//;
		@Override public ParserRule getRule() { return rule; }

		//(PACKAGE_ name=PATHIDENTIFIER IS_ NEW_ genericName=PATHIDENTIFIER | overriding=OverridingIndicator? PROCEDURE_
		//name=PATHIDENTIFIER IS_ NEW_ genericName=PATHIDENTIFIER | overriding=OverridingIndicator? FUNCTION_ name=PATHNAME IS_
		//NEW_ genericName=PATHNAME) genericActualPart=GenericActualPart?
		public Group getGroup() { return cGroup; }

		//(PACKAGE_ name=PATHIDENTIFIER IS_ NEW_ genericName=PATHIDENTIFIER | overriding=OverridingIndicator? PROCEDURE_
		//name=PATHIDENTIFIER IS_ NEW_ genericName=PATHIDENTIFIER | overriding=OverridingIndicator? FUNCTION_ name=PATHNAME IS_
		//NEW_ genericName=PATHNAME)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//PACKAGE_ name=PATHIDENTIFIER IS_ NEW_ genericName=PATHIDENTIFIER
		public Group getGroup_0_0() { return cGroup_0_0; }

		//PACKAGE_
		public RuleCall getPACKAGE_TerminalRuleCall_0_0_0() { return cPACKAGE_TerminalRuleCall_0_0_0; }

		//name=PATHIDENTIFIER
		public Assignment getNameAssignment_0_0_1() { return cNameAssignment_0_0_1; }

		//PATHIDENTIFIER
		public RuleCall getNamePATHIDENTIFIERParserRuleCall_0_0_1_0() { return cNamePATHIDENTIFIERParserRuleCall_0_0_1_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_0_0_2() { return cIS_TerminalRuleCall_0_0_2; }

		//NEW_
		public RuleCall getNEW_TerminalRuleCall_0_0_3() { return cNEW_TerminalRuleCall_0_0_3; }

		//genericName=PATHIDENTIFIER
		public Assignment getGenericNameAssignment_0_0_4() { return cGenericNameAssignment_0_0_4; }

		//PATHIDENTIFIER
		public RuleCall getGenericNamePATHIDENTIFIERParserRuleCall_0_0_4_0() { return cGenericNamePATHIDENTIFIERParserRuleCall_0_0_4_0; }

		//overriding=OverridingIndicator? PROCEDURE_ name=PATHIDENTIFIER IS_ NEW_ genericName=PATHIDENTIFIER
		public Group getGroup_0_1() { return cGroup_0_1; }

		//overriding=OverridingIndicator?
		public Assignment getOverridingAssignment_0_1_0() { return cOverridingAssignment_0_1_0; }

		//OverridingIndicator
		public RuleCall getOverridingOverridingIndicatorParserRuleCall_0_1_0_0() { return cOverridingOverridingIndicatorParserRuleCall_0_1_0_0; }

		//PROCEDURE_
		public RuleCall getPROCEDURE_TerminalRuleCall_0_1_1() { return cPROCEDURE_TerminalRuleCall_0_1_1; }

		//name=PATHIDENTIFIER
		public Assignment getNameAssignment_0_1_2() { return cNameAssignment_0_1_2; }

		//PATHIDENTIFIER
		public RuleCall getNamePATHIDENTIFIERParserRuleCall_0_1_2_0() { return cNamePATHIDENTIFIERParserRuleCall_0_1_2_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_0_1_3() { return cIS_TerminalRuleCall_0_1_3; }

		//NEW_
		public RuleCall getNEW_TerminalRuleCall_0_1_4() { return cNEW_TerminalRuleCall_0_1_4; }

		//genericName=PATHIDENTIFIER
		public Assignment getGenericNameAssignment_0_1_5() { return cGenericNameAssignment_0_1_5; }

		//PATHIDENTIFIER
		public RuleCall getGenericNamePATHIDENTIFIERParserRuleCall_0_1_5_0() { return cGenericNamePATHIDENTIFIERParserRuleCall_0_1_5_0; }

		//overriding=OverridingIndicator? FUNCTION_ name=PATHNAME IS_ NEW_ genericName=PATHNAME
		public Group getGroup_0_2() { return cGroup_0_2; }

		//overriding=OverridingIndicator?
		public Assignment getOverridingAssignment_0_2_0() { return cOverridingAssignment_0_2_0; }

		//OverridingIndicator
		public RuleCall getOverridingOverridingIndicatorParserRuleCall_0_2_0_0() { return cOverridingOverridingIndicatorParserRuleCall_0_2_0_0; }

		//FUNCTION_
		public RuleCall getFUNCTION_TerminalRuleCall_0_2_1() { return cFUNCTION_TerminalRuleCall_0_2_1; }

		//name=PATHNAME
		public Assignment getNameAssignment_0_2_2() { return cNameAssignment_0_2_2; }

		//PATHNAME
		public RuleCall getNamePATHNAMEParserRuleCall_0_2_2_0() { return cNamePATHNAMEParserRuleCall_0_2_2_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_0_2_3() { return cIS_TerminalRuleCall_0_2_3; }

		//NEW_
		public RuleCall getNEW_TerminalRuleCall_0_2_4() { return cNEW_TerminalRuleCall_0_2_4; }

		//genericName=PATHNAME
		public Assignment getGenericNameAssignment_0_2_5() { return cGenericNameAssignment_0_2_5; }

		//PATHNAME
		public RuleCall getGenericNamePATHNAMEParserRuleCall_0_2_5_0() { return cGenericNamePATHNAMEParserRuleCall_0_2_5_0; }

		//genericActualPart=GenericActualPart?
		public Assignment getGenericActualPartAssignment_1() { return cGenericActualPartAssignment_1; }

		//GenericActualPart
		public RuleCall getGenericActualPartGenericActualPartParserRuleCall_1_0() { return cGenericActualPartGenericActualPartParserRuleCall_1_0; }
	}

	public class PackageSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PackageSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPackageSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPublicBasicDeclarativeItemsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPublicBasicDeclarativeItemsBasicDeclarativeItemParserRuleCall_1_0_0 = (RuleCall)cPublicBasicDeclarativeItemsAssignment_1_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cPRIVATE_TerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cPrivateBasicDeclarativeItemsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cPrivateBasicDeclarativeItemsBasicDeclarativeItemParserRuleCall_2_1_0_0 = (RuleCall)cPrivateBasicDeclarativeItemsAssignment_2_1_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final RuleCall cEND_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cEndnameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndnamePATHIDENTIFIERParserRuleCall_4_0 = (RuleCall)cEndnameAssignment_4.eContents().get(0);
		
		//PackageSpecification:
		//	{PackageSpecification} (publicBasicDeclarativeItems+=BasicDeclarativeItem PV)* (PRIVATE_
		//	(privateBasicDeclarativeItems+=BasicDeclarativeItem PV)*)?
		//	END_ endname=PATHIDENTIFIER? // TODO (by the initial author) validate same as Name 
		//;
		@Override public ParserRule getRule() { return rule; }

		//{PackageSpecification} (publicBasicDeclarativeItems+=BasicDeclarativeItem PV)* (PRIVATE_
		//(privateBasicDeclarativeItems+=BasicDeclarativeItem PV)*)? END_ endname=PATHIDENTIFIER?
		public Group getGroup() { return cGroup; }

		//{PackageSpecification}
		public Action getPackageSpecificationAction_0() { return cPackageSpecificationAction_0; }

		//(publicBasicDeclarativeItems+=BasicDeclarativeItem PV)*
		public Group getGroup_1() { return cGroup_1; }

		//publicBasicDeclarativeItems+=BasicDeclarativeItem
		public Assignment getPublicBasicDeclarativeItemsAssignment_1_0() { return cPublicBasicDeclarativeItemsAssignment_1_0; }

		//BasicDeclarativeItem
		public RuleCall getPublicBasicDeclarativeItemsBasicDeclarativeItemParserRuleCall_1_0_0() { return cPublicBasicDeclarativeItemsBasicDeclarativeItemParserRuleCall_1_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_1_1() { return cPVTerminalRuleCall_1_1; }

		//(PRIVATE_ (privateBasicDeclarativeItems+=BasicDeclarativeItem PV)*)?
		public Group getGroup_2() { return cGroup_2; }

		//PRIVATE_
		public RuleCall getPRIVATE_TerminalRuleCall_2_0() { return cPRIVATE_TerminalRuleCall_2_0; }

		//(privateBasicDeclarativeItems+=BasicDeclarativeItem PV)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//privateBasicDeclarativeItems+=BasicDeclarativeItem
		public Assignment getPrivateBasicDeclarativeItemsAssignment_2_1_0() { return cPrivateBasicDeclarativeItemsAssignment_2_1_0; }

		//BasicDeclarativeItem
		public RuleCall getPrivateBasicDeclarativeItemsBasicDeclarativeItemParserRuleCall_2_1_0_0() { return cPrivateBasicDeclarativeItemsBasicDeclarativeItemParserRuleCall_2_1_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_2_1_1() { return cPVTerminalRuleCall_2_1_1; }

		//END_
		public RuleCall getEND_TerminalRuleCall_3() { return cEND_TerminalRuleCall_3; }

		//endname=PATHIDENTIFIER?
		public Assignment getEndnameAssignment_4() { return cEndnameAssignment_4; }

		//PATHIDENTIFIER
		public RuleCall getEndnamePATHIDENTIFIERParserRuleCall_4_0() { return cEndnamePATHIDENTIFIERParserRuleCall_4_0; }
	}

	public class SubprogramBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SubprogramBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubprogramSpecificationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubprogramSpecificationSubprogramSpecificationParserRuleCall_0_0 = (RuleCall)cSubprogramSpecificationAssignment_0.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cDeclarativeItemsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDeclarativeItemsDeclarativeItemParserRuleCall_2_0_0 = (RuleCall)cDeclarativeItemsAssignment_2_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cBEGIN_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cHandledSequenceOfStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_4_0 = (RuleCall)cHandledSequenceOfStatementsAssignment_4.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cEndnameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndnamePATHNAMEParserRuleCall_6_0 = (RuleCall)cEndnameAssignment_6.eContents().get(0);
		
		//SubprogramBody:
		//	subprogramSpecification=SubprogramSpecification IS_ (declarativeItems+=DeclarativeItem PV)*
		//	BEGIN_
		//	handledSequenceOfStatements=HandledSequenceOfStatements
		//	END_ endname=PATHNAME?;
		@Override public ParserRule getRule() { return rule; }

		//subprogramSpecification=SubprogramSpecification IS_ (declarativeItems+=DeclarativeItem PV)* BEGIN_
		//handledSequenceOfStatements=HandledSequenceOfStatements END_ endname=PATHNAME?
		public Group getGroup() { return cGroup; }

		//subprogramSpecification=SubprogramSpecification
		public Assignment getSubprogramSpecificationAssignment_0() { return cSubprogramSpecificationAssignment_0; }

		//SubprogramSpecification
		public RuleCall getSubprogramSpecificationSubprogramSpecificationParserRuleCall_0_0() { return cSubprogramSpecificationSubprogramSpecificationParserRuleCall_0_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_1() { return cIS_TerminalRuleCall_1; }

		//(declarativeItems+=DeclarativeItem PV)*
		public Group getGroup_2() { return cGroup_2; }

		//declarativeItems+=DeclarativeItem
		public Assignment getDeclarativeItemsAssignment_2_0() { return cDeclarativeItemsAssignment_2_0; }

		//DeclarativeItem
		public RuleCall getDeclarativeItemsDeclarativeItemParserRuleCall_2_0_0() { return cDeclarativeItemsDeclarativeItemParserRuleCall_2_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_2_1() { return cPVTerminalRuleCall_2_1; }

		//BEGIN_
		public RuleCall getBEGIN_TerminalRuleCall_3() { return cBEGIN_TerminalRuleCall_3; }

		//handledSequenceOfStatements=HandledSequenceOfStatements
		public Assignment getHandledSequenceOfStatementsAssignment_4() { return cHandledSequenceOfStatementsAssignment_4; }

		//HandledSequenceOfStatements
		public RuleCall getHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_4_0() { return cHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_4_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_5() { return cEND_TerminalRuleCall_5; }

		//endname=PATHNAME?
		public Assignment getEndnameAssignment_6() { return cEndnameAssignment_6; }

		//PATHNAME
		public RuleCall getEndnamePATHNAMEParserRuleCall_6_0() { return cEndnamePATHNAMEParserRuleCall_6_0; }
	}

	public class DeclarativeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DeclarativeBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubprogramBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPackageBodyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEntryBodyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTaskBodyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBlockStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// NB: Added just for meta-model handling (not for syntax)
		//DeclarativeBlock:
		//	SubprogramBody
		//	| PackageBody
		//	| EntryBody
		//	| TaskBody
		//	| BlockStatement;
		@Override public ParserRule getRule() { return rule; }

		//SubprogramBody | PackageBody | EntryBody | TaskBody | BlockStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubprogramBody
		public RuleCall getSubprogramBodyParserRuleCall_0() { return cSubprogramBodyParserRuleCall_0; }

		//PackageBody
		public RuleCall getPackageBodyParserRuleCall_1() { return cPackageBodyParserRuleCall_1; }

		//EntryBody
		public RuleCall getEntryBodyParserRuleCall_2() { return cEntryBodyParserRuleCall_2; }

		//TaskBody
		public RuleCall getTaskBodyParserRuleCall_3() { return cTaskBodyParserRuleCall_3; }

		//BlockStatement
		public RuleCall getBlockStatementParserRuleCall_4() { return cBlockStatementParserRuleCall_4; }
	}

	public class BasicDeclarativeItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.BasicDeclarativeItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAspectClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUseClauseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPragmaParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BasicDeclarativeItem:
		//	BasicDeclaration
		//	| AspectClause
		//	| UseClause
		//	| Pragma;
		@Override public ParserRule getRule() { return rule; }

		//BasicDeclaration | AspectClause | UseClause | Pragma
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicDeclaration
		public RuleCall getBasicDeclarationParserRuleCall_0() { return cBasicDeclarationParserRuleCall_0; }

		//AspectClause
		public RuleCall getAspectClauseParserRuleCall_1() { return cAspectClauseParserRuleCall_1; }

		//UseClause
		public RuleCall getUseClauseParserRuleCall_2() { return cUseClauseParserRuleCall_2; }

		//Pragma
		public RuleCall getPragmaParserRuleCall_3() { return cPragmaParserRuleCall_3; }
	}

	public class BasicDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.BasicDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGenericDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSubprogramDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPackageDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNumberDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExceptionDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cGenericInstantiationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTaskDeclarationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTypeDeclarationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//BasicDeclaration:
		//	GenericDeclaration
		//	| => ObjectDeclaration
		//	| => SubprogramDeclaration
		//	| => PackageDeclaration
		//	| => NumberDeclaration
		//	| => ExceptionDeclaration
		//	| GenericInstantiation
		//	| TaskDeclaration
		//	| TypeDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//GenericDeclaration | => ObjectDeclaration | => SubprogramDeclaration | => PackageDeclaration | => NumberDeclaration | =>
		//ExceptionDeclaration | GenericInstantiation | TaskDeclaration | TypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//GenericDeclaration
		public RuleCall getGenericDeclarationParserRuleCall_0() { return cGenericDeclarationParserRuleCall_0; }

		//=> ObjectDeclaration
		public RuleCall getObjectDeclarationParserRuleCall_1() { return cObjectDeclarationParserRuleCall_1; }

		//=> SubprogramDeclaration
		public RuleCall getSubprogramDeclarationParserRuleCall_2() { return cSubprogramDeclarationParserRuleCall_2; }

		//=> PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_3() { return cPackageDeclarationParserRuleCall_3; }

		//=> NumberDeclaration
		public RuleCall getNumberDeclarationParserRuleCall_4() { return cNumberDeclarationParserRuleCall_4; }

		//=> ExceptionDeclaration
		public RuleCall getExceptionDeclarationParserRuleCall_5() { return cExceptionDeclarationParserRuleCall_5; }

		//GenericInstantiation
		public RuleCall getGenericInstantiationParserRuleCall_6() { return cGenericInstantiationParserRuleCall_6; }

		//TaskDeclaration
		public RuleCall getTaskDeclarationParserRuleCall_7() { return cTaskDeclarationParserRuleCall_7; }

		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_8() { return cTypeDeclarationParserRuleCall_8; }
	}

	public class TaskDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.TaskDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTASK_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cTYPE_TerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0_1_0 = (RuleCall)cNameAssignment_1_0_1.eContents().get(0);
		private final Assignment cKnownDiscriminantPartAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cKnownDiscriminantPartKnownDiscriminantPartParserRuleCall_1_0_2_0 = (RuleCall)cKnownDiscriminantPartAssignment_1_0_2.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cIS_TerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cNEW_TerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Assignment cInterfaceListAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cInterfaceListInterfaceListParserRuleCall_2_1_1_0 = (RuleCall)cInterfaceListAssignment_2_1_1.eContents().get(0);
		private final RuleCall cWITH_TerminalRuleCall_2_1_2 = (RuleCall)cGroup_2_1.eContents().get(2);
		private final Assignment cTaskDefinitionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTaskDefinitionTaskDefinitionParserRuleCall_2_2_0 = (RuleCall)cTaskDefinitionAssignment_2_2.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Assignment cEndidAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final CrossReference cEndidTaskDeclarationCrossReference_2_4_0 = (CrossReference)cEndidAssignment_2_4.eContents().get(0);
		private final RuleCall cEndidTaskDeclarationIDENTIFIERTerminalRuleCall_2_4_0_1 = (RuleCall)cEndidTaskDeclarationCrossReference_2_4_0.eContents().get(1);
		
		//TaskDeclaration:
		//	TASK_ (TYPE_ name=IDENTIFIER knownDiscriminantPart=KnownDiscriminantPart? | name=IDENTIFIER) (IS_ (NEW_
		//	interfaceList=InterfaceList WITH_)?
		//	taskDefinition=TaskDefinition END_ endid=[TaskDeclaration|IDENTIFIER]?)?;
		@Override public ParserRule getRule() { return rule; }

		//TASK_ (TYPE_ name=IDENTIFIER knownDiscriminantPart=KnownDiscriminantPart? | name=IDENTIFIER) (IS_ (NEW_
		//interfaceList=InterfaceList WITH_)? taskDefinition=TaskDefinition END_ endid=[TaskDeclaration|IDENTIFIER]?)?
		public Group getGroup() { return cGroup; }

		//TASK_
		public RuleCall getTASK_TerminalRuleCall_0() { return cTASK_TerminalRuleCall_0; }

		//(TYPE_ name=IDENTIFIER knownDiscriminantPart=KnownDiscriminantPart? | name=IDENTIFIER)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//TYPE_ name=IDENTIFIER knownDiscriminantPart=KnownDiscriminantPart?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//TYPE_
		public RuleCall getTYPE_TerminalRuleCall_1_0_0() { return cTYPE_TerminalRuleCall_1_0_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1_0_1() { return cNameAssignment_1_0_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0_1_0; }

		//knownDiscriminantPart=KnownDiscriminantPart?
		public Assignment getKnownDiscriminantPartAssignment_1_0_2() { return cKnownDiscriminantPartAssignment_1_0_2; }

		//KnownDiscriminantPart
		public RuleCall getKnownDiscriminantPartKnownDiscriminantPartParserRuleCall_1_0_2_0() { return cKnownDiscriminantPartKnownDiscriminantPartParserRuleCall_1_0_2_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_1_0; }

		//(IS_ (NEW_ interfaceList=InterfaceList WITH_)? taskDefinition=TaskDefinition END_ endid=[TaskDeclaration|IDENTIFIER]?)?
		public Group getGroup_2() { return cGroup_2; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_2_0() { return cIS_TerminalRuleCall_2_0; }

		//(NEW_ interfaceList=InterfaceList WITH_)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//NEW_
		public RuleCall getNEW_TerminalRuleCall_2_1_0() { return cNEW_TerminalRuleCall_2_1_0; }

		//interfaceList=InterfaceList
		public Assignment getInterfaceListAssignment_2_1_1() { return cInterfaceListAssignment_2_1_1; }

		//InterfaceList
		public RuleCall getInterfaceListInterfaceListParserRuleCall_2_1_1_0() { return cInterfaceListInterfaceListParserRuleCall_2_1_1_0; }

		//WITH_
		public RuleCall getWITH_TerminalRuleCall_2_1_2() { return cWITH_TerminalRuleCall_2_1_2; }

		//taskDefinition=TaskDefinition
		public Assignment getTaskDefinitionAssignment_2_2() { return cTaskDefinitionAssignment_2_2; }

		//TaskDefinition
		public RuleCall getTaskDefinitionTaskDefinitionParserRuleCall_2_2_0() { return cTaskDefinitionTaskDefinitionParserRuleCall_2_2_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_2_3() { return cEND_TerminalRuleCall_2_3; }

		//endid=[TaskDeclaration|IDENTIFIER]?
		public Assignment getEndidAssignment_2_4() { return cEndidAssignment_2_4; }

		//[TaskDeclaration|IDENTIFIER]
		public CrossReference getEndidTaskDeclarationCrossReference_2_4_0() { return cEndidTaskDeclarationCrossReference_2_4_0; }

		//IDENTIFIER
		public RuleCall getEndidTaskDeclarationIDENTIFIERTerminalRuleCall_2_4_0_1() { return cEndidTaskDeclarationIDENTIFIERTerminalRuleCall_2_4_0_1; }
	}

	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.TypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNewTypeDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubtypeDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeDeclaration:
		//	NewTypeDeclaration | SubtypeDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//NewTypeDeclaration | SubtypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//NewTypeDeclaration
		public RuleCall getNewTypeDeclarationParserRuleCall_0() { return cNewTypeDeclarationParserRuleCall_0; }

		//SubtypeDeclaration
		public RuleCall getSubtypeDeclarationParserRuleCall_1() { return cSubtypeDeclarationParserRuleCall_1; }
	}

	public class NewTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NewTypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFullTypeDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIncompleteTypeDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrivateTypeDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrivateExtensionDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NewTypeDeclaration:
		//	=> FullTypeDeclaration
		//	| => IncompleteTypeDeclaration
		//	| PrivateTypeDeclaration // TODO: Check it is in a public section of package only.
		//	| => PrivateExtensionDeclaration // TODO: Check it is in a public section of package only.
		//;
		@Override public ParserRule getRule() { return rule; }

		//=> FullTypeDeclaration | => IncompleteTypeDeclaration | PrivateTypeDeclaration // TODO: Check it is in a public section of package only.
		//| => PrivateExtensionDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> FullTypeDeclaration
		public RuleCall getFullTypeDeclarationParserRuleCall_0() { return cFullTypeDeclarationParserRuleCall_0; }

		//=> IncompleteTypeDeclaration
		public RuleCall getIncompleteTypeDeclarationParserRuleCall_1() { return cIncompleteTypeDeclarationParserRuleCall_1; }

		//PrivateTypeDeclaration
		public RuleCall getPrivateTypeDeclarationParserRuleCall_2() { return cPrivateTypeDeclarationParserRuleCall_2; }

		//=> PrivateExtensionDeclaration
		public RuleCall getPrivateExtensionDeclarationParserRuleCall_3() { return cPrivateExtensionDeclarationParserRuleCall_3; }
	}

	public class FullTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FullTypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFullDataTypeDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProtectedTypeDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FullTypeDeclaration:
		//	FullDataTypeDeclaration
		//	| ProtectedTypeDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//FullDataTypeDeclaration | ProtectedTypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//FullDataTypeDeclaration
		public RuleCall getFullDataTypeDeclarationParserRuleCall_0() { return cFullDataTypeDeclarationParserRuleCall_0; }

		//ProtectedTypeDeclaration
		public RuleCall getProtectedTypeDeclarationParserRuleCall_1() { return cProtectedTypeDeclarationParserRuleCall_1; }
	}

	public class FullDataTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FullDataTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTYPE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cKnownDiscriminantPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKnownDiscriminantPartKnownDiscriminantPartParserRuleCall_2_0 = (RuleCall)cKnownDiscriminantPartAssignment_2.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cTypeDefinitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeDefinitionTypeDefinitionParserRuleCall_4_0 = (RuleCall)cTypeDefinitionAssignment_4.eContents().get(0);
		
		//FullDataTypeDeclaration:
		//	TYPE_ name=IDENTIFIER knownDiscriminantPart=KnownDiscriminantPart? IS_ typeDefinition=TypeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//TYPE_ name=IDENTIFIER knownDiscriminantPart=KnownDiscriminantPart? IS_ typeDefinition=TypeDefinition
		public Group getGroup() { return cGroup; }

		//TYPE_
		public RuleCall getTYPE_TerminalRuleCall_0() { return cTYPE_TerminalRuleCall_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0; }

		//knownDiscriminantPart=KnownDiscriminantPart?
		public Assignment getKnownDiscriminantPartAssignment_2() { return cKnownDiscriminantPartAssignment_2; }

		//KnownDiscriminantPart
		public RuleCall getKnownDiscriminantPartKnownDiscriminantPartParserRuleCall_2_0() { return cKnownDiscriminantPartKnownDiscriminantPartParserRuleCall_2_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_3() { return cIS_TerminalRuleCall_3; }

		//typeDefinition=TypeDefinition
		public Assignment getTypeDefinitionAssignment_4() { return cTypeDefinitionAssignment_4; }

		//TypeDefinition
		public RuleCall getTypeDefinitionTypeDefinitionParserRuleCall_4_0() { return cTypeDefinitionTypeDefinitionParserRuleCall_4_0; }
	}

	public class IncompleteTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.IncompleteTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTYPE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDiscriminantPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDiscriminantPartDiscriminantPartParserRuleCall_2_0 = (RuleCall)cDiscriminantPartAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTaggedAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTaggedIS_TerminalRuleCall_3_0_0 = (RuleCall)cTaggedAssignment_3_0.eContents().get(0);
		private final RuleCall cTAGGED_TerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//IncompleteTypeDeclaration:
		//	TYPE_ name=IDENTIFIER discriminantPart=DiscriminantPart? (tagged?=IS_ TAGGED_)?;
		@Override public ParserRule getRule() { return rule; }

		//TYPE_ name=IDENTIFIER discriminantPart=DiscriminantPart? (tagged?=IS_ TAGGED_)?
		public Group getGroup() { return cGroup; }

		//TYPE_
		public RuleCall getTYPE_TerminalRuleCall_0() { return cTYPE_TerminalRuleCall_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0; }

		//discriminantPart=DiscriminantPart?
		public Assignment getDiscriminantPartAssignment_2() { return cDiscriminantPartAssignment_2; }

		//DiscriminantPart
		public RuleCall getDiscriminantPartDiscriminantPartParserRuleCall_2_0() { return cDiscriminantPartDiscriminantPartParserRuleCall_2_0; }

		//(tagged?=IS_ TAGGED_)?
		public Group getGroup_3() { return cGroup_3; }

		//tagged?=IS_
		public Assignment getTaggedAssignment_3_0() { return cTaggedAssignment_3_0; }

		//IS_
		public RuleCall getTaggedIS_TerminalRuleCall_3_0_0() { return cTaggedIS_TerminalRuleCall_3_0_0; }

		//TAGGED_
		public RuleCall getTAGGED_TerminalRuleCall_3_1() { return cTAGGED_TerminalRuleCall_3_1; }
	}

	public class PrivateTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PrivateTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTYPE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDiscriminantPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDiscriminantPartDiscriminantPartParserRuleCall_2_0 = (RuleCall)cDiscriminantPartAssignment_2.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cAbstractAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cAbstractABSTRACT_TerminalRuleCall_4_0_0 = (RuleCall)cAbstractAssignment_4_0.eContents().get(0);
		private final Assignment cTaggedAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTaggedTAGGED_TerminalRuleCall_4_1_0 = (RuleCall)cTaggedAssignment_4_1.eContents().get(0);
		private final Assignment cLimitedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLimitedLIMITED_TerminalRuleCall_5_0 = (RuleCall)cLimitedAssignment_5.eContents().get(0);
		private final RuleCall cPRIVATE_TerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//PrivateTypeDeclaration:
		//	TYPE_ name=IDENTIFIER discriminantPart=DiscriminantPart? IS_ (abstract?=ABSTRACT_? tagged?=TAGGED_)?
		//	limited?=LIMITED_? PRIVATE_;
		@Override public ParserRule getRule() { return rule; }

		//TYPE_ name=IDENTIFIER discriminantPart=DiscriminantPart? IS_ (abstract?=ABSTRACT_? tagged?=TAGGED_)? limited?=LIMITED_?
		//PRIVATE_
		public Group getGroup() { return cGroup; }

		//TYPE_
		public RuleCall getTYPE_TerminalRuleCall_0() { return cTYPE_TerminalRuleCall_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0; }

		//discriminantPart=DiscriminantPart?
		public Assignment getDiscriminantPartAssignment_2() { return cDiscriminantPartAssignment_2; }

		//DiscriminantPart
		public RuleCall getDiscriminantPartDiscriminantPartParserRuleCall_2_0() { return cDiscriminantPartDiscriminantPartParserRuleCall_2_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_3() { return cIS_TerminalRuleCall_3; }

		//(abstract?=ABSTRACT_? tagged?=TAGGED_)?
		public Group getGroup_4() { return cGroup_4; }

		//abstract?=ABSTRACT_?
		public Assignment getAbstractAssignment_4_0() { return cAbstractAssignment_4_0; }

		//ABSTRACT_
		public RuleCall getAbstractABSTRACT_TerminalRuleCall_4_0_0() { return cAbstractABSTRACT_TerminalRuleCall_4_0_0; }

		//tagged?=TAGGED_
		public Assignment getTaggedAssignment_4_1() { return cTaggedAssignment_4_1; }

		//TAGGED_
		public RuleCall getTaggedTAGGED_TerminalRuleCall_4_1_0() { return cTaggedTAGGED_TerminalRuleCall_4_1_0; }

		//limited?=LIMITED_?
		public Assignment getLimitedAssignment_5() { return cLimitedAssignment_5; }

		//LIMITED_
		public RuleCall getLimitedLIMITED_TerminalRuleCall_5_0() { return cLimitedLIMITED_TerminalRuleCall_5_0; }

		//PRIVATE_
		public RuleCall getPRIVATE_TerminalRuleCall_6() { return cPRIVATE_TerminalRuleCall_6; }
	}

	public class PrivateExtensionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PrivateExtensionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTYPE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDiscriminantPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDiscriminantPartDiscriminantPartParserRuleCall_2_0 = (RuleCall)cDiscriminantPartAssignment_2.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cAbstractAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAbstractABSTRACT_TerminalRuleCall_4_0 = (RuleCall)cAbstractAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cLimitedAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cLimitedLIMITED_TerminalRuleCall_5_0_0 = (RuleCall)cLimitedAssignment_5_0.eContents().get(0);
		private final Assignment cSynchronizedAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cSynchronizedSYNCHRONIZED_TerminalRuleCall_5_1_0 = (RuleCall)cSynchronizedAssignment_5_1.eContents().get(0);
		private final RuleCall cNEW_TerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cAncestorSubtypeIndicationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAncestorSubtypeIndicationSubtypeIndicationParserRuleCall_7_0 = (RuleCall)cAncestorSubtypeIndicationAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final RuleCall cAND_TerminalRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final Assignment cInterfaceListAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cInterfaceListInterfaceListParserRuleCall_8_1_0 = (RuleCall)cInterfaceListAssignment_8_1.eContents().get(0);
		private final RuleCall cWITH_TerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cPRIVATE_TerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//PrivateExtensionDeclaration:
		//	TYPE_ name=IDENTIFIER discriminantPart=DiscriminantPart? IS_
		//	abstract?=ABSTRACT_? (limited?=LIMITED_ | synchronized?=SYNCHRONIZED_)?
		//	NEW_ ancestorSubtypeIndication=SubtypeIndication (AND_ interfaceList=InterfaceList)? WITH_ PRIVATE_;
		@Override public ParserRule getRule() { return rule; }

		//TYPE_ name=IDENTIFIER discriminantPart=DiscriminantPart? IS_ abstract?=ABSTRACT_? (limited?=LIMITED_ |
		//synchronized?=SYNCHRONIZED_)? NEW_ ancestorSubtypeIndication=SubtypeIndication (AND_ interfaceList=InterfaceList)?
		//WITH_ PRIVATE_
		public Group getGroup() { return cGroup; }

		//TYPE_
		public RuleCall getTYPE_TerminalRuleCall_0() { return cTYPE_TerminalRuleCall_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0; }

		//discriminantPart=DiscriminantPart?
		public Assignment getDiscriminantPartAssignment_2() { return cDiscriminantPartAssignment_2; }

		//DiscriminantPart
		public RuleCall getDiscriminantPartDiscriminantPartParserRuleCall_2_0() { return cDiscriminantPartDiscriminantPartParserRuleCall_2_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_3() { return cIS_TerminalRuleCall_3; }

		//abstract?=ABSTRACT_?
		public Assignment getAbstractAssignment_4() { return cAbstractAssignment_4; }

		//ABSTRACT_
		public RuleCall getAbstractABSTRACT_TerminalRuleCall_4_0() { return cAbstractABSTRACT_TerminalRuleCall_4_0; }

		//(limited?=LIMITED_ | synchronized?=SYNCHRONIZED_)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//limited?=LIMITED_
		public Assignment getLimitedAssignment_5_0() { return cLimitedAssignment_5_0; }

		//LIMITED_
		public RuleCall getLimitedLIMITED_TerminalRuleCall_5_0_0() { return cLimitedLIMITED_TerminalRuleCall_5_0_0; }

		//synchronized?=SYNCHRONIZED_
		public Assignment getSynchronizedAssignment_5_1() { return cSynchronizedAssignment_5_1; }

		//SYNCHRONIZED_
		public RuleCall getSynchronizedSYNCHRONIZED_TerminalRuleCall_5_1_0() { return cSynchronizedSYNCHRONIZED_TerminalRuleCall_5_1_0; }

		//NEW_
		public RuleCall getNEW_TerminalRuleCall_6() { return cNEW_TerminalRuleCall_6; }

		//ancestorSubtypeIndication=SubtypeIndication
		public Assignment getAncestorSubtypeIndicationAssignment_7() { return cAncestorSubtypeIndicationAssignment_7; }

		//SubtypeIndication
		public RuleCall getAncestorSubtypeIndicationSubtypeIndicationParserRuleCall_7_0() { return cAncestorSubtypeIndicationSubtypeIndicationParserRuleCall_7_0; }

		//(AND_ interfaceList=InterfaceList)?
		public Group getGroup_8() { return cGroup_8; }

		//AND_
		public RuleCall getAND_TerminalRuleCall_8_0() { return cAND_TerminalRuleCall_8_0; }

		//interfaceList=InterfaceList
		public Assignment getInterfaceListAssignment_8_1() { return cInterfaceListAssignment_8_1; }

		//InterfaceList
		public RuleCall getInterfaceListInterfaceListParserRuleCall_8_1_0() { return cInterfaceListInterfaceListParserRuleCall_8_1_0; }

		//WITH_
		public RuleCall getWITH_TerminalRuleCall_9() { return cWITH_TerminalRuleCall_9; }

		//PRIVATE_
		public RuleCall getPRIVATE_TerminalRuleCall_10() { return cPRIVATE_TerminalRuleCall_10; }
	}

	public class TaskItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.TaskItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntryDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAspectClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TaskItem:
		//	EntryDeclaration
		//	| AspectClause;
		@Override public ParserRule getRule() { return rule; }

		//EntryDeclaration | AspectClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntryDeclaration
		public RuleCall getEntryDeclarationParserRuleCall_0() { return cEntryDeclarationParserRuleCall_0; }

		//AspectClause
		public RuleCall getAspectClauseParserRuleCall_1() { return cAspectClauseParserRuleCall_1; }
	}

	public class EntryDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.EntryDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOverridingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOverridingOverridingIndicatorParserRuleCall_0_0 = (RuleCall)cOverridingAssignment_0.eContents().get(0);
		private final RuleCall cENTRY_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cPGTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cDiscreteSubtypeDefinitionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDiscreteSubtypeDefinitionDiscreteSubtypeDefinitionParserRuleCall_3_1_0 = (RuleCall)cDiscreteSubtypeDefinitionAssignment_3_1.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Assignment cFormalPartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFormalPartFormalPartParserRuleCall_4_0 = (RuleCall)cFormalPartAssignment_4.eContents().get(0);
		
		//EntryDeclaration:
		//	overriding=OverridingIndicator? ENTRY_ name=IDENTIFIER (PG discreteSubtypeDefinition=DiscreteSubtypeDefinition PD)?
		//	formalPart=FormalPart?;
		@Override public ParserRule getRule() { return rule; }

		//overriding=OverridingIndicator? ENTRY_ name=IDENTIFIER (PG discreteSubtypeDefinition=DiscreteSubtypeDefinition PD)?
		//formalPart=FormalPart?
		public Group getGroup() { return cGroup; }

		//overriding=OverridingIndicator?
		public Assignment getOverridingAssignment_0() { return cOverridingAssignment_0; }

		//OverridingIndicator
		public RuleCall getOverridingOverridingIndicatorParserRuleCall_0_0() { return cOverridingOverridingIndicatorParserRuleCall_0_0; }

		//ENTRY_
		public RuleCall getENTRY_TerminalRuleCall_1() { return cENTRY_TerminalRuleCall_1; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_2_0() { return cNameIDENTIFIERTerminalRuleCall_2_0; }

		//(PG discreteSubtypeDefinition=DiscreteSubtypeDefinition PD)?
		public Group getGroup_3() { return cGroup_3; }

		//PG
		public RuleCall getPGTerminalRuleCall_3_0() { return cPGTerminalRuleCall_3_0; }

		//discreteSubtypeDefinition=DiscreteSubtypeDefinition
		public Assignment getDiscreteSubtypeDefinitionAssignment_3_1() { return cDiscreteSubtypeDefinitionAssignment_3_1; }

		//DiscreteSubtypeDefinition
		public RuleCall getDiscreteSubtypeDefinitionDiscreteSubtypeDefinitionParserRuleCall_3_1_0() { return cDiscreteSubtypeDefinitionDiscreteSubtypeDefinitionParserRuleCall_3_1_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_3_2() { return cPDTerminalRuleCall_3_2; }

		//formalPart=FormalPart?
		public Assignment getFormalPartAssignment_4() { return cFormalPartAssignment_4; }

		//FormalPart
		public RuleCall getFormalPartFormalPartParserRuleCall_4_0() { return cFormalPartFormalPartParserRuleCall_4_0; }
	}

	public class OverridingIndicatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.OverridingIndicator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOverridingIndicatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNotNOT_TerminalRuleCall_1_0 = (RuleCall)cNotAssignment_1.eContents().get(0);
		private final RuleCall cOVERRIDING_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//OverridingIndicator:
		//	{OverridingIndicator} not?=NOT_? OVERRIDING_;
		@Override public ParserRule getRule() { return rule; }

		//{OverridingIndicator} not?=NOT_? OVERRIDING_
		public Group getGroup() { return cGroup; }

		//{OverridingIndicator}
		public Action getOverridingIndicatorAction_0() { return cOverridingIndicatorAction_0; }

		//not?=NOT_?
		public Assignment getNotAssignment_1() { return cNotAssignment_1; }

		//NOT_
		public RuleCall getNotNOT_TerminalRuleCall_1_0() { return cNotNOT_TerminalRuleCall_1_0; }

		//OVERRIDING_
		public RuleCall getOVERRIDING_TerminalRuleCall_2() { return cOVERRIDING_TerminalRuleCall_2; }
	}

	public class ProtectedTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ProtectedTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPROTECTED_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTYPE_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cKnownDiscriminantPartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKnownDiscriminantPartKnownDiscriminantPartParserRuleCall_3_0 = (RuleCall)cKnownDiscriminantPartAssignment_3.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cNEW_TerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cInterfaceListAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInterfaceListInterfaceListParserRuleCall_5_1_0 = (RuleCall)cInterfaceListAssignment_5_1.eContents().get(0);
		private final RuleCall cWITH_TerminalRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final Assignment cProtectedDefinitionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cProtectedDefinitionProtectedDefinitionParserRuleCall_6_0 = (RuleCall)cProtectedDefinitionAssignment_6.eContents().get(0);
		
		//ProtectedTypeDeclaration:
		//	PROTECTED_ TYPE_ name=IDENTIFIER knownDiscriminantPart=KnownDiscriminantPart? IS_ (NEW_ interfaceList=InterfaceList
		//	WITH_)? protectedDefinition=ProtectedDefinition;
		@Override public ParserRule getRule() { return rule; }

		//PROTECTED_ TYPE_ name=IDENTIFIER knownDiscriminantPart=KnownDiscriminantPart? IS_ (NEW_ interfaceList=InterfaceList
		//WITH_)? protectedDefinition=ProtectedDefinition
		public Group getGroup() { return cGroup; }

		//PROTECTED_
		public RuleCall getPROTECTED_TerminalRuleCall_0() { return cPROTECTED_TerminalRuleCall_0; }

		//TYPE_
		public RuleCall getTYPE_TerminalRuleCall_1() { return cTYPE_TerminalRuleCall_1; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_2_0() { return cNameIDENTIFIERTerminalRuleCall_2_0; }

		//knownDiscriminantPart=KnownDiscriminantPart?
		public Assignment getKnownDiscriminantPartAssignment_3() { return cKnownDiscriminantPartAssignment_3; }

		//KnownDiscriminantPart
		public RuleCall getKnownDiscriminantPartKnownDiscriminantPartParserRuleCall_3_0() { return cKnownDiscriminantPartKnownDiscriminantPartParserRuleCall_3_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_4() { return cIS_TerminalRuleCall_4; }

		//(NEW_ interfaceList=InterfaceList WITH_)?
		public Group getGroup_5() { return cGroup_5; }

		//NEW_
		public RuleCall getNEW_TerminalRuleCall_5_0() { return cNEW_TerminalRuleCall_5_0; }

		//interfaceList=InterfaceList
		public Assignment getInterfaceListAssignment_5_1() { return cInterfaceListAssignment_5_1; }

		//InterfaceList
		public RuleCall getInterfaceListInterfaceListParserRuleCall_5_1_0() { return cInterfaceListInterfaceListParserRuleCall_5_1_0; }

		//WITH_
		public RuleCall getWITH_TerminalRuleCall_5_2() { return cWITH_TerminalRuleCall_5_2; }

		//protectedDefinition=ProtectedDefinition
		public Assignment getProtectedDefinitionAssignment_6() { return cProtectedDefinitionAssignment_6; }

		//ProtectedDefinition
		public RuleCall getProtectedDefinitionProtectedDefinitionParserRuleCall_6_0() { return cProtectedDefinitionProtectedDefinitionParserRuleCall_6_0; }
	}

	public class ProtectedDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ProtectedDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtectedDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cProtectedOperationDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProtectedOperationDeclarationProtectedOperationDeclarationParserRuleCall_1_0 = (RuleCall)cProtectedOperationDeclarationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cPRIVATE_TerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cProtectedOperationDeclarationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cProtectedOperationDeclarationProtectedElementDeclarationParserRuleCall_2_1_0 = (RuleCall)cProtectedOperationDeclarationAssignment_2_1.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cIDENTIFIERTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ProtectedDefinition:
		//	{ProtectedDefinition} protectedOperationDeclaration+=ProtectedOperationDeclaration* (PRIVATE_
		//	protectedOperationDeclaration+=ProtectedElementDeclaration*)?
		//	END_ IDENTIFIER?;
		@Override public ParserRule getRule() { return rule; }

		//{ProtectedDefinition} protectedOperationDeclaration+=ProtectedOperationDeclaration* (PRIVATE_
		//protectedOperationDeclaration+=ProtectedElementDeclaration*)? END_ IDENTIFIER?
		public Group getGroup() { return cGroup; }

		//{ProtectedDefinition}
		public Action getProtectedDefinitionAction_0() { return cProtectedDefinitionAction_0; }

		//protectedOperationDeclaration+=ProtectedOperationDeclaration*
		public Assignment getProtectedOperationDeclarationAssignment_1() { return cProtectedOperationDeclarationAssignment_1; }

		//ProtectedOperationDeclaration
		public RuleCall getProtectedOperationDeclarationProtectedOperationDeclarationParserRuleCall_1_0() { return cProtectedOperationDeclarationProtectedOperationDeclarationParserRuleCall_1_0; }

		//(PRIVATE_ protectedOperationDeclaration+=ProtectedElementDeclaration*)?
		public Group getGroup_2() { return cGroup_2; }

		//PRIVATE_
		public RuleCall getPRIVATE_TerminalRuleCall_2_0() { return cPRIVATE_TerminalRuleCall_2_0; }

		//protectedOperationDeclaration+=ProtectedElementDeclaration*
		public Assignment getProtectedOperationDeclarationAssignment_2_1() { return cProtectedOperationDeclarationAssignment_2_1; }

		//ProtectedElementDeclaration
		public RuleCall getProtectedOperationDeclarationProtectedElementDeclarationParserRuleCall_2_1_0() { return cProtectedOperationDeclarationProtectedElementDeclarationParserRuleCall_2_1_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_3() { return cEND_TerminalRuleCall_3; }

		//IDENTIFIER?
		public RuleCall getIDENTIFIERTerminalRuleCall_4() { return cIDENTIFIERTerminalRuleCall_4; }
	}

	public class ProtectedElementDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ProtectedElementDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProtectedOperationDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ProtectedElementDeclaration:
		//	ProtectedOperationDeclaration
		//	| ComponentDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//ProtectedOperationDeclaration | ComponentDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ProtectedOperationDeclaration
		public RuleCall getProtectedOperationDeclarationParserRuleCall_0() { return cProtectedOperationDeclarationParserRuleCall_0; }

		//ComponentDeclaration
		public RuleCall getComponentDeclarationParserRuleCall_1() { return cComponentDeclarationParserRuleCall_1; }
	}

	public class ProtectedOperationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ProtectedOperationDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubprogramDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntryDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAspectClauseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ProtectedOperationDeclaration:
		//	SubprogramDeclaration
		//	| EntryDeclaration
		//	| AspectClause;
		@Override public ParserRule getRule() { return rule; }

		//SubprogramDeclaration | EntryDeclaration | AspectClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubprogramDeclaration
		public RuleCall getSubprogramDeclarationParserRuleCall_0() { return cSubprogramDeclarationParserRuleCall_0; }

		//EntryDeclaration
		public RuleCall getEntryDeclarationParserRuleCall_1() { return cEntryDeclarationParserRuleCall_1; }

		//AspectClause
		public RuleCall getAspectClauseParserRuleCall_2() { return cAspectClauseParserRuleCall_2; }
	}

	public class SubprogramDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SubprogramDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubprogramSpecificationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubprogramSpecificationSubprogramSpecificationParserRuleCall_0_0 = (RuleCall)cSubprogramSpecificationAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cAbstractABSTRACT_TerminalRuleCall_1_0_1_0 = (RuleCall)cAbstractAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cRENAMES_TerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cRenamedNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRenamedNamePATHNAMEParserRuleCall_1_1_1_0 = (RuleCall)cRenamedNameAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final RuleCall cIS_TerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cNullAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cNullNULL_TerminalRuleCall_1_2_1_0 = (RuleCall)cNullAssignment_1_2_1.eContents().get(0);
		
		//SubprogramDeclaration:
		//	subprogramSpecification=SubprogramSpecification (IS_ abstract?=ABSTRACT_
		//	| RENAMES_ renamedName=PATHNAME
		//	//| (IS_ body=Subprogram_body)                 // TODO: Check if it is part of the syntax. I think no because it is redundant with an other rule and abusively included in Library_unit_declaration derivations.  
		//	| IS_ null?=NULL_)? // TODO: Check that "is null" is applied on a procedure only. 
		//;
		@Override public ParserRule getRule() { return rule; }

		//subprogramSpecification=SubprogramSpecification (IS_ abstract?=ABSTRACT_ | RENAMES_ renamedName=PATHNAME //| (IS_ body=Subprogram_body)                 // TODO: Check if it is part of the syntax. I think no because it is redundant with an other rule and abusively included in Library_unit_declaration derivations.  
		//| IS_ null?=NULL_)?
		public Group getGroup() { return cGroup; }

		//subprogramSpecification=SubprogramSpecification
		public Assignment getSubprogramSpecificationAssignment_0() { return cSubprogramSpecificationAssignment_0; }

		//SubprogramSpecification
		public RuleCall getSubprogramSpecificationSubprogramSpecificationParserRuleCall_0_0() { return cSubprogramSpecificationSubprogramSpecificationParserRuleCall_0_0; }

		//(IS_ abstract?=ABSTRACT_ | RENAMES_ renamedName=PATHNAME //| (IS_ body=Subprogram_body)                 // TODO: Check if it is part of the syntax. I think no because it is redundant with an other rule and abusively included in Library_unit_declaration derivations.  
		//| IS_ null?=NULL_)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//IS_ abstract?=ABSTRACT_
		public Group getGroup_1_0() { return cGroup_1_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_1_0_0() { return cIS_TerminalRuleCall_1_0_0; }

		//abstract?=ABSTRACT_
		public Assignment getAbstractAssignment_1_0_1() { return cAbstractAssignment_1_0_1; }

		//ABSTRACT_
		public RuleCall getAbstractABSTRACT_TerminalRuleCall_1_0_1_0() { return cAbstractABSTRACT_TerminalRuleCall_1_0_1_0; }

		//RENAMES_ renamedName=PATHNAME
		public Group getGroup_1_1() { return cGroup_1_1; }

		//RENAMES_
		public RuleCall getRENAMES_TerminalRuleCall_1_1_0() { return cRENAMES_TerminalRuleCall_1_1_0; }

		//renamedName=PATHNAME
		public Assignment getRenamedNameAssignment_1_1_1() { return cRenamedNameAssignment_1_1_1; }

		//PATHNAME
		public RuleCall getRenamedNamePATHNAMEParserRuleCall_1_1_1_0() { return cRenamedNamePATHNAMEParserRuleCall_1_1_1_0; }

		//IS_ null?=NULL_
		public Group getGroup_1_2() { return cGroup_1_2; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_1_2_0() { return cIS_TerminalRuleCall_1_2_0; }

		//null?=NULL_
		public Assignment getNullAssignment_1_2_1() { return cNullAssignment_1_2_1; }

		//NULL_
		public RuleCall getNullNULL_TerminalRuleCall_1_2_1_0() { return cNullNULL_TerminalRuleCall_1_2_1_0; }
	}

	public class SubprogramSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SubprogramSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcedureSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SubprogramSpecification:
		//	ProcedureSpecification
		//	| FunctionSpecification;
		@Override public ParserRule getRule() { return rule; }

		//ProcedureSpecification | FunctionSpecification
		public Alternatives getAlternatives() { return cAlternatives; }

		//ProcedureSpecification
		public RuleCall getProcedureSpecificationParserRuleCall_0() { return cProcedureSpecificationParserRuleCall_0; }

		//FunctionSpecification
		public RuleCall getFunctionSpecificationParserRuleCall_1() { return cFunctionSpecificationParserRuleCall_1; }
	}

	public class ProcedureSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ProcedureSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOverridingIndicatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOverridingIndicatorOverridingIndicatorParserRuleCall_0_0 = (RuleCall)cOverridingIndicatorAssignment_0.eContents().get(0);
		private final RuleCall cPROCEDURE_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cFormalPartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormalPartFormalPartParserRuleCall_3_0 = (RuleCall)cFormalPartAssignment_3.eContents().get(0);
		
		//ProcedureSpecification:
		//	overridingIndicator=OverridingIndicator? PROCEDURE_ name=IDENTIFIER formalPart=FormalPart?;
		@Override public ParserRule getRule() { return rule; }

		//overridingIndicator=OverridingIndicator? PROCEDURE_ name=IDENTIFIER formalPart=FormalPart?
		public Group getGroup() { return cGroup; }

		//overridingIndicator=OverridingIndicator?
		public Assignment getOverridingIndicatorAssignment_0() { return cOverridingIndicatorAssignment_0; }

		//OverridingIndicator
		public RuleCall getOverridingIndicatorOverridingIndicatorParserRuleCall_0_0() { return cOverridingIndicatorOverridingIndicatorParserRuleCall_0_0; }

		//PROCEDURE_
		public RuleCall getPROCEDURE_TerminalRuleCall_1() { return cPROCEDURE_TerminalRuleCall_1; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_2_0() { return cNameIDENTIFIERTerminalRuleCall_2_0; }

		//formalPart=FormalPart?
		public Assignment getFormalPartAssignment_3() { return cFormalPartAssignment_3; }

		//FormalPart
		public RuleCall getFormalPartFormalPartParserRuleCall_3_0() { return cFormalPartFormalPartParserRuleCall_3_0; }
	}

	public class FunctionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FunctionSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOverridingIndicatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOverridingIndicatorOverridingIndicatorParserRuleCall_0_0 = (RuleCall)cOverridingIndicatorAssignment_0.eContents().get(0);
		private final RuleCall cFUNCTION_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameDIRECT_NAMEParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cParameterAndResultProfileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterAndResultProfileParameterAndResultProfileParserRuleCall_3_0 = (RuleCall)cParameterAndResultProfileAssignment_3.eContents().get(0);
		
		//FunctionSpecification:
		//	overridingIndicator=OverridingIndicator? FUNCTION_ name=DIRECT_NAME
		//	parameterAndResultProfile=ParameterAndResultProfile;
		@Override public ParserRule getRule() { return rule; }

		//overridingIndicator=OverridingIndicator? FUNCTION_ name=DIRECT_NAME parameterAndResultProfile=ParameterAndResultProfile
		public Group getGroup() { return cGroup; }

		//overridingIndicator=OverridingIndicator?
		public Assignment getOverridingIndicatorAssignment_0() { return cOverridingIndicatorAssignment_0; }

		//OverridingIndicator
		public RuleCall getOverridingIndicatorOverridingIndicatorParserRuleCall_0_0() { return cOverridingIndicatorOverridingIndicatorParserRuleCall_0_0; }

		//FUNCTION_
		public RuleCall getFUNCTION_TerminalRuleCall_1() { return cFUNCTION_TerminalRuleCall_1; }

		//name=DIRECT_NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//DIRECT_NAME
		public RuleCall getNameDIRECT_NAMEParserRuleCall_2_0() { return cNameDIRECT_NAMEParserRuleCall_2_0; }

		//parameterAndResultProfile=ParameterAndResultProfile
		public Assignment getParameterAndResultProfileAssignment_3() { return cParameterAndResultProfileAssignment_3; }

		//ParameterAndResultProfile
		public RuleCall getParameterAndResultProfileParameterAndResultProfileParserRuleCall_3_0() { return cParameterAndResultProfileParameterAndResultProfileParserRuleCall_3_0; }
	}

	public class HandledSequenceOfStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.HandledSequenceOfStatements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSequenceOfStatementsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cEXCEPTION_TerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExceptionHandlerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExceptionHandlerExceptionHandlerParserRuleCall_1_1_0 = (RuleCall)cExceptionHandlerAssignment_1_1.eContents().get(0);
		
		//HandledSequenceOfStatements:
		//	SequenceOfStatements (EXCEPTION_ exceptionHandler+=ExceptionHandler+)?;
		@Override public ParserRule getRule() { return rule; }

		//SequenceOfStatements (EXCEPTION_ exceptionHandler+=ExceptionHandler+)?
		public Group getGroup() { return cGroup; }

		//SequenceOfStatements
		public RuleCall getSequenceOfStatementsParserRuleCall_0() { return cSequenceOfStatementsParserRuleCall_0; }

		//(EXCEPTION_ exceptionHandler+=ExceptionHandler+)?
		public Group getGroup_1() { return cGroup_1; }

		//EXCEPTION_
		public RuleCall getEXCEPTION_TerminalRuleCall_1_0() { return cEXCEPTION_TerminalRuleCall_1_0; }

		//exceptionHandler+=ExceptionHandler+
		public Assignment getExceptionHandlerAssignment_1_1() { return cExceptionHandlerAssignment_1_1; }

		//ExceptionHandler
		public RuleCall getExceptionHandlerExceptionHandlerParserRuleCall_1_1_0() { return cExceptionHandlerExceptionHandlerParserRuleCall_1_1_0; }
	}

	public class ExceptionChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ExceptionChoice");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cOthersAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOthersOTHERS_TerminalRuleCall_1_0 = (RuleCall)cOthersAssignment_1.eContents().get(0);
		
		//ExceptionChoice:
		//	name=Name
		//	| others?=OTHERS_;
		@Override public ParserRule getRule() { return rule; }

		//name=Name | others?=OTHERS_
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//others?=OTHERS_
		public Assignment getOthersAssignment_1() { return cOthersAssignment_1; }

		//OTHERS_
		public RuleCall getOthersOTHERS_TerminalRuleCall_1_0() { return cOthersOTHERS_TerminalRuleCall_1_0; }
	}

	public class ExceptionHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ExceptionHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHEN_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final RuleCall cDPTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cExceptionChoiceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExceptionChoiceExceptionChoiceParserRuleCall_2_0 = (RuleCall)cExceptionChoiceAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cBVTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cExceptionChoiceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExceptionChoiceExceptionChoiceParserRuleCall_3_1_0 = (RuleCall)cExceptionChoiceAssignment_3_1.eContents().get(0);
		private final RuleCall cFLECHETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cSequenceOfStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSequenceOfStatementsSequenceOfStatementsParserRuleCall_5_0 = (RuleCall)cSequenceOfStatementsAssignment_5.eContents().get(0);
		
		//ExceptionHandler:
		//	WHEN_ (name=IDENTIFIER DP)? exceptionChoice+=ExceptionChoice (BV exceptionChoice+=ExceptionChoice)* FLECHE
		//	sequenceOfStatements=SequenceOfStatements;
		@Override public ParserRule getRule() { return rule; }

		//WHEN_ (name=IDENTIFIER DP)? exceptionChoice+=ExceptionChoice (BV exceptionChoice+=ExceptionChoice)* FLECHE
		//sequenceOfStatements=SequenceOfStatements
		public Group getGroup() { return cGroup; }

		//WHEN_
		public RuleCall getWHEN_TerminalRuleCall_0() { return cWHEN_TerminalRuleCall_0; }

		//(name=IDENTIFIER DP)?
		public Group getGroup_1() { return cGroup_1; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0_0() { return cNameIDENTIFIERTerminalRuleCall_1_0_0; }

		//DP
		public RuleCall getDPTerminalRuleCall_1_1() { return cDPTerminalRuleCall_1_1; }

		//exceptionChoice+=ExceptionChoice
		public Assignment getExceptionChoiceAssignment_2() { return cExceptionChoiceAssignment_2; }

		//ExceptionChoice
		public RuleCall getExceptionChoiceExceptionChoiceParserRuleCall_2_0() { return cExceptionChoiceExceptionChoiceParserRuleCall_2_0; }

		//(BV exceptionChoice+=ExceptionChoice)*
		public Group getGroup_3() { return cGroup_3; }

		//BV
		public RuleCall getBVTerminalRuleCall_3_0() { return cBVTerminalRuleCall_3_0; }

		//exceptionChoice+=ExceptionChoice
		public Assignment getExceptionChoiceAssignment_3_1() { return cExceptionChoiceAssignment_3_1; }

		//ExceptionChoice
		public RuleCall getExceptionChoiceExceptionChoiceParserRuleCall_3_1_0() { return cExceptionChoiceExceptionChoiceParserRuleCall_3_1_0; }

		//FLECHE
		public RuleCall getFLECHETerminalRuleCall_4() { return cFLECHETerminalRuleCall_4; }

		//sequenceOfStatements=SequenceOfStatements
		public Assignment getSequenceOfStatementsAssignment_5() { return cSequenceOfStatementsAssignment_5; }

		//SequenceOfStatements
		public RuleCall getSequenceOfStatementsSequenceOfStatementsParserRuleCall_5_0() { return cSequenceOfStatementsSequenceOfStatementsParserRuleCall_5_0; }
	}

	public class DeclarativeItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DeclarativeItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBasicDeclarativeItemParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DeclarativeItem:
		//	=> Body
		//	| => BasicDeclarativeItem;
		@Override public ParserRule getRule() { return rule; }

		//=> Body | => BasicDeclarativeItem
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> Body
		public RuleCall getBodyParserRuleCall_0() { return cBodyParserRuleCall_0; }

		//=> BasicDeclarativeItem
		public RuleCall getBasicDeclarativeItemParserRuleCall_1() { return cBasicDeclarativeItemParserRuleCall_1; }
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Body");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProperBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBodyStubParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Body:
		//	=> ProperBody
		//	| BodyStub;
		@Override public ParserRule getRule() { return rule; }

		//=> ProperBody | BodyStub
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> ProperBody
		public RuleCall getProperBodyParserRuleCall_0() { return cProperBodyParserRuleCall_0; }

		//BodyStub
		public RuleCall getBodyStubParserRuleCall_1() { return cBodyStubParserRuleCall_1; }
	}

	public class ProperBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ProperBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubprogramBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPackageBodyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTaskBodyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProtectedBodyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ProperBody:
		//	SubprogramBody
		//	| PackageBody
		//	| TaskBody
		//	| ProtectedBody;
		@Override public ParserRule getRule() { return rule; }

		//SubprogramBody | PackageBody | TaskBody | ProtectedBody
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubprogramBody
		public RuleCall getSubprogramBodyParserRuleCall_0() { return cSubprogramBodyParserRuleCall_0; }

		//PackageBody
		public RuleCall getPackageBodyParserRuleCall_1() { return cPackageBodyParserRuleCall_1; }

		//TaskBody
		public RuleCall getTaskBodyParserRuleCall_2() { return cTaskBodyParserRuleCall_2; }

		//ProtectedBody
		public RuleCall getProtectedBodyParserRuleCall_3() { return cProtectedBodyParserRuleCall_3; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final RuleCall cCHDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Label:
		//	CHG identifier=IDENTIFIER CHD;
		@Override public ParserRule getRule() { return rule; }

		//CHG identifier=IDENTIFIER CHD
		public Group getGroup() { return cGroup; }

		//CHG
		public RuleCall getCHGTerminalRuleCall_0() { return cCHGTerminalRuleCall_0; }

		//identifier=IDENTIFIER
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//IDENTIFIER
		public RuleCall getIdentifierIDENTIFIERTerminalRuleCall_1_0() { return cIdentifierIDENTIFIERTerminalRuleCall_1_0; }

		//CHD
		public RuleCall getCHDTerminalRuleCall_2() { return cCHDTerminalRuleCall_2; }
	}

	public class SequenceOfStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SequenceOfStatements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementsLabelisableStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SequenceOfStatements:
		//	(statements+=LabelisableStatement PV)+;
		@Override public ParserRule getRule() { return rule; }

		//(statements+=LabelisableStatement PV)+
		public Group getGroup() { return cGroup; }

		//statements+=LabelisableStatement
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }

		//LabelisableStatement
		public RuleCall getStatementsLabelisableStatementParserRuleCall_0_0() { return cStatementsLabelisableStatementParserRuleCall_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_1() { return cPVTerminalRuleCall_1; }
	}

	public class LabelisableStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.LabelisableStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelsLabelParserRuleCall_0_0 = (RuleCall)cLabelsAssignment_0.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		//LabelisableStatement:
		//	labels+=Label*
		//	statement=Statement;
		@Override public ParserRule getRule() { return rule; }

		//labels+=Label* statement=Statement
		public Group getGroup() { return cGroup; }

		//labels+=Label*
		public Assignment getLabelsAssignment_0() { return cLabelsAssignment_0; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_0_0() { return cLabelsLabelParserRuleCall_0_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompoundStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPragmaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//	SimpleStatement
		//	| CompoundStatement
		//	| Pragma;
		@Override public ParserRule getRule() { return rule; }

		//SimpleStatement | CompoundStatement | Pragma
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleStatement
		public RuleCall getSimpleStatementParserRuleCall_0() { return cSimpleStatementParserRuleCall_0; }

		//CompoundStatement
		public RuleCall getCompoundStatementParserRuleCall_1() { return cCompoundStatementParserRuleCall_1; }

		//Pragma
		public RuleCall getPragmaParserRuleCall_2() { return cPragmaParserRuleCall_2; }
	}

	public class SimpleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SimpleStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGotoStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSimpleReturnStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRequeueStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNullStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAbortStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExitStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cProcedureOrEntryCallStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDelayStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRaiseStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//SimpleStatement:
		//	GotoStatement
		//	| => AssignmentStatement
		//	| SimpleReturnStatement
		//	| RequeueStatement
		//	| NullStatement
		//	| AbortStatement
		//	//       | Code_statement // TODO: to remove code
		//	| ExitStatement
		//	| => ProcedureOrEntryCallStatement // TODO: Semantic rule : check that it could be a pure qualified expression. Then, it is a code_statement  
		//	| DelayStatement
		//	| RaiseStatement;
		@Override public ParserRule getRule() { return rule; }

		//GotoStatement | => AssignmentStatement | SimpleReturnStatement | RequeueStatement | NullStatement | AbortStatement //       | Code_statement // TODO: to remove code
		//| ExitStatement | => ProcedureOrEntryCallStatement // TODO: Semantic rule : check that it could be a pure qualified expression. Then, it is a code_statement  
		//| DelayStatement | RaiseStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//GotoStatement
		public RuleCall getGotoStatementParserRuleCall_0() { return cGotoStatementParserRuleCall_0; }

		//=> AssignmentStatement
		public RuleCall getAssignmentStatementParserRuleCall_1() { return cAssignmentStatementParserRuleCall_1; }

		//SimpleReturnStatement
		public RuleCall getSimpleReturnStatementParserRuleCall_2() { return cSimpleReturnStatementParserRuleCall_2; }

		//RequeueStatement
		public RuleCall getRequeueStatementParserRuleCall_3() { return cRequeueStatementParserRuleCall_3; }

		//NullStatement
		public RuleCall getNullStatementParserRuleCall_4() { return cNullStatementParserRuleCall_4; }

		//AbortStatement
		public RuleCall getAbortStatementParserRuleCall_5() { return cAbortStatementParserRuleCall_5; }

		//ExitStatement
		public RuleCall getExitStatementParserRuleCall_6() { return cExitStatementParserRuleCall_6; }

		//=> ProcedureOrEntryCallStatement
		public RuleCall getProcedureOrEntryCallStatementParserRuleCall_7() { return cProcedureOrEntryCallStatementParserRuleCall_7; }

		//DelayStatement
		public RuleCall getDelayStatementParserRuleCall_8() { return cDelayStatementParserRuleCall_8; }

		//RaiseStatement
		public RuleCall getRaiseStatementParserRuleCall_9() { return cRaiseStatementParserRuleCall_9; }
	}

	public class CompoundStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.CompoundStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoopStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExtendedReturnStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAcceptStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCaseStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBlockStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSelectStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//CompoundStatement:
		//	IfStatement
		//	| LoopStatement
		//	| ExtendedReturnStatement
		//	| AcceptStatement
		//	| CaseStatement
		//	| BlockStatement
		//	| SelectStatement;
		@Override public ParserRule getRule() { return rule; }

		//IfStatement | LoopStatement | ExtendedReturnStatement | AcceptStatement | CaseStatement | BlockStatement |
		//SelectStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0() { return cIfStatementParserRuleCall_0; }

		//LoopStatement
		public RuleCall getLoopStatementParserRuleCall_1() { return cLoopStatementParserRuleCall_1; }

		//ExtendedReturnStatement
		public RuleCall getExtendedReturnStatementParserRuleCall_2() { return cExtendedReturnStatementParserRuleCall_2; }

		//AcceptStatement
		public RuleCall getAcceptStatementParserRuleCall_3() { return cAcceptStatementParserRuleCall_3; }

		//CaseStatement
		public RuleCall getCaseStatementParserRuleCall_4() { return cCaseStatementParserRuleCall_4; }

		//BlockStatement
		public RuleCall getBlockStatementParserRuleCall_5() { return cBlockStatementParserRuleCall_5; }

		//SelectStatement
		public RuleCall getSelectStatementParserRuleCall_6() { return cSelectStatementParserRuleCall_6; }
	}

	public class NullStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NullStatement");
		private final Assignment cNullAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNullNULL_TerminalRuleCall_0 = (RuleCall)cNullAssignment.eContents().get(0);
		
		//NullStatement:
		//	null?=NULL_;
		@Override public ParserRule getRule() { return rule; }

		//null?=NULL_
		public Assignment getNullAssignment() { return cNullAssignment; }

		//NULL_
		public RuleCall getNullNULL_TerminalRuleCall_0() { return cNullNULL_TerminalRuleCall_0; }
	}

	public class LibrarySpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.LibrarySpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubprogramSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPackageDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LibrarySpecification:
		//	SubprogramSpecification // TODO: Check name is always Qualified_identifier even for functions.
		//	| PackageDefinition;
		@Override public ParserRule getRule() { return rule; }

		//SubprogramSpecification // TODO: Check name is always Qualified_identifier even for functions.
		//| PackageDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubprogramSpecification
		public RuleCall getSubprogramSpecificationParserRuleCall_0() { return cSubprogramSpecificationParserRuleCall_0; }

		//PackageDefinition
		public RuleCall getPackageDefinitionParserRuleCall_1() { return cPackageDefinitionParserRuleCall_1; }
	}

	public class GenericItemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.GenericItems");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGenericItemsAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cGenericItemsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cGenericItemsGenericItemParserRuleCall_1_0_0 = (RuleCall)cGenericItemsAssignment_1_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//GenericItems:
		//	{GenericItems} (genericItems+=GenericItem PV)*;
		@Override public ParserRule getRule() { return rule; }

		//{GenericItems} (genericItems+=GenericItem PV)*
		public Group getGroup() { return cGroup; }

		//{GenericItems}
		public Action getGenericItemsAction_0() { return cGenericItemsAction_0; }

		//(genericItems+=GenericItem PV)*
		public Group getGroup_1() { return cGroup_1; }

		//genericItems+=GenericItem
		public Assignment getGenericItemsAssignment_1_0() { return cGenericItemsAssignment_1_0; }

		//GenericItem
		public RuleCall getGenericItemsGenericItemParserRuleCall_1_0_0() { return cGenericItemsGenericItemParserRuleCall_1_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_1_1() { return cPVTerminalRuleCall_1_1; }
	}

	public class GenericItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.GenericItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGenericFormalParameterDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUseClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GenericItem:
		//	GenericFormalParameterDeclaration | UseClause;
		@Override public ParserRule getRule() { return rule; }

		//GenericFormalParameterDeclaration | UseClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//GenericFormalParameterDeclaration
		public RuleCall getGenericFormalParameterDeclarationParserRuleCall_0() { return cGenericFormalParameterDeclarationParserRuleCall_0; }

		//UseClause
		public RuleCall getUseClauseParserRuleCall_1() { return cUseClauseParserRuleCall_1; }
	}

	public class GenericFormalParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.GenericFormalParameterDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFormalObjectDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFormalTypeDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFormalSubprogramDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFormalPackageDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//GenericFormalParameterDeclaration:
		//	FormalObjectDeclaration
		//	| FormalTypeDeclaration
		//	| FormalSubprogramDeclaration
		//	| FormalPackageDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//FormalObjectDeclaration | FormalTypeDeclaration | FormalSubprogramDeclaration | FormalPackageDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//FormalObjectDeclaration
		public RuleCall getFormalObjectDeclarationParserRuleCall_0() { return cFormalObjectDeclarationParserRuleCall_0; }

		//FormalTypeDeclaration
		public RuleCall getFormalTypeDeclarationParserRuleCall_1() { return cFormalTypeDeclarationParserRuleCall_1; }

		//FormalSubprogramDeclaration
		public RuleCall getFormalSubprogramDeclarationParserRuleCall_2() { return cFormalSubprogramDeclarationParserRuleCall_2; }

		//FormalPackageDeclaration
		public RuleCall getFormalPackageDeclarationParserRuleCall_3() { return cFormalPackageDeclarationParserRuleCall_3; }
	}

	public class FormalObjectDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalObjectDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdListDefiningIdentifierListParserRuleCall_0_0 = (RuleCall)cIdListAssignment_0.eContents().get(0);
		private final RuleCall cDPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cModeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModeModeParserRuleCall_2_0 = (RuleCall)cModeAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cOptNullExclusionAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cOptNullExclusionOptNullExclusionParserRuleCall_3_0_0_0 = (RuleCall)cOptNullExclusionAssignment_3_0_0.eContents().get(0);
		private final Assignment cSubtypeMarkAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cSubtypeMarkNameParserRuleCall_3_0_1_0 = (RuleCall)cSubtypeMarkAssignment_3_0_1.eContents().get(0);
		private final Assignment cAnonymousAccessDefinitionAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cAnonymousAccessDefinitionAnonymousAccessDefinitionParserRuleCall_3_1_0 = (RuleCall)cAnonymousAccessDefinitionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cDPETerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cDefaultExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultExpressionExpressionParserRuleCall_4_1_0 = (RuleCall)cDefaultExpressionAssignment_4_1.eContents().get(0);
		
		//FormalObjectDeclaration:
		//	idList=DefiningIdentifierList DP mode=Mode (optNullExclusion=OptNullExclusion subtypeMark=Name
		//	| anonymousAccessDefinition=AnonymousAccessDefinition) (DPE defaultExpression=Expression)?;
		@Override public ParserRule getRule() { return rule; }

		//idList=DefiningIdentifierList DP mode=Mode (optNullExclusion=OptNullExclusion subtypeMark=Name |
		//anonymousAccessDefinition=AnonymousAccessDefinition) (DPE defaultExpression=Expression)?
		public Group getGroup() { return cGroup; }

		//idList=DefiningIdentifierList
		public Assignment getIdListAssignment_0() { return cIdListAssignment_0; }

		//DefiningIdentifierList
		public RuleCall getIdListDefiningIdentifierListParserRuleCall_0_0() { return cIdListDefiningIdentifierListParserRuleCall_0_0; }

		//DP
		public RuleCall getDPTerminalRuleCall_1() { return cDPTerminalRuleCall_1; }

		//mode=Mode
		public Assignment getModeAssignment_2() { return cModeAssignment_2; }

		//Mode
		public RuleCall getModeModeParserRuleCall_2_0() { return cModeModeParserRuleCall_2_0; }

		//(optNullExclusion=OptNullExclusion subtypeMark=Name | anonymousAccessDefinition=AnonymousAccessDefinition)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//optNullExclusion=OptNullExclusion subtypeMark=Name
		public Group getGroup_3_0() { return cGroup_3_0; }

		//optNullExclusion=OptNullExclusion
		public Assignment getOptNullExclusionAssignment_3_0_0() { return cOptNullExclusionAssignment_3_0_0; }

		//OptNullExclusion
		public RuleCall getOptNullExclusionOptNullExclusionParserRuleCall_3_0_0_0() { return cOptNullExclusionOptNullExclusionParserRuleCall_3_0_0_0; }

		//subtypeMark=Name
		public Assignment getSubtypeMarkAssignment_3_0_1() { return cSubtypeMarkAssignment_3_0_1; }

		//Name
		public RuleCall getSubtypeMarkNameParserRuleCall_3_0_1_0() { return cSubtypeMarkNameParserRuleCall_3_0_1_0; }

		//anonymousAccessDefinition=AnonymousAccessDefinition
		public Assignment getAnonymousAccessDefinitionAssignment_3_1() { return cAnonymousAccessDefinitionAssignment_3_1; }

		//AnonymousAccessDefinition
		public RuleCall getAnonymousAccessDefinitionAnonymousAccessDefinitionParserRuleCall_3_1_0() { return cAnonymousAccessDefinitionAnonymousAccessDefinitionParserRuleCall_3_1_0; }

		//(DPE defaultExpression=Expression)?
		public Group getGroup_4() { return cGroup_4; }

		//DPE
		public RuleCall getDPETerminalRuleCall_4_0() { return cDPETerminalRuleCall_4_0; }

		//defaultExpression=Expression
		public Assignment getDefaultExpressionAssignment_4_1() { return cDefaultExpressionAssignment_4_1; }

		//Expression
		public RuleCall getDefaultExpressionExpressionParserRuleCall_4_1_0() { return cDefaultExpressionExpressionParserRuleCall_4_1_0; }
	}

	public class FormalTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTYPE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Assignment cDiscriminantPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDiscriminantPartDiscriminantPartParserRuleCall_2_0 = (RuleCall)cDiscriminantPartAssignment_2.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cFormalTypeDefinitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFormalTypeDefinitionFormalTypeDefinitionParserRuleCall_4_0 = (RuleCall)cFormalTypeDefinitionAssignment_4.eContents().get(0);
		
		//FormalTypeDeclaration:
		//	TYPE_ identifier=IDENTIFIER discriminantPart=DiscriminantPart? IS_ formalTypeDefinition=FormalTypeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//TYPE_ identifier=IDENTIFIER discriminantPart=DiscriminantPart? IS_ formalTypeDefinition=FormalTypeDefinition
		public Group getGroup() { return cGroup; }

		//TYPE_
		public RuleCall getTYPE_TerminalRuleCall_0() { return cTYPE_TerminalRuleCall_0; }

		//identifier=IDENTIFIER
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//IDENTIFIER
		public RuleCall getIdentifierIDENTIFIERTerminalRuleCall_1_0() { return cIdentifierIDENTIFIERTerminalRuleCall_1_0; }

		//discriminantPart=DiscriminantPart?
		public Assignment getDiscriminantPartAssignment_2() { return cDiscriminantPartAssignment_2; }

		//DiscriminantPart
		public RuleCall getDiscriminantPartDiscriminantPartParserRuleCall_2_0() { return cDiscriminantPartDiscriminantPartParserRuleCall_2_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_3() { return cIS_TerminalRuleCall_3; }

		//formalTypeDefinition=FormalTypeDefinition
		public Assignment getFormalTypeDefinitionAssignment_4() { return cFormalTypeDefinitionAssignment_4; }

		//FormalTypeDefinition
		public RuleCall getFormalTypeDefinitionFormalTypeDefinitionParserRuleCall_4_0() { return cFormalTypeDefinitionFormalTypeDefinitionParserRuleCall_4_0; }
	}

	public class FormalTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalTypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFormalPrivateTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFormalDerivedTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFormalTypeDefinitionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cFormalDiscreteTypeDefinitionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cFormalTypeDefinitionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cFormalSignedIntegerTypeDefinitionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cFormalTypeDefinitionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cFormalModularTypeDefinitionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cFormalTypeDefinitionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final RuleCall cFormalFloatingPointDefinitionParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cFormalTypeDefinitionAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final RuleCall cFormalOrdinaryFixedPointDefinitionParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cFormalTypeDefinitionAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final RuleCall cFormalDecimalFixedPointDefinitionParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final RuleCall cArrayTypeDefinitionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cAccessTypeDefinitionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cInterfaceTypeDefinitionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//FormalTypeDefinition:
		//	FormalPrivateTypeDefinition
		//	| FormalDerivedTypeDefinition
		//	| {FormalTypeDefinition} FormalDiscreteTypeDefinition
		//	| {FormalTypeDefinition} FormalSignedIntegerTypeDefinition
		//	| {FormalTypeDefinition} FormalModularTypeDefinition
		//	| {FormalTypeDefinition} FormalFloatingPointDefinition
		//	| {FormalTypeDefinition} FormalOrdinaryFixedPointDefinition
		//	| {FormalTypeDefinition} FormalDecimalFixedPointDefinition
		//	| ArrayTypeDefinition
		//	| AccessTypeDefinition
		//	| InterfaceTypeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//FormalPrivateTypeDefinition | FormalDerivedTypeDefinition | {FormalTypeDefinition} FormalDiscreteTypeDefinition |
		//{FormalTypeDefinition} FormalSignedIntegerTypeDefinition | {FormalTypeDefinition} FormalModularTypeDefinition |
		//{FormalTypeDefinition} FormalFloatingPointDefinition | {FormalTypeDefinition} FormalOrdinaryFixedPointDefinition |
		//{FormalTypeDefinition} FormalDecimalFixedPointDefinition | ArrayTypeDefinition | AccessTypeDefinition |
		//InterfaceTypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//FormalPrivateTypeDefinition
		public RuleCall getFormalPrivateTypeDefinitionParserRuleCall_0() { return cFormalPrivateTypeDefinitionParserRuleCall_0; }

		//FormalDerivedTypeDefinition
		public RuleCall getFormalDerivedTypeDefinitionParserRuleCall_1() { return cFormalDerivedTypeDefinitionParserRuleCall_1; }

		//{FormalTypeDefinition} FormalDiscreteTypeDefinition
		public Group getGroup_2() { return cGroup_2; }

		//{FormalTypeDefinition}
		public Action getFormalTypeDefinitionAction_2_0() { return cFormalTypeDefinitionAction_2_0; }

		//FormalDiscreteTypeDefinition
		public RuleCall getFormalDiscreteTypeDefinitionParserRuleCall_2_1() { return cFormalDiscreteTypeDefinitionParserRuleCall_2_1; }

		//{FormalTypeDefinition} FormalSignedIntegerTypeDefinition
		public Group getGroup_3() { return cGroup_3; }

		//{FormalTypeDefinition}
		public Action getFormalTypeDefinitionAction_3_0() { return cFormalTypeDefinitionAction_3_0; }

		//FormalSignedIntegerTypeDefinition
		public RuleCall getFormalSignedIntegerTypeDefinitionParserRuleCall_3_1() { return cFormalSignedIntegerTypeDefinitionParserRuleCall_3_1; }

		//{FormalTypeDefinition} FormalModularTypeDefinition
		public Group getGroup_4() { return cGroup_4; }

		//{FormalTypeDefinition}
		public Action getFormalTypeDefinitionAction_4_0() { return cFormalTypeDefinitionAction_4_0; }

		//FormalModularTypeDefinition
		public RuleCall getFormalModularTypeDefinitionParserRuleCall_4_1() { return cFormalModularTypeDefinitionParserRuleCall_4_1; }

		//{FormalTypeDefinition} FormalFloatingPointDefinition
		public Group getGroup_5() { return cGroup_5; }

		//{FormalTypeDefinition}
		public Action getFormalTypeDefinitionAction_5_0() { return cFormalTypeDefinitionAction_5_0; }

		//FormalFloatingPointDefinition
		public RuleCall getFormalFloatingPointDefinitionParserRuleCall_5_1() { return cFormalFloatingPointDefinitionParserRuleCall_5_1; }

		//{FormalTypeDefinition} FormalOrdinaryFixedPointDefinition
		public Group getGroup_6() { return cGroup_6; }

		//{FormalTypeDefinition}
		public Action getFormalTypeDefinitionAction_6_0() { return cFormalTypeDefinitionAction_6_0; }

		//FormalOrdinaryFixedPointDefinition
		public RuleCall getFormalOrdinaryFixedPointDefinitionParserRuleCall_6_1() { return cFormalOrdinaryFixedPointDefinitionParserRuleCall_6_1; }

		//{FormalTypeDefinition} FormalDecimalFixedPointDefinition
		public Group getGroup_7() { return cGroup_7; }

		//{FormalTypeDefinition}
		public Action getFormalTypeDefinitionAction_7_0() { return cFormalTypeDefinitionAction_7_0; }

		//FormalDecimalFixedPointDefinition
		public RuleCall getFormalDecimalFixedPointDefinitionParserRuleCall_7_1() { return cFormalDecimalFixedPointDefinitionParserRuleCall_7_1; }

		//ArrayTypeDefinition
		public RuleCall getArrayTypeDefinitionParserRuleCall_8() { return cArrayTypeDefinitionParserRuleCall_8; }

		//AccessTypeDefinition
		public RuleCall getAccessTypeDefinitionParserRuleCall_9() { return cAccessTypeDefinitionParserRuleCall_9; }

		//InterfaceTypeDefinition
		public RuleCall getInterfaceTypeDefinitionParserRuleCall_10() { return cInterfaceTypeDefinitionParserRuleCall_10; }
	}

	public class FormalDiscreteTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalDiscreteTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBOITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FormalDiscreteTypeDefinition:
		//	PG BOIT PD;
		@Override public ParserRule getRule() { return rule; }

		//PG BOIT PD
		public Group getGroup() { return cGroup; }

		//PG
		public RuleCall getPGTerminalRuleCall_0() { return cPGTerminalRuleCall_0; }

		//BOIT
		public RuleCall getBOITTerminalRuleCall_1() { return cBOITTerminalRuleCall_1; }

		//PD
		public RuleCall getPDTerminalRuleCall_2() { return cPDTerminalRuleCall_2; }
	}

	public class FormalSignedIntegerTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalSignedIntegerTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRANGE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBOITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FormalSignedIntegerTypeDefinition:
		//	RANGE_ BOIT;
		@Override public ParserRule getRule() { return rule; }

		//RANGE_ BOIT
		public Group getGroup() { return cGroup; }

		//RANGE_
		public RuleCall getRANGE_TerminalRuleCall_0() { return cRANGE_TerminalRuleCall_0; }

		//BOIT
		public RuleCall getBOITTerminalRuleCall_1() { return cBOITTerminalRuleCall_1; }
	}

	public class FormalModularTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalModularTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMOD_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBOITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FormalModularTypeDefinition:
		//	MOD_ BOIT;
		@Override public ParserRule getRule() { return rule; }

		//MOD_ BOIT
		public Group getGroup() { return cGroup; }

		//MOD_
		public RuleCall getMOD_TerminalRuleCall_0() { return cMOD_TerminalRuleCall_0; }

		//BOIT
		public RuleCall getBOITTerminalRuleCall_1() { return cBOITTerminalRuleCall_1; }
	}

	public class FormalFloatingPointDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalFloatingPointDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDIGITS_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBOITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FormalFloatingPointDefinition:
		//	DIGITS_ BOIT;
		@Override public ParserRule getRule() { return rule; }

		//DIGITS_ BOIT
		public Group getGroup() { return cGroup; }

		//DIGITS_
		public RuleCall getDIGITS_TerminalRuleCall_0() { return cDIGITS_TerminalRuleCall_0; }

		//BOIT
		public RuleCall getBOITTerminalRuleCall_1() { return cBOITTerminalRuleCall_1; }
	}

	public class FormalOrdinaryFixedPointDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalOrdinaryFixedPointDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDELTA_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBOITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FormalOrdinaryFixedPointDefinition:
		//	DELTA_ BOIT;
		@Override public ParserRule getRule() { return rule; }

		//DELTA_ BOIT
		public Group getGroup() { return cGroup; }

		//DELTA_
		public RuleCall getDELTA_TerminalRuleCall_0() { return cDELTA_TerminalRuleCall_0; }

		//BOIT
		public RuleCall getBOITTerminalRuleCall_1() { return cBOITTerminalRuleCall_1; }
	}

	public class FormalDecimalFixedPointDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalDecimalFixedPointDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDELTA_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBOITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDIGITS_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cBOITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//FormalDecimalFixedPointDefinition:
		//	DELTA_ BOIT DIGITS_ BOIT;
		@Override public ParserRule getRule() { return rule; }

		//DELTA_ BOIT DIGITS_ BOIT
		public Group getGroup() { return cGroup; }

		//DELTA_
		public RuleCall getDELTA_TerminalRuleCall_0() { return cDELTA_TerminalRuleCall_0; }

		//BOIT
		public RuleCall getBOITTerminalRuleCall_1() { return cBOITTerminalRuleCall_1; }

		//DIGITS_
		public RuleCall getDIGITS_TerminalRuleCall_2() { return cDIGITS_TerminalRuleCall_2; }

		//BOIT
		public RuleCall getBOITTerminalRuleCall_3() { return cBOITTerminalRuleCall_3; }
	}

	public class FormalPrivateTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalPrivateTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormalPrivateTypeDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAbstractAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAbstractABSTRACT_TerminalRuleCall_1_0_0 = (RuleCall)cAbstractAssignment_1_0.eContents().get(0);
		private final Assignment cTaggedAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTaggedTAGGED_TerminalRuleCall_1_1_0 = (RuleCall)cTaggedAssignment_1_1.eContents().get(0);
		private final Assignment cLimitedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLimitedLIMITED_TerminalRuleCall_2_0 = (RuleCall)cLimitedAssignment_2.eContents().get(0);
		private final RuleCall cPRIVATE_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//FormalPrivateTypeDefinition:
		//	{FormalPrivateTypeDefinition} (abstract?=ABSTRACT_? tagged?=TAGGED_)? limited?=LIMITED_? PRIVATE_;
		@Override public ParserRule getRule() { return rule; }

		//{FormalPrivateTypeDefinition} (abstract?=ABSTRACT_? tagged?=TAGGED_)? limited?=LIMITED_? PRIVATE_
		public Group getGroup() { return cGroup; }

		//{FormalPrivateTypeDefinition}
		public Action getFormalPrivateTypeDefinitionAction_0() { return cFormalPrivateTypeDefinitionAction_0; }

		//(abstract?=ABSTRACT_? tagged?=TAGGED_)?
		public Group getGroup_1() { return cGroup_1; }

		//abstract?=ABSTRACT_?
		public Assignment getAbstractAssignment_1_0() { return cAbstractAssignment_1_0; }

		//ABSTRACT_
		public RuleCall getAbstractABSTRACT_TerminalRuleCall_1_0_0() { return cAbstractABSTRACT_TerminalRuleCall_1_0_0; }

		//tagged?=TAGGED_
		public Assignment getTaggedAssignment_1_1() { return cTaggedAssignment_1_1; }

		//TAGGED_
		public RuleCall getTaggedTAGGED_TerminalRuleCall_1_1_0() { return cTaggedTAGGED_TerminalRuleCall_1_1_0; }

		//limited?=LIMITED_?
		public Assignment getLimitedAssignment_2() { return cLimitedAssignment_2; }

		//LIMITED_
		public RuleCall getLimitedLIMITED_TerminalRuleCall_2_0() { return cLimitedLIMITED_TerminalRuleCall_2_0; }

		//PRIVATE_
		public RuleCall getPRIVATE_TerminalRuleCall_3() { return cPRIVATE_TerminalRuleCall_3; }
	}

	public class FormalDerivedTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalDerivedTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbsractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAbsractABSTRACT_TerminalRuleCall_0_0 = (RuleCall)cAbsractAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLimitedAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLimitedLIMITED_TerminalRuleCall_1_0_0 = (RuleCall)cLimitedAssignment_1_0.eContents().get(0);
		private final Assignment cSynchronizedAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cSynchronizedSYNCHRONIZED_TerminalRuleCall_1_1_0 = (RuleCall)cSynchronizedAssignment_1_1.eContents().get(0);
		private final RuleCall cNEW_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSubtypeMarkAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubtypeMarkNameParserRuleCall_3_0 = (RuleCall)cSubtypeMarkAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final RuleCall cAND_TerminalRuleCall_4_0_0 = (RuleCall)cGroup_4_0.eContents().get(0);
		private final Assignment cInterfaceListAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cInterfaceListInterfaceListParserRuleCall_4_0_1_0 = (RuleCall)cInterfaceListAssignment_4_0_1.eContents().get(0);
		private final RuleCall cWITH_TerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cPRIVATE_TerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//FormalDerivedTypeDefinition:
		//	absract=ABSTRACT_? (limited?=LIMITED_ | synchronized?=SYNCHRONIZED_)? NEW_ subtypeMark=Name ((AND_
		//	interfaceList=InterfaceList)? WITH_ PRIVATE_)?;
		@Override public ParserRule getRule() { return rule; }

		//absract=ABSTRACT_? (limited?=LIMITED_ | synchronized?=SYNCHRONIZED_)? NEW_ subtypeMark=Name ((AND_
		//interfaceList=InterfaceList)? WITH_ PRIVATE_)?
		public Group getGroup() { return cGroup; }

		//absract=ABSTRACT_?
		public Assignment getAbsractAssignment_0() { return cAbsractAssignment_0; }

		//ABSTRACT_
		public RuleCall getAbsractABSTRACT_TerminalRuleCall_0_0() { return cAbsractABSTRACT_TerminalRuleCall_0_0; }

		//(limited?=LIMITED_ | synchronized?=SYNCHRONIZED_)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//limited?=LIMITED_
		public Assignment getLimitedAssignment_1_0() { return cLimitedAssignment_1_0; }

		//LIMITED_
		public RuleCall getLimitedLIMITED_TerminalRuleCall_1_0_0() { return cLimitedLIMITED_TerminalRuleCall_1_0_0; }

		//synchronized?=SYNCHRONIZED_
		public Assignment getSynchronizedAssignment_1_1() { return cSynchronizedAssignment_1_1; }

		//SYNCHRONIZED_
		public RuleCall getSynchronizedSYNCHRONIZED_TerminalRuleCall_1_1_0() { return cSynchronizedSYNCHRONIZED_TerminalRuleCall_1_1_0; }

		//NEW_
		public RuleCall getNEW_TerminalRuleCall_2() { return cNEW_TerminalRuleCall_2; }

		//subtypeMark=Name
		public Assignment getSubtypeMarkAssignment_3() { return cSubtypeMarkAssignment_3; }

		//Name
		public RuleCall getSubtypeMarkNameParserRuleCall_3_0() { return cSubtypeMarkNameParserRuleCall_3_0; }

		//((AND_ interfaceList=InterfaceList)? WITH_ PRIVATE_)?
		public Group getGroup_4() { return cGroup_4; }

		//(AND_ interfaceList=InterfaceList)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//AND_
		public RuleCall getAND_TerminalRuleCall_4_0_0() { return cAND_TerminalRuleCall_4_0_0; }

		//interfaceList=InterfaceList
		public Assignment getInterfaceListAssignment_4_0_1() { return cInterfaceListAssignment_4_0_1; }

		//InterfaceList
		public RuleCall getInterfaceListInterfaceListParserRuleCall_4_0_1_0() { return cInterfaceListInterfaceListParserRuleCall_4_0_1_0; }

		//WITH_
		public RuleCall getWITH_TerminalRuleCall_4_1() { return cWITH_TerminalRuleCall_4_1; }

		//PRIVATE_
		public RuleCall getPRIVATE_TerminalRuleCall_4_2() { return cPRIVATE_TerminalRuleCall_4_2; }
	}

	public class FormalSubprogramDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalSubprogramDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWITH_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cSubprogramSpecificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubprogramSpecificationSubprogramSpecificationParserRuleCall_1_0 = (RuleCall)cSubprogramSpecificationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cIS_TerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cAbstractAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAbstractABSTRACT_TerminalRuleCall_2_1_0 = (RuleCall)cAbstractAssignment_2_1.eContents().get(0);
		private final Assignment cSubprogramDefaultAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cSubprogramDefaultSubprogramDefaultParserRuleCall_2_2_0 = (RuleCall)cSubprogramDefaultAssignment_2_2.eContents().get(0);
		
		//FormalSubprogramDeclaration:
		//	WITH_ subprogramSpecification=SubprogramSpecification (IS_ abstract=ABSTRACT_? subprogramDefault=SubprogramDefault)?;
		@Override public ParserRule getRule() { return rule; }

		//WITH_ subprogramSpecification=SubprogramSpecification (IS_ abstract=ABSTRACT_? subprogramDefault=SubprogramDefault)?
		public Group getGroup() { return cGroup; }

		//WITH_
		public RuleCall getWITH_TerminalRuleCall_0() { return cWITH_TerminalRuleCall_0; }

		//subprogramSpecification=SubprogramSpecification
		public Assignment getSubprogramSpecificationAssignment_1() { return cSubprogramSpecificationAssignment_1; }

		//SubprogramSpecification
		public RuleCall getSubprogramSpecificationSubprogramSpecificationParserRuleCall_1_0() { return cSubprogramSpecificationSubprogramSpecificationParserRuleCall_1_0; }

		//(IS_ abstract=ABSTRACT_? subprogramDefault=SubprogramDefault)?
		public Group getGroup_2() { return cGroup_2; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_2_0() { return cIS_TerminalRuleCall_2_0; }

		//abstract=ABSTRACT_?
		public Assignment getAbstractAssignment_2_1() { return cAbstractAssignment_2_1; }

		//ABSTRACT_
		public RuleCall getAbstractABSTRACT_TerminalRuleCall_2_1_0() { return cAbstractABSTRACT_TerminalRuleCall_2_1_0; }

		//subprogramDefault=SubprogramDefault
		public Assignment getSubprogramDefaultAssignment_2_2() { return cSubprogramDefaultAssignment_2_2; }

		//SubprogramDefault
		public RuleCall getSubprogramDefaultSubprogramDefaultParserRuleCall_2_2_0() { return cSubprogramDefaultSubprogramDefaultParserRuleCall_2_2_0; }
	}

	public class SubprogramDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SubprogramDefault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubprogramDefaultAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDefaultNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDefaultNamePATHNAMEParserRuleCall_1_0_0 = (RuleCall)cDefaultNameAssignment_1_0.eContents().get(0);
		private final RuleCall cBOITTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cNULL_TerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//SubprogramDefault:
		//	{SubprogramDefault} (defaultName=PATHNAME // TODO: To be confirmed it is not a Name as specified by the RM.
		//	| BOIT
		//	| NULL_);
		@Override public ParserRule getRule() { return rule; }

		//{SubprogramDefault} (defaultName=PATHNAME // TODO: To be confirmed it is not a Name as specified by the RM.
		//| BOIT | NULL_)
		public Group getGroup() { return cGroup; }

		//{SubprogramDefault}
		public Action getSubprogramDefaultAction_0() { return cSubprogramDefaultAction_0; }

		//(defaultName=PATHNAME // TODO: To be confirmed it is not a Name as specified by the RM.
		//| BOIT | NULL_)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//defaultName=PATHNAME
		public Assignment getDefaultNameAssignment_1_0() { return cDefaultNameAssignment_1_0; }

		//PATHNAME
		public RuleCall getDefaultNamePATHNAMEParserRuleCall_1_0_0() { return cDefaultNamePATHNAMEParserRuleCall_1_0_0; }

		//BOIT
		public RuleCall getBOITTerminalRuleCall_1_1() { return cBOITTerminalRuleCall_1_1; }

		//NULL_
		public RuleCall getNULL_TerminalRuleCall_1_2() { return cNULL_TerminalRuleCall_1_2; }
	}

	public class FormalPackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalPackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWITH_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPACKAGE_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cNEW_TerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cGenericPackageNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGenericPackageNamePATHIDENTIFIERParserRuleCall_5_0 = (RuleCall)cGenericPackageNameAssignment_5.eContents().get(0);
		private final Assignment cFormalPackageActualPartAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFormalPackageActualPartFormalPackageActualPartParserRuleCall_6_0 = (RuleCall)cFormalPackageActualPartAssignment_6.eContents().get(0);
		
		//FormalPackageDeclaration:
		//	WITH_ PACKAGE_ name=IDENTIFIER IS_ NEW_ genericPackageName=PATHIDENTIFIER
		//	formalPackageActualPart=FormalPackageActualPart;
		@Override public ParserRule getRule() { return rule; }

		//WITH_ PACKAGE_ name=IDENTIFIER IS_ NEW_ genericPackageName=PATHIDENTIFIER
		//formalPackageActualPart=FormalPackageActualPart
		public Group getGroup() { return cGroup; }

		//WITH_
		public RuleCall getWITH_TerminalRuleCall_0() { return cWITH_TerminalRuleCall_0; }

		//PACKAGE_
		public RuleCall getPACKAGE_TerminalRuleCall_1() { return cPACKAGE_TerminalRuleCall_1; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_2_0() { return cNameIDENTIFIERTerminalRuleCall_2_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_3() { return cIS_TerminalRuleCall_3; }

		//NEW_
		public RuleCall getNEW_TerminalRuleCall_4() { return cNEW_TerminalRuleCall_4; }

		//genericPackageName=PATHIDENTIFIER
		public Assignment getGenericPackageNameAssignment_5() { return cGenericPackageNameAssignment_5; }

		//PATHIDENTIFIER
		public RuleCall getGenericPackageNamePATHIDENTIFIERParserRuleCall_5_0() { return cGenericPackageNamePATHIDENTIFIERParserRuleCall_5_0; }

		//formalPackageActualPart=FormalPackageActualPart
		public Assignment getFormalPackageActualPartAssignment_6() { return cFormalPackageActualPartAssignment_6; }

		//FormalPackageActualPart
		public RuleCall getFormalPackageActualPartFormalPackageActualPartParserRuleCall_6_0() { return cFormalPackageActualPartFormalPackageActualPartParserRuleCall_6_0; }
	}

	public class FormalPackageActualPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalPackageActualPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormalPackageActualPartAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cPGTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final RuleCall cOTHERS_TerminalRuleCall_1_0_1_0 = (RuleCall)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cFLECHETerminalRuleCall_1_0_1_1 = (RuleCall)cGroup_1_0_1.eContents().get(1);
		private final Assignment cBoxAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cBoxBOITTerminalRuleCall_1_0_2_0 = (RuleCall)cBoxAssignment_1_0_2.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_1_0_3 = (RuleCall)cGroup_1_0.eContents().get(3);
		private final Assignment cGenericActualPartAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cGenericActualPartGenericActualPartParserRuleCall_1_1_0 = (RuleCall)cGenericActualPartAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final RuleCall cPGTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cFormalPackageAssociationAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cFormalPackageAssociationFormalPackageAssociationParserRuleCall_1_2_1_0 = (RuleCall)cFormalPackageAssociationAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final RuleCall cVTerminalRuleCall_1_2_2_0 = (RuleCall)cGroup_1_2_2.eContents().get(0);
		private final Assignment cFormalPackageAssociationAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cFormalPackageAssociationFormalPackageAssociationParserRuleCall_1_2_2_1_0 = (RuleCall)cFormalPackageAssociationAssignment_1_2_2_1.eContents().get(0);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final RuleCall cVTerminalRuleCall_1_2_3_0 = (RuleCall)cGroup_1_2_3.eContents().get(0);
		private final RuleCall cOTHERS_TerminalRuleCall_1_2_3_1 = (RuleCall)cGroup_1_2_3.eContents().get(1);
		private final RuleCall cFLECHETerminalRuleCall_1_2_3_2 = (RuleCall)cGroup_1_2_3.eContents().get(2);
		private final RuleCall cBOITTerminalRuleCall_1_2_3_3 = (RuleCall)cGroup_1_2_3.eContents().get(3);
		private final RuleCall cPDTerminalRuleCall_1_2_4 = (RuleCall)cGroup_1_2.eContents().get(4);
		
		//FormalPackageActualPart:
		//	{FormalPackageActualPart} (=> PG (OTHERS_ FLECHE)? box?=BOIT PD
		//	| => genericActualPart=GenericActualPart?
		//	| => PG formalPackageAssociation+=FormalPackageAssociation (V formalPackageAssociation+=FormalPackageAssociation)* (V
		//	OTHERS_ FLECHE BOIT)? PD);
		@Override public ParserRule getRule() { return rule; }

		//{FormalPackageActualPart} (=> PG (OTHERS_ FLECHE)? box?=BOIT PD | => genericActualPart=GenericActualPart? | => PG
		//formalPackageAssociation+=FormalPackageAssociation (V formalPackageAssociation+=FormalPackageAssociation)* (V OTHERS_
		//FLECHE BOIT)? PD)
		public Group getGroup() { return cGroup; }

		//{FormalPackageActualPart}
		public Action getFormalPackageActualPartAction_0() { return cFormalPackageActualPartAction_0; }

		//(=> PG (OTHERS_ FLECHE)? box?=BOIT PD | => genericActualPart=GenericActualPart? | => PG
		//formalPackageAssociation+=FormalPackageAssociation (V formalPackageAssociation+=FormalPackageAssociation)* (V OTHERS_
		//FLECHE BOIT)? PD)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> PG (OTHERS_ FLECHE)? box?=BOIT PD
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> PG
		public RuleCall getPGTerminalRuleCall_1_0_0() { return cPGTerminalRuleCall_1_0_0; }

		//(OTHERS_ FLECHE)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//OTHERS_
		public RuleCall getOTHERS_TerminalRuleCall_1_0_1_0() { return cOTHERS_TerminalRuleCall_1_0_1_0; }

		//FLECHE
		public RuleCall getFLECHETerminalRuleCall_1_0_1_1() { return cFLECHETerminalRuleCall_1_0_1_1; }

		//box?=BOIT
		public Assignment getBoxAssignment_1_0_2() { return cBoxAssignment_1_0_2; }

		//BOIT
		public RuleCall getBoxBOITTerminalRuleCall_1_0_2_0() { return cBoxBOITTerminalRuleCall_1_0_2_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_1_0_3() { return cPDTerminalRuleCall_1_0_3; }

		//=> genericActualPart=GenericActualPart?
		public Assignment getGenericActualPartAssignment_1_1() { return cGenericActualPartAssignment_1_1; }

		//GenericActualPart
		public RuleCall getGenericActualPartGenericActualPartParserRuleCall_1_1_0() { return cGenericActualPartGenericActualPartParserRuleCall_1_1_0; }

		//=> PG formalPackageAssociation+=FormalPackageAssociation (V formalPackageAssociation+=FormalPackageAssociation)* (V
		//OTHERS_ FLECHE BOIT)? PD
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> PG
		public RuleCall getPGTerminalRuleCall_1_2_0() { return cPGTerminalRuleCall_1_2_0; }

		//formalPackageAssociation+=FormalPackageAssociation
		public Assignment getFormalPackageAssociationAssignment_1_2_1() { return cFormalPackageAssociationAssignment_1_2_1; }

		//FormalPackageAssociation
		public RuleCall getFormalPackageAssociationFormalPackageAssociationParserRuleCall_1_2_1_0() { return cFormalPackageAssociationFormalPackageAssociationParserRuleCall_1_2_1_0; }

		//(V formalPackageAssociation+=FormalPackageAssociation)*
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }

		//V
		public RuleCall getVTerminalRuleCall_1_2_2_0() { return cVTerminalRuleCall_1_2_2_0; }

		//formalPackageAssociation+=FormalPackageAssociation
		public Assignment getFormalPackageAssociationAssignment_1_2_2_1() { return cFormalPackageAssociationAssignment_1_2_2_1; }

		//FormalPackageAssociation
		public RuleCall getFormalPackageAssociationFormalPackageAssociationParserRuleCall_1_2_2_1_0() { return cFormalPackageAssociationFormalPackageAssociationParserRuleCall_1_2_2_1_0; }

		//(V OTHERS_ FLECHE BOIT)?
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }

		//V
		public RuleCall getVTerminalRuleCall_1_2_3_0() { return cVTerminalRuleCall_1_2_3_0; }

		//OTHERS_
		public RuleCall getOTHERS_TerminalRuleCall_1_2_3_1() { return cOTHERS_TerminalRuleCall_1_2_3_1; }

		//FLECHE
		public RuleCall getFLECHETerminalRuleCall_1_2_3_2() { return cFLECHETerminalRuleCall_1_2_3_2; }

		//BOIT
		public RuleCall getBOITTerminalRuleCall_1_2_3_3() { return cBOITTerminalRuleCall_1_2_3_3; }

		//PD
		public RuleCall getPDTerminalRuleCall_1_2_4() { return cPDTerminalRuleCall_1_2_4; }
	}

	public class FormalPackageAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalPackageAssociation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGenericAssociationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGenericAssociationGenericAssociationParserRuleCall_0_0 = (RuleCall)cGenericAssociationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cGenericFormalParameterSelectorNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cGenericFormalParameterSelectorNameSelectorNameParserRuleCall_1_0_0 = (RuleCall)cGenericFormalParameterSelectorNameAssignment_1_0.eContents().get(0);
		private final RuleCall cDPETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cBOITTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//FormalPackageAssociation:
		//	genericAssociation=GenericAssociation
		//	| genericFormalParameterSelectorName=SelectorName DPE BOIT;
		@Override public ParserRule getRule() { return rule; }

		//genericAssociation=GenericAssociation | genericFormalParameterSelectorName=SelectorName DPE BOIT
		public Alternatives getAlternatives() { return cAlternatives; }

		//genericAssociation=GenericAssociation
		public Assignment getGenericAssociationAssignment_0() { return cGenericAssociationAssignment_0; }

		//GenericAssociation
		public RuleCall getGenericAssociationGenericAssociationParserRuleCall_0_0() { return cGenericAssociationGenericAssociationParserRuleCall_0_0; }

		//genericFormalParameterSelectorName=SelectorName DPE BOIT
		public Group getGroup_1() { return cGroup_1; }

		//genericFormalParameterSelectorName=SelectorName
		public Assignment getGenericFormalParameterSelectorNameAssignment_1_0() { return cGenericFormalParameterSelectorNameAssignment_1_0; }

		//SelectorName
		public RuleCall getGenericFormalParameterSelectorNameSelectorNameParserRuleCall_1_0_0() { return cGenericFormalParameterSelectorNameSelectorNameParserRuleCall_1_0_0; }

		//DPE
		public RuleCall getDPETerminalRuleCall_1_1() { return cDPETerminalRuleCall_1_1; }

		//BOIT
		public RuleCall getBOITTerminalRuleCall_1_2() { return cBOITTerminalRuleCall_1_2; }
	}

	public class ExceptionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ExceptionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdListDefiningIdentifierListParserRuleCall_0_0 = (RuleCall)cIdListAssignment_0.eContents().get(0);
		private final RuleCall cDPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cEXCEPTION_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cRENAMES_TerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cRenamedNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRenamedNameNameParserRuleCall_3_1_0 = (RuleCall)cRenamedNameAssignment_3_1.eContents().get(0);
		
		//ExceptionDeclaration:
		//	idList=DefiningIdentifierList DP EXCEPTION_ (RENAMES_ renamedName=Name)?;
		@Override public ParserRule getRule() { return rule; }

		//idList=DefiningIdentifierList DP EXCEPTION_ (RENAMES_ renamedName=Name)?
		public Group getGroup() { return cGroup; }

		//idList=DefiningIdentifierList
		public Assignment getIdListAssignment_0() { return cIdListAssignment_0; }

		//DefiningIdentifierList
		public RuleCall getIdListDefiningIdentifierListParserRuleCall_0_0() { return cIdListDefiningIdentifierListParserRuleCall_0_0; }

		//DP
		public RuleCall getDPTerminalRuleCall_1() { return cDPTerminalRuleCall_1; }

		//EXCEPTION_
		public RuleCall getEXCEPTION_TerminalRuleCall_2() { return cEXCEPTION_TerminalRuleCall_2; }

		//(RENAMES_ renamedName=Name)?
		public Group getGroup_3() { return cGroup_3; }

		//RENAMES_
		public RuleCall getRENAMES_TerminalRuleCall_3_0() { return cRENAMES_TerminalRuleCall_3_0; }

		//renamedName=Name
		public Assignment getRenamedNameAssignment_3_1() { return cRenamedNameAssignment_3_1; }

		//Name
		public RuleCall getRenamedNameNameParserRuleCall_3_1_0() { return cRenamedNameNameParserRuleCall_3_1_0; }
	}

	public class ObjectDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ObjectDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataInstanceDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSingleProtectedDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ObjectDeclaration:
		//	DataInstanceDeclaration
		//	| SingleProtectedDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//DataInstanceDeclaration | SingleProtectedDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataInstanceDeclaration
		public RuleCall getDataInstanceDeclarationParserRuleCall_0() { return cDataInstanceDeclarationParserRuleCall_0; }

		//SingleProtectedDeclaration
		public RuleCall getSingleProtectedDeclarationParserRuleCall_1() { return cSingleProtectedDeclarationParserRuleCall_1; }
	}

	public class DataInstanceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DataInstanceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefiningIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefiningIdentifierListDefiningIdentifierListParserRuleCall_0_0 = (RuleCall)cDefiningIdentifierListAssignment_0.eContents().get(0);
		private final RuleCall cDPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cAliasedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAliasedALIASED_TerminalRuleCall_2_0 = (RuleCall)cAliasedAssignment_2.eContents().get(0);
		private final Assignment cConstantAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstantCONSTANT_TerminalRuleCall_3_0 = (RuleCall)cConstantAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cSubtypeIndicationAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cSubtypeIndicationSubtypeIndicationParserRuleCall_4_0_0_0 = (RuleCall)cSubtypeIndicationAssignment_4_0_0.eContents().get(0);
		private final Alternatives cAlternatives_4_0_1 = (Alternatives)cGroup_4_0.eContents().get(1);
		private final Group cGroup_4_0_1_0 = (Group)cAlternatives_4_0_1.eContents().get(0);
		private final RuleCall cDPETerminalRuleCall_4_0_1_0_0 = (RuleCall)cGroup_4_0_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_4_0_1_0_1 = (Assignment)cGroup_4_0_1_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0_1_0_1_0 = (RuleCall)cExpressionAssignment_4_0_1_0_1.eContents().get(0);
		private final Group cGroup_4_0_1_1 = (Group)cAlternatives_4_0_1.eContents().get(1);
		private final RuleCall cRENAMES_TerminalRuleCall_4_0_1_1_0 = (RuleCall)cGroup_4_0_1_1.eContents().get(0);
		private final Assignment cObjectNameAssignment_4_0_1_1_1 = (Assignment)cGroup_4_0_1_1.eContents().get(1);
		private final RuleCall cObjectNameNameParserRuleCall_4_0_1_1_1_0 = (RuleCall)cObjectNameAssignment_4_0_1_1_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cAnonymousAccessDefinitionAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cAnonymousAccessDefinitionAnonymousAccessDefinitionParserRuleCall_4_1_0_0 = (RuleCall)cAnonymousAccessDefinitionAssignment_4_1_0.eContents().get(0);
		private final Alternatives cAlternatives_4_1_1 = (Alternatives)cGroup_4_1.eContents().get(1);
		private final Group cGroup_4_1_1_0 = (Group)cAlternatives_4_1_1.eContents().get(0);
		private final RuleCall cDPETerminalRuleCall_4_1_1_0_0 = (RuleCall)cGroup_4_1_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1_1_0_1 = (Assignment)cGroup_4_1_1_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_4_1_1_0_1_0 = (RuleCall)cExpressionAssignment_4_1_1_0_1.eContents().get(0);
		private final Group cGroup_4_1_1_1 = (Group)cAlternatives_4_1_1.eContents().get(1);
		private final RuleCall cRENAMES_TerminalRuleCall_4_1_1_1_0 = (RuleCall)cGroup_4_1_1_1.eContents().get(0);
		private final Assignment cObjectNameAssignment_4_1_1_1_1 = (Assignment)cGroup_4_1_1_1.eContents().get(1);
		private final RuleCall cObjectNameNameParserRuleCall_4_1_1_1_1_0 = (RuleCall)cObjectNameAssignment_4_1_1_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cAlternatives_4.eContents().get(2);
		private final Assignment cArrayTypeDefinitionAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cArrayTypeDefinitionArrayTypeDefinitionParserRuleCall_4_2_0_0 = (RuleCall)cArrayTypeDefinitionAssignment_4_2_0.eContents().get(0);
		private final Group cGroup_4_2_1 = (Group)cGroup_4_2.eContents().get(1);
		private final RuleCall cDPETerminalRuleCall_4_2_1_0 = (RuleCall)cGroup_4_2_1.eContents().get(0);
		private final Assignment cExpressionAssignment_4_2_1_1 = (Assignment)cGroup_4_2_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_4_2_1_1_0 = (RuleCall)cExpressionAssignment_4_2_1_1.eContents().get(0);
		
		//DataInstanceDeclaration:
		//	definingIdentifierList=DefiningIdentifierList DP aliased?=ALIASED_? constant?=CONSTANT_?
		//	(subtypeIndication=SubtypeIndication (DPE expression=Expression | RENAMES_ objectName=Name)?
		//	| anonymousAccessDefinition=AnonymousAccessDefinition (DPE expression=Expression | RENAMES_ objectName=Name)?
		//	| arrayTypeDefinition=ArrayTypeDefinition (DPE expression=Expression)?);
		@Override public ParserRule getRule() { return rule; }

		//definingIdentifierList=DefiningIdentifierList DP aliased?=ALIASED_? constant?=CONSTANT_?
		//(subtypeIndication=SubtypeIndication (DPE expression=Expression | RENAMES_ objectName=Name)? |
		//anonymousAccessDefinition=AnonymousAccessDefinition (DPE expression=Expression | RENAMES_ objectName=Name)? |
		//arrayTypeDefinition=ArrayTypeDefinition (DPE expression=Expression)?)
		public Group getGroup() { return cGroup; }

		//definingIdentifierList=DefiningIdentifierList
		public Assignment getDefiningIdentifierListAssignment_0() { return cDefiningIdentifierListAssignment_0; }

		//DefiningIdentifierList
		public RuleCall getDefiningIdentifierListDefiningIdentifierListParserRuleCall_0_0() { return cDefiningIdentifierListDefiningIdentifierListParserRuleCall_0_0; }

		//DP
		public RuleCall getDPTerminalRuleCall_1() { return cDPTerminalRuleCall_1; }

		//aliased?=ALIASED_?
		public Assignment getAliasedAssignment_2() { return cAliasedAssignment_2; }

		//ALIASED_
		public RuleCall getAliasedALIASED_TerminalRuleCall_2_0() { return cAliasedALIASED_TerminalRuleCall_2_0; }

		//constant?=CONSTANT_?
		public Assignment getConstantAssignment_3() { return cConstantAssignment_3; }

		//CONSTANT_
		public RuleCall getConstantCONSTANT_TerminalRuleCall_3_0() { return cConstantCONSTANT_TerminalRuleCall_3_0; }

		//(subtypeIndication=SubtypeIndication (DPE expression=Expression | RENAMES_ objectName=Name)? |
		//anonymousAccessDefinition=AnonymousAccessDefinition (DPE expression=Expression | RENAMES_ objectName=Name)? |
		//arrayTypeDefinition=ArrayTypeDefinition (DPE expression=Expression)?)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//subtypeIndication=SubtypeIndication (DPE expression=Expression | RENAMES_ objectName=Name)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//subtypeIndication=SubtypeIndication
		public Assignment getSubtypeIndicationAssignment_4_0_0() { return cSubtypeIndicationAssignment_4_0_0; }

		//SubtypeIndication
		public RuleCall getSubtypeIndicationSubtypeIndicationParserRuleCall_4_0_0_0() { return cSubtypeIndicationSubtypeIndicationParserRuleCall_4_0_0_0; }

		//(DPE expression=Expression | RENAMES_ objectName=Name)?
		public Alternatives getAlternatives_4_0_1() { return cAlternatives_4_0_1; }

		//DPE expression=Expression
		public Group getGroup_4_0_1_0() { return cGroup_4_0_1_0; }

		//DPE
		public RuleCall getDPETerminalRuleCall_4_0_1_0_0() { return cDPETerminalRuleCall_4_0_1_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_4_0_1_0_1() { return cExpressionAssignment_4_0_1_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0_1_0_1_0() { return cExpressionExpressionParserRuleCall_4_0_1_0_1_0; }

		//RENAMES_ objectName=Name
		public Group getGroup_4_0_1_1() { return cGroup_4_0_1_1; }

		//RENAMES_
		public RuleCall getRENAMES_TerminalRuleCall_4_0_1_1_0() { return cRENAMES_TerminalRuleCall_4_0_1_1_0; }

		//objectName=Name
		public Assignment getObjectNameAssignment_4_0_1_1_1() { return cObjectNameAssignment_4_0_1_1_1; }

		//Name
		public RuleCall getObjectNameNameParserRuleCall_4_0_1_1_1_0() { return cObjectNameNameParserRuleCall_4_0_1_1_1_0; }

		//anonymousAccessDefinition=AnonymousAccessDefinition (DPE expression=Expression | RENAMES_ objectName=Name)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//anonymousAccessDefinition=AnonymousAccessDefinition
		public Assignment getAnonymousAccessDefinitionAssignment_4_1_0() { return cAnonymousAccessDefinitionAssignment_4_1_0; }

		//AnonymousAccessDefinition
		public RuleCall getAnonymousAccessDefinitionAnonymousAccessDefinitionParserRuleCall_4_1_0_0() { return cAnonymousAccessDefinitionAnonymousAccessDefinitionParserRuleCall_4_1_0_0; }

		//(DPE expression=Expression | RENAMES_ objectName=Name)?
		public Alternatives getAlternatives_4_1_1() { return cAlternatives_4_1_1; }

		//DPE expression=Expression
		public Group getGroup_4_1_1_0() { return cGroup_4_1_1_0; }

		//DPE
		public RuleCall getDPETerminalRuleCall_4_1_1_0_0() { return cDPETerminalRuleCall_4_1_1_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_4_1_1_0_1() { return cExpressionAssignment_4_1_1_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_1_1_0_1_0() { return cExpressionExpressionParserRuleCall_4_1_1_0_1_0; }

		//RENAMES_ objectName=Name
		public Group getGroup_4_1_1_1() { return cGroup_4_1_1_1; }

		//RENAMES_
		public RuleCall getRENAMES_TerminalRuleCall_4_1_1_1_0() { return cRENAMES_TerminalRuleCall_4_1_1_1_0; }

		//objectName=Name
		public Assignment getObjectNameAssignment_4_1_1_1_1() { return cObjectNameAssignment_4_1_1_1_1; }

		//Name
		public RuleCall getObjectNameNameParserRuleCall_4_1_1_1_1_0() { return cObjectNameNameParserRuleCall_4_1_1_1_1_0; }

		//arrayTypeDefinition=ArrayTypeDefinition (DPE expression=Expression)?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//arrayTypeDefinition=ArrayTypeDefinition
		public Assignment getArrayTypeDefinitionAssignment_4_2_0() { return cArrayTypeDefinitionAssignment_4_2_0; }

		//ArrayTypeDefinition
		public RuleCall getArrayTypeDefinitionArrayTypeDefinitionParserRuleCall_4_2_0_0() { return cArrayTypeDefinitionArrayTypeDefinitionParserRuleCall_4_2_0_0; }

		//(DPE expression=Expression)?
		public Group getGroup_4_2_1() { return cGroup_4_2_1; }

		//DPE
		public RuleCall getDPETerminalRuleCall_4_2_1_0() { return cDPETerminalRuleCall_4_2_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_4_2_1_1() { return cExpressionAssignment_4_2_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_2_1_1_0() { return cExpressionExpressionParserRuleCall_4_2_1_1_0; }
	}

	public class SingleProtectedDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SingleProtectedDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPROTECTED_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cNEW_TerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cInterfaceListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInterfaceListInterfaceListParserRuleCall_3_1_0 = (RuleCall)cInterfaceListAssignment_3_1.eContents().get(0);
		private final RuleCall cWITH_TerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Assignment cProtectedDefinitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProtectedDefinitionProtectedDefinitionParserRuleCall_4_0 = (RuleCall)cProtectedDefinitionAssignment_4.eContents().get(0);
		
		//// TODO: for RENAMES alternatives, check Defining_identifier_list's size = 1 and Subtype_indication has no constraint.
		//SingleProtectedDeclaration:
		//	PROTECTED_ name=IDENTIFIER IS_ (NEW_ interfaceList=InterfaceList WITH_)? protectedDefinition=ProtectedDefinition;
		@Override public ParserRule getRule() { return rule; }

		//PROTECTED_ name=IDENTIFIER IS_ (NEW_ interfaceList=InterfaceList WITH_)? protectedDefinition=ProtectedDefinition
		public Group getGroup() { return cGroup; }

		//PROTECTED_
		public RuleCall getPROTECTED_TerminalRuleCall_0() { return cPROTECTED_TerminalRuleCall_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_2() { return cIS_TerminalRuleCall_2; }

		//(NEW_ interfaceList=InterfaceList WITH_)?
		public Group getGroup_3() { return cGroup_3; }

		//NEW_
		public RuleCall getNEW_TerminalRuleCall_3_0() { return cNEW_TerminalRuleCall_3_0; }

		//interfaceList=InterfaceList
		public Assignment getInterfaceListAssignment_3_1() { return cInterfaceListAssignment_3_1; }

		//InterfaceList
		public RuleCall getInterfaceListInterfaceListParserRuleCall_3_1_0() { return cInterfaceListInterfaceListParserRuleCall_3_1_0; }

		//WITH_
		public RuleCall getWITH_TerminalRuleCall_3_2() { return cWITH_TerminalRuleCall_3_2; }

		//protectedDefinition=ProtectedDefinition
		public Assignment getProtectedDefinitionAssignment_4() { return cProtectedDefinitionAssignment_4; }

		//ProtectedDefinition
		public RuleCall getProtectedDefinitionProtectedDefinitionParserRuleCall_4_0() { return cProtectedDefinitionProtectedDefinitionParserRuleCall_4_0; }
	}

	public class PragmaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Pragma");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPRAGMA_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cPGTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cPragmaArgumentAssociationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPragmaArgumentAssociationPragmaArgumentAssociationParserRuleCall_2_1_0 = (RuleCall)cPragmaArgumentAssociationAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cVTerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Assignment cPragmaArgumentAssociationAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cPragmaArgumentAssociationPragmaArgumentAssociationParserRuleCall_2_2_1_0 = (RuleCall)cPragmaArgumentAssociationAssignment_2_2_1.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		//Pragma:
		//	PRAGMA_ name=IDENTIFIER (PG pragmaArgumentAssociation+=PragmaArgumentAssociation (V
		//	pragmaArgumentAssociation+=PragmaArgumentAssociation)* PD)?;
		@Override public ParserRule getRule() { return rule; }

		//PRAGMA_ name=IDENTIFIER (PG pragmaArgumentAssociation+=PragmaArgumentAssociation (V
		//pragmaArgumentAssociation+=PragmaArgumentAssociation)* PD)?
		public Group getGroup() { return cGroup; }

		//PRAGMA_
		public RuleCall getPRAGMA_TerminalRuleCall_0() { return cPRAGMA_TerminalRuleCall_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0; }

		//(PG pragmaArgumentAssociation+=PragmaArgumentAssociation (V pragmaArgumentAssociation+=PragmaArgumentAssociation)* PD)?
		public Group getGroup_2() { return cGroup_2; }

		//PG
		public RuleCall getPGTerminalRuleCall_2_0() { return cPGTerminalRuleCall_2_0; }

		//pragmaArgumentAssociation+=PragmaArgumentAssociation
		public Assignment getPragmaArgumentAssociationAssignment_2_1() { return cPragmaArgumentAssociationAssignment_2_1; }

		//PragmaArgumentAssociation
		public RuleCall getPragmaArgumentAssociationPragmaArgumentAssociationParserRuleCall_2_1_0() { return cPragmaArgumentAssociationPragmaArgumentAssociationParserRuleCall_2_1_0; }

		//(V pragmaArgumentAssociation+=PragmaArgumentAssociation)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//V
		public RuleCall getVTerminalRuleCall_2_2_0() { return cVTerminalRuleCall_2_2_0; }

		//pragmaArgumentAssociation+=PragmaArgumentAssociation
		public Assignment getPragmaArgumentAssociationAssignment_2_2_1() { return cPragmaArgumentAssociationAssignment_2_2_1; }

		//PragmaArgumentAssociation
		public RuleCall getPragmaArgumentAssociationPragmaArgumentAssociationParserRuleCall_2_2_1_0() { return cPragmaArgumentAssociationPragmaArgumentAssociationParserRuleCall_2_2_1_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_2_3() { return cPDTerminalRuleCall_2_3; }
	}

	public class PragmaArgumentAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PragmaArgumentAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final RuleCall cFLECHETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cEffectiveArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEffectiveArgumentExpressionParserRuleCall_1_0 = (RuleCall)cEffectiveArgumentAssignment_1.eContents().get(0);
		
		//PragmaArgumentAssociation:
		//	(name=IDENTIFIER FLECHE)? effectiveArgument=Expression;
		@Override public ParserRule getRule() { return rule; }

		//(name=IDENTIFIER FLECHE)? effectiveArgument=Expression
		public Group getGroup() { return cGroup; }

		//(name=IDENTIFIER FLECHE)?
		public Group getGroup_0() { return cGroup_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0_0_0() { return cNameIDENTIFIERTerminalRuleCall_0_0_0; }

		//FLECHE
		public RuleCall getFLECHETerminalRuleCall_0_1() { return cFLECHETerminalRuleCall_0_1; }

		//effectiveArgument=Expression
		public Assignment getEffectiveArgumentAssignment_1() { return cEffectiveArgumentAssignment_1; }

		//Expression
		public RuleCall getEffectiveArgumentExpressionParserRuleCall_1_0() { return cEffectiveArgumentExpressionParserRuleCall_1_0; }
	}

	public class SubtypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SubtypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSUBTYPE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSubtypeIndicationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubtypeIndicationSubtypeIndicationParserRuleCall_3_0 = (RuleCall)cSubtypeIndicationAssignment_3.eContents().get(0);
		
		//SubtypeDeclaration:
		//	SUBTYPE_ name=IDENTIFIER IS_ subtypeIndication=SubtypeIndication;
		@Override public ParserRule getRule() { return rule; }

		//SUBTYPE_ name=IDENTIFIER IS_ subtypeIndication=SubtypeIndication
		public Group getGroup() { return cGroup; }

		//SUBTYPE_
		public RuleCall getSUBTYPE_TerminalRuleCall_0() { return cSUBTYPE_TerminalRuleCall_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_2() { return cIS_TerminalRuleCall_2; }

		//subtypeIndication=SubtypeIndication
		public Assignment getSubtypeIndicationAssignment_3() { return cSubtypeIndicationAssignment_3; }

		//SubtypeIndication
		public RuleCall getSubtypeIndicationSubtypeIndicationParserRuleCall_3_0() { return cSubtypeIndicationSubtypeIndicationParserRuleCall_3_0; }
	}

	public class NumberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NumberDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdListDefiningIdentifierListParserRuleCall_0_0 = (RuleCall)cIdListAssignment_0.eContents().get(0);
		private final RuleCall cDPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCONSTANT_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cDPETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStaticExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStaticExpressionExpressionParserRuleCall_4_0 = (RuleCall)cStaticExpressionAssignment_4.eContents().get(0);
		
		//NumberDeclaration:
		//	idList=DefiningIdentifierList DP CONSTANT_ DPE staticExpression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//idList=DefiningIdentifierList DP CONSTANT_ DPE staticExpression=Expression
		public Group getGroup() { return cGroup; }

		//idList=DefiningIdentifierList
		public Assignment getIdListAssignment_0() { return cIdListAssignment_0; }

		//DefiningIdentifierList
		public RuleCall getIdListDefiningIdentifierListParserRuleCall_0_0() { return cIdListDefiningIdentifierListParserRuleCall_0_0; }

		//DP
		public RuleCall getDPTerminalRuleCall_1() { return cDPTerminalRuleCall_1; }

		//CONSTANT_
		public RuleCall getCONSTANT_TerminalRuleCall_2() { return cCONSTANT_TerminalRuleCall_2; }

		//DPE
		public RuleCall getDPETerminalRuleCall_3() { return cDPETerminalRuleCall_3; }

		//staticExpression=Expression
		public Assignment getStaticExpressionAssignment_4() { return cStaticExpressionAssignment_4; }

		//Expression
		public RuleCall getStaticExpressionExpressionParserRuleCall_4_0() { return cStaticExpressionExpressionParserRuleCall_4_0; }
	}

	public class AssignmentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AssignmentStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableNameNameParserRuleCall_0_0 = (RuleCall)cVariableNameAssignment_0.eContents().get(0);
		private final RuleCall cDPETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cInitialValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialValueExpressionParserRuleCall_2_0 = (RuleCall)cInitialValueAssignment_2.eContents().get(0);
		
		//AssignmentStatement:
		//	variableName=Name DPE initialValue=Expression;
		@Override public ParserRule getRule() { return rule; }

		//variableName=Name DPE initialValue=Expression
		public Group getGroup() { return cGroup; }

		//variableName=Name
		public Assignment getVariableNameAssignment_0() { return cVariableNameAssignment_0; }

		//Name
		public RuleCall getVariableNameNameParserRuleCall_0_0() { return cVariableNameNameParserRuleCall_0_0; }

		//DPE
		public RuleCall getDPETerminalRuleCall_1() { return cDPETerminalRuleCall_1; }

		//initialValue=Expression
		public Assignment getInitialValueAssignment_2() { return cInitialValueAssignment_2; }

		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_2_0() { return cInitialValueExpressionParserRuleCall_2_0; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIF_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIfConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIfConditionExpressionParserRuleCall_1_0 = (RuleCall)cIfConditionAssignment_1.eContents().get(0);
		private final RuleCall cTHEN_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cThenStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenStatementsSequenceOfStatementsParserRuleCall_3_0 = (RuleCall)cThenStatementsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cELSIF_TerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cElsifConditionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElsifConditionsExpressionParserRuleCall_4_1_0 = (RuleCall)cElsifConditionsAssignment_4_1.eContents().get(0);
		private final RuleCall cTHEN_TerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Assignment cElsifStatementsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cElsifStatementsSequenceOfStatementsParserRuleCall_4_3_0 = (RuleCall)cElsifStatementsAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cELSE_TerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cElseStatementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementsSequenceOfStatementsParserRuleCall_5_1_0 = (RuleCall)cElseStatementsAssignment_5_1.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cIF_TerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//IfStatement:
		//	IF_ ifCondition=Expression THEN_
		//	thenStatements=SequenceOfStatements (ELSIF_ elsifConditions+=Expression THEN_
		//	elsifStatements+=SequenceOfStatements)* (ELSE_ elseStatements=SequenceOfStatements)?
		//	END_ IF_;
		@Override public ParserRule getRule() { return rule; }

		//IF_ ifCondition=Expression THEN_ thenStatements=SequenceOfStatements (ELSIF_ elsifConditions+=Expression THEN_
		//elsifStatements+=SequenceOfStatements)* (ELSE_ elseStatements=SequenceOfStatements)? END_ IF_
		public Group getGroup() { return cGroup; }

		//IF_
		public RuleCall getIF_TerminalRuleCall_0() { return cIF_TerminalRuleCall_0; }

		//ifCondition=Expression
		public Assignment getIfConditionAssignment_1() { return cIfConditionAssignment_1; }

		//Expression
		public RuleCall getIfConditionExpressionParserRuleCall_1_0() { return cIfConditionExpressionParserRuleCall_1_0; }

		//THEN_
		public RuleCall getTHEN_TerminalRuleCall_2() { return cTHEN_TerminalRuleCall_2; }

		//thenStatements=SequenceOfStatements
		public Assignment getThenStatementsAssignment_3() { return cThenStatementsAssignment_3; }

		//SequenceOfStatements
		public RuleCall getThenStatementsSequenceOfStatementsParserRuleCall_3_0() { return cThenStatementsSequenceOfStatementsParserRuleCall_3_0; }

		//(ELSIF_ elsifConditions+=Expression THEN_ elsifStatements+=SequenceOfStatements)*
		public Group getGroup_4() { return cGroup_4; }

		//ELSIF_
		public RuleCall getELSIF_TerminalRuleCall_4_0() { return cELSIF_TerminalRuleCall_4_0; }

		//elsifConditions+=Expression
		public Assignment getElsifConditionsAssignment_4_1() { return cElsifConditionsAssignment_4_1; }

		//Expression
		public RuleCall getElsifConditionsExpressionParserRuleCall_4_1_0() { return cElsifConditionsExpressionParserRuleCall_4_1_0; }

		//THEN_
		public RuleCall getTHEN_TerminalRuleCall_4_2() { return cTHEN_TerminalRuleCall_4_2; }

		//elsifStatements+=SequenceOfStatements
		public Assignment getElsifStatementsAssignment_4_3() { return cElsifStatementsAssignment_4_3; }

		//SequenceOfStatements
		public RuleCall getElsifStatementsSequenceOfStatementsParserRuleCall_4_3_0() { return cElsifStatementsSequenceOfStatementsParserRuleCall_4_3_0; }

		//(ELSE_ elseStatements=SequenceOfStatements)?
		public Group getGroup_5() { return cGroup_5; }

		//ELSE_
		public RuleCall getELSE_TerminalRuleCall_5_0() { return cELSE_TerminalRuleCall_5_0; }

		//elseStatements=SequenceOfStatements
		public Assignment getElseStatementsAssignment_5_1() { return cElseStatementsAssignment_5_1; }

		//SequenceOfStatements
		public RuleCall getElseStatementsSequenceOfStatementsParserRuleCall_5_1_0() { return cElseStatementsSequenceOfStatementsParserRuleCall_5_1_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_6() { return cEND_TerminalRuleCall_6; }

		//IF_
		public RuleCall getIF_TerminalRuleCall_7() { return cIF_TerminalRuleCall_7; }
	}

	public class CaseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.CaseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCASE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cCaseValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCaseValueExpressionParserRuleCall_1_0 = (RuleCall)cCaseValueAssignment_1.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cCaseStatementAlternativesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCaseStatementAlternativesCaseStatementAlternativeParserRuleCall_3_0 = (RuleCall)cCaseStatementAlternativesAssignment_3.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cCASE_TerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//CaseStatement:
		//	CASE_ caseValue=Expression IS_
		//	caseStatementAlternatives+=CaseStatementAlternative+
		//	END_ CASE_;
		@Override public ParserRule getRule() { return rule; }

		//CASE_ caseValue=Expression IS_ caseStatementAlternatives+=CaseStatementAlternative+ END_ CASE_
		public Group getGroup() { return cGroup; }

		//CASE_
		public RuleCall getCASE_TerminalRuleCall_0() { return cCASE_TerminalRuleCall_0; }

		//caseValue=Expression
		public Assignment getCaseValueAssignment_1() { return cCaseValueAssignment_1; }

		//Expression
		public RuleCall getCaseValueExpressionParserRuleCall_1_0() { return cCaseValueExpressionParserRuleCall_1_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_2() { return cIS_TerminalRuleCall_2; }

		//caseStatementAlternatives+=CaseStatementAlternative+
		public Assignment getCaseStatementAlternativesAssignment_3() { return cCaseStatementAlternativesAssignment_3; }

		//CaseStatementAlternative
		public RuleCall getCaseStatementAlternativesCaseStatementAlternativeParserRuleCall_3_0() { return cCaseStatementAlternativesCaseStatementAlternativeParserRuleCall_3_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_4() { return cEND_TerminalRuleCall_4; }

		//CASE_
		public RuleCall getCASE_TerminalRuleCall_5() { return cCASE_TerminalRuleCall_5; }
	}

	public class CaseStatementAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.CaseStatementAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHEN_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cDiscreteChoiceListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDiscreteChoiceListDiscreteChoiceListParserRuleCall_1_0 = (RuleCall)cDiscreteChoiceListAssignment_1.eContents().get(0);
		private final RuleCall cFLECHETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSequenceOfStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSequenceOfStatementsSequenceOfStatementsParserRuleCall_3_0 = (RuleCall)cSequenceOfStatementsAssignment_3.eContents().get(0);
		
		//CaseStatementAlternative:
		//	WHEN_ discreteChoiceList=DiscreteChoiceList FLECHE sequenceOfStatements=SequenceOfStatements;
		@Override public ParserRule getRule() { return rule; }

		//WHEN_ discreteChoiceList=DiscreteChoiceList FLECHE sequenceOfStatements=SequenceOfStatements
		public Group getGroup() { return cGroup; }

		//WHEN_
		public RuleCall getWHEN_TerminalRuleCall_0() { return cWHEN_TerminalRuleCall_0; }

		//discreteChoiceList=DiscreteChoiceList
		public Assignment getDiscreteChoiceListAssignment_1() { return cDiscreteChoiceListAssignment_1; }

		//DiscreteChoiceList
		public RuleCall getDiscreteChoiceListDiscreteChoiceListParserRuleCall_1_0() { return cDiscreteChoiceListDiscreteChoiceListParserRuleCall_1_0; }

		//FLECHE
		public RuleCall getFLECHETerminalRuleCall_2() { return cFLECHETerminalRuleCall_2; }

		//sequenceOfStatements=SequenceOfStatements
		public Assignment getSequenceOfStatementsAssignment_3() { return cSequenceOfStatementsAssignment_3; }

		//SequenceOfStatements
		public RuleCall getSequenceOfStatementsSequenceOfStatementsParserRuleCall_3_0() { return cSequenceOfStatementsSequenceOfStatementsParserRuleCall_3_0; }
	}

	public class LoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.LoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final RuleCall cDPTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cIterationSchemeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIterationSchemeIterationSchemeParserRuleCall_1_0 = (RuleCall)cIterationSchemeAssignment_1.eContents().get(0);
		private final RuleCall cLOOP_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSequenceOfStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSequenceOfStatementsSequenceOfStatementsParserRuleCall_3_0 = (RuleCall)cSequenceOfStatementsAssignment_3.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cLOOP_TerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cSameNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSameNameIDENTIFIERTerminalRuleCall_6_0 = (RuleCall)cSameNameAssignment_6.eContents().get(0);
		
		//LoopStatement:
		//	(name=IDENTIFIER DP)? iterationScheme=IterationScheme?
		//	LOOP_
		//	sequenceOfStatements=SequenceOfStatements
		//	END_ LOOP_ sameName=IDENTIFIER?;
		@Override public ParserRule getRule() { return rule; }

		//(name=IDENTIFIER DP)? iterationScheme=IterationScheme? LOOP_ sequenceOfStatements=SequenceOfStatements END_ LOOP_
		//sameName=IDENTIFIER?
		public Group getGroup() { return cGroup; }

		//(name=IDENTIFIER DP)?
		public Group getGroup_0() { return cGroup_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0_0_0() { return cNameIDENTIFIERTerminalRuleCall_0_0_0; }

		//DP
		public RuleCall getDPTerminalRuleCall_0_1() { return cDPTerminalRuleCall_0_1; }

		//iterationScheme=IterationScheme?
		public Assignment getIterationSchemeAssignment_1() { return cIterationSchemeAssignment_1; }

		//IterationScheme
		public RuleCall getIterationSchemeIterationSchemeParserRuleCall_1_0() { return cIterationSchemeIterationSchemeParserRuleCall_1_0; }

		//LOOP_
		public RuleCall getLOOP_TerminalRuleCall_2() { return cLOOP_TerminalRuleCall_2; }

		//sequenceOfStatements=SequenceOfStatements
		public Assignment getSequenceOfStatementsAssignment_3() { return cSequenceOfStatementsAssignment_3; }

		//SequenceOfStatements
		public RuleCall getSequenceOfStatementsSequenceOfStatementsParserRuleCall_3_0() { return cSequenceOfStatementsSequenceOfStatementsParserRuleCall_3_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_4() { return cEND_TerminalRuleCall_4; }

		//LOOP_
		public RuleCall getLOOP_TerminalRuleCall_5() { return cLOOP_TerminalRuleCall_5; }

		//sameName=IDENTIFIER?
		public Assignment getSameNameAssignment_6() { return cSameNameAssignment_6; }

		//IDENTIFIER
		public RuleCall getSameNameIDENTIFIERTerminalRuleCall_6_0() { return cSameNameIDENTIFIERTerminalRuleCall_6_0; }
	}

	public class IterationSchemeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.IterationScheme");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cWHILE_TerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cConditionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_0_1_0 = (RuleCall)cConditionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cFOR_TerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cIterationSpecificationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIterationSpecificationLoopParameterSpecificationParserRuleCall_1_1_0 = (RuleCall)cIterationSpecificationAssignment_1_1.eContents().get(0);
		
		//IterationScheme:
		//	WHILE_ condition=Expression
		//	| FOR_ iterationSpecification=LoopParameterSpecification;
		@Override public ParserRule getRule() { return rule; }

		//WHILE_ condition=Expression | FOR_ iterationSpecification=LoopParameterSpecification
		public Alternatives getAlternatives() { return cAlternatives; }

		//WHILE_ condition=Expression
		public Group getGroup_0() { return cGroup_0; }

		//WHILE_
		public RuleCall getWHILE_TerminalRuleCall_0_0() { return cWHILE_TerminalRuleCall_0_0; }

		//condition=Expression
		public Assignment getConditionAssignment_0_1() { return cConditionAssignment_0_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_0_1_0() { return cConditionExpressionParserRuleCall_0_1_0; }

		//FOR_ iterationSpecification=LoopParameterSpecification
		public Group getGroup_1() { return cGroup_1; }

		//FOR_
		public RuleCall getFOR_TerminalRuleCall_1_0() { return cFOR_TerminalRuleCall_1_0; }

		//iterationSpecification=LoopParameterSpecification
		public Assignment getIterationSpecificationAssignment_1_1() { return cIterationSpecificationAssignment_1_1; }

		//LoopParameterSpecification
		public RuleCall getIterationSpecificationLoopParameterSpecificationParserRuleCall_1_1_0() { return cIterationSpecificationLoopParameterSpecificationParserRuleCall_1_1_0; }
	}

	public class LoopParameterSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.LoopParameterSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cIN_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cREVERSE_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cDiscreteSubtypeDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDiscreteSubtypeDefinitionDiscreteSubtypeDefinitionParserRuleCall_3_0 = (RuleCall)cDiscreteSubtypeDefinitionAssignment_3.eContents().get(0);
		
		//LoopParameterSpecification:
		//	identifier=IDENTIFIER IN_ REVERSE_? discreteSubtypeDefinition=DiscreteSubtypeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//identifier=IDENTIFIER IN_ REVERSE_? discreteSubtypeDefinition=DiscreteSubtypeDefinition
		public Group getGroup() { return cGroup; }

		//identifier=IDENTIFIER
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//IDENTIFIER
		public RuleCall getIdentifierIDENTIFIERTerminalRuleCall_0_0() { return cIdentifierIDENTIFIERTerminalRuleCall_0_0; }

		//IN_
		public RuleCall getIN_TerminalRuleCall_1() { return cIN_TerminalRuleCall_1; }

		//REVERSE_?
		public RuleCall getREVERSE_TerminalRuleCall_2() { return cREVERSE_TerminalRuleCall_2; }

		//discreteSubtypeDefinition=DiscreteSubtypeDefinition
		public Assignment getDiscreteSubtypeDefinitionAssignment_3() { return cDiscreteSubtypeDefinitionAssignment_3; }

		//DiscreteSubtypeDefinition
		public RuleCall getDiscreteSubtypeDefinitionDiscreteSubtypeDefinitionParserRuleCall_3_0() { return cDiscreteSubtypeDefinitionDiscreteSubtypeDefinitionParserRuleCall_3_0; }
	}

	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.BlockStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cBlockStatementIdentifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cBlockStatementIdentifierIDENTIFIERTerminalRuleCall_0_0_0 = (RuleCall)cBlockStatementIdentifierAssignment_0_0.eContents().get(0);
		private final RuleCall cDPTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDECLARE_TerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cDeclarativeItemsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cDeclarativeItemsDeclarativeItemParserRuleCall_1_1_0_0 = (RuleCall)cDeclarativeItemsAssignment_1_1_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cBEGIN_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cHandledSequenceOfStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_3_0 = (RuleCall)cHandledSequenceOfStatementsAssignment_3.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cIDENTIFIERTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//BlockStatement:
		//	(blockStatementIdentifier=IDENTIFIER DP)? (DECLARE_ (declarativeItems+=DeclarativeItem PV)*)?
		//	BEGIN_
		//	handledSequenceOfStatements=HandledSequenceOfStatements
		//	END_ IDENTIFIER?;
		@Override public ParserRule getRule() { return rule; }

		//(blockStatementIdentifier=IDENTIFIER DP)? (DECLARE_ (declarativeItems+=DeclarativeItem PV)*)? BEGIN_
		//handledSequenceOfStatements=HandledSequenceOfStatements END_ IDENTIFIER?
		public Group getGroup() { return cGroup; }

		//(blockStatementIdentifier=IDENTIFIER DP)?
		public Group getGroup_0() { return cGroup_0; }

		//blockStatementIdentifier=IDENTIFIER
		public Assignment getBlockStatementIdentifierAssignment_0_0() { return cBlockStatementIdentifierAssignment_0_0; }

		//IDENTIFIER
		public RuleCall getBlockStatementIdentifierIDENTIFIERTerminalRuleCall_0_0_0() { return cBlockStatementIdentifierIDENTIFIERTerminalRuleCall_0_0_0; }

		//DP
		public RuleCall getDPTerminalRuleCall_0_1() { return cDPTerminalRuleCall_0_1; }

		//(DECLARE_ (declarativeItems+=DeclarativeItem PV)*)?
		public Group getGroup_1() { return cGroup_1; }

		//DECLARE_
		public RuleCall getDECLARE_TerminalRuleCall_1_0() { return cDECLARE_TerminalRuleCall_1_0; }

		//(declarativeItems+=DeclarativeItem PV)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//declarativeItems+=DeclarativeItem
		public Assignment getDeclarativeItemsAssignment_1_1_0() { return cDeclarativeItemsAssignment_1_1_0; }

		//DeclarativeItem
		public RuleCall getDeclarativeItemsDeclarativeItemParserRuleCall_1_1_0_0() { return cDeclarativeItemsDeclarativeItemParserRuleCall_1_1_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_1_1_1() { return cPVTerminalRuleCall_1_1_1; }

		//BEGIN_
		public RuleCall getBEGIN_TerminalRuleCall_2() { return cBEGIN_TerminalRuleCall_2; }

		//handledSequenceOfStatements=HandledSequenceOfStatements
		public Assignment getHandledSequenceOfStatementsAssignment_3() { return cHandledSequenceOfStatementsAssignment_3; }

		//HandledSequenceOfStatements
		public RuleCall getHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_3_0() { return cHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_3_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_4() { return cEND_TerminalRuleCall_4; }

		//IDENTIFIER?
		public RuleCall getIDENTIFIERTerminalRuleCall_5() { return cIDENTIFIERTerminalRuleCall_5; }
	}

	public class ExitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ExitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cEXIT_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameLoopStatementCrossReference_2_0 = (CrossReference)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameLoopStatementIDENTIFIERTerminalRuleCall_2_0_1 = (RuleCall)cNameLoopStatementCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cWHEN_TerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_3_1_0 = (RuleCall)cConditionAssignment_3_1.eContents().get(0);
		
		//ExitStatement:
		//	{ExitStatement} EXIT_ name=[LoopStatement|IDENTIFIER]? (WHEN_ condition=Expression)?;
		@Override public ParserRule getRule() { return rule; }

		//{ExitStatement} EXIT_ name=[LoopStatement|IDENTIFIER]? (WHEN_ condition=Expression)?
		public Group getGroup() { return cGroup; }

		//{ExitStatement}
		public Action getExitStatementAction_0() { return cExitStatementAction_0; }

		//EXIT_
		public RuleCall getEXIT_TerminalRuleCall_1() { return cEXIT_TerminalRuleCall_1; }

		//name=[LoopStatement|IDENTIFIER]?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//[LoopStatement|IDENTIFIER]
		public CrossReference getNameLoopStatementCrossReference_2_0() { return cNameLoopStatementCrossReference_2_0; }

		//IDENTIFIER
		public RuleCall getNameLoopStatementIDENTIFIERTerminalRuleCall_2_0_1() { return cNameLoopStatementIDENTIFIERTerminalRuleCall_2_0_1; }

		//(WHEN_ condition=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//WHEN_
		public RuleCall getWHEN_TerminalRuleCall_3_0() { return cWHEN_TerminalRuleCall_3_0; }

		//condition=Expression
		public Assignment getConditionAssignment_3_1() { return cConditionAssignment_3_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_3_1_0() { return cConditionExpressionParserRuleCall_3_1_0; }
	}

	public class GotoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.GotoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGOTO_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cLabelIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelIdIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cLabelIdAssignment_1.eContents().get(0);
		
		//GotoStatement:
		//	GOTO_ labelId=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }

		//GOTO_ labelId=IDENTIFIER
		public Group getGroup() { return cGroup; }

		//GOTO_
		public RuleCall getGOTO_TerminalRuleCall_0() { return cGOTO_TerminalRuleCall_0; }

		//labelId=IDENTIFIER
		public Assignment getLabelIdAssignment_1() { return cLabelIdAssignment_1; }

		//IDENTIFIER
		public RuleCall getLabelIdIDENTIFIERTerminalRuleCall_1_0() { return cLabelIdIDENTIFIERTerminalRuleCall_1_0; }
	}

	public class ProcedureOrEntryCallStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ProcedureOrEntryCallStatement");
		private final Assignment cCalleeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCalleeNameParserRuleCall_0 = (RuleCall)cCalleeAssignment.eContents().get(0);
		
		//ProcedureOrEntryCallStatement:
		//	callee=Name;
		@Override public ParserRule getRule() { return rule; }

		//callee=Name
		public Assignment getCalleeAssignment() { return cCalleeAssignment; }

		//Name
		public RuleCall getCalleeNameParserRuleCall_0() { return cCalleeNameParserRuleCall_0; }
	}

	public class SimpleReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SimpleReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cRETURN_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cReturnValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnValueExpressionParserRuleCall_2_0 = (RuleCall)cReturnValueAssignment_2.eContents().get(0);
		
		//SimpleReturnStatement:
		//	{SimpleReturnStatement} RETURN_ returnValue=Expression?;
		@Override public ParserRule getRule() { return rule; }

		//{SimpleReturnStatement} RETURN_ returnValue=Expression?
		public Group getGroup() { return cGroup; }

		//{SimpleReturnStatement}
		public Action getSimpleReturnStatementAction_0() { return cSimpleReturnStatementAction_0; }

		//RETURN_
		public RuleCall getRETURN_TerminalRuleCall_1() { return cRETURN_TerminalRuleCall_1; }

		//returnValue=Expression?
		public Assignment getReturnValueAssignment_2() { return cReturnValueAssignment_2; }

		//Expression
		public RuleCall getReturnValueExpressionParserRuleCall_2_0() { return cReturnValueExpressionParserRuleCall_2_0; }
	}

	public class ExtendedReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ExtendedReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRETURN_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final RuleCall cDPTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cALIASED_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cReturnSubtypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReturnSubtypeReturnSubtypeIndicationParserRuleCall_4_0 = (RuleCall)cReturnSubtypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cDPETerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_5_1_0 = (RuleCall)cExpressionAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final RuleCall cDO_TerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Assignment cHandledSequenceOfStatementsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_6_1_0 = (RuleCall)cHandledSequenceOfStatementsAssignment_6_1.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		private final RuleCall cRETURN_TerminalRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		
		//ExtendedReturnStatement:
		//	RETURN_ identifier=IDENTIFIER DP ALIASED_? returnSubtype=ReturnSubtypeIndication (DPE expression=Expression)? (DO_
		//	handledSequenceOfStatements=HandledSequenceOfStatements
		//	END_ RETURN_)?;
		@Override public ParserRule getRule() { return rule; }

		//RETURN_ identifier=IDENTIFIER DP ALIASED_? returnSubtype=ReturnSubtypeIndication (DPE expression=Expression)? (DO_
		//handledSequenceOfStatements=HandledSequenceOfStatements END_ RETURN_)?
		public Group getGroup() { return cGroup; }

		//RETURN_
		public RuleCall getRETURN_TerminalRuleCall_0() { return cRETURN_TerminalRuleCall_0; }

		//identifier=IDENTIFIER
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//IDENTIFIER
		public RuleCall getIdentifierIDENTIFIERTerminalRuleCall_1_0() { return cIdentifierIDENTIFIERTerminalRuleCall_1_0; }

		//DP
		public RuleCall getDPTerminalRuleCall_2() { return cDPTerminalRuleCall_2; }

		//ALIASED_?
		public RuleCall getALIASED_TerminalRuleCall_3() { return cALIASED_TerminalRuleCall_3; }

		//returnSubtype=ReturnSubtypeIndication
		public Assignment getReturnSubtypeAssignment_4() { return cReturnSubtypeAssignment_4; }

		//ReturnSubtypeIndication
		public RuleCall getReturnSubtypeReturnSubtypeIndicationParserRuleCall_4_0() { return cReturnSubtypeReturnSubtypeIndicationParserRuleCall_4_0; }

		//(DPE expression=Expression)?
		public Group getGroup_5() { return cGroup_5; }

		//DPE
		public RuleCall getDPETerminalRuleCall_5_0() { return cDPETerminalRuleCall_5_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_5_1() { return cExpressionAssignment_5_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_1_0() { return cExpressionExpressionParserRuleCall_5_1_0; }

		//(DO_ handledSequenceOfStatements=HandledSequenceOfStatements END_ RETURN_)?
		public Group getGroup_6() { return cGroup_6; }

		//DO_
		public RuleCall getDO_TerminalRuleCall_6_0() { return cDO_TerminalRuleCall_6_0; }

		//handledSequenceOfStatements=HandledSequenceOfStatements
		public Assignment getHandledSequenceOfStatementsAssignment_6_1() { return cHandledSequenceOfStatementsAssignment_6_1; }

		//HandledSequenceOfStatements
		public RuleCall getHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_6_1_0() { return cHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_6_1_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_6_2() { return cEND_TerminalRuleCall_6_2; }

		//RETURN_
		public RuleCall getRETURN_TerminalRuleCall_6_3() { return cRETURN_TerminalRuleCall_6_3; }
	}

	public class ReturnSubtypeIndicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ReturnSubtypeIndication");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubtypeIndicationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnonymousAccessDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ReturnSubtypeIndication:
		//	SubtypeIndication
		//	| AnonymousAccessDefinition;
		@Override public ParserRule getRule() { return rule; }

		//SubtypeIndication | AnonymousAccessDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubtypeIndication
		public RuleCall getSubtypeIndicationParserRuleCall_0() { return cSubtypeIndicationParserRuleCall_0; }

		//AnonymousAccessDefinition
		public RuleCall getAnonymousAccessDefinitionParserRuleCall_1() { return cAnonymousAccessDefinitionParserRuleCall_1; }
	}

	public class PackageBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PackageBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPACKAGE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBODY_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNamePackageDeclarationCrossReference_2_0 = (CrossReference)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNamePackageDeclarationPATHIDENTIFIERParserRuleCall_2_0_1 = (RuleCall)cNamePackageDeclarationCrossReference_2_0.eContents().get(1);
		private final RuleCall cIS_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cDeclarativeItemsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cDeclarativeItemsDeclarativeItemParserRuleCall_4_0_0 = (RuleCall)cDeclarativeItemsAssignment_4_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cBEGIN_TerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cHandledSequenceOfStatementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_5_1_0 = (RuleCall)cHandledSequenceOfStatementsAssignment_5_1.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cEndNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cEndNamePackageDeclarationCrossReference_7_0 = (CrossReference)cEndNameAssignment_7.eContents().get(0);
		private final RuleCall cEndNamePackageDeclarationPATHIDENTIFIERParserRuleCall_7_0_1 = (RuleCall)cEndNamePackageDeclarationCrossReference_7_0.eContents().get(1);
		
		//PackageBody:
		//	PACKAGE_ BODY_ name=[PackageDeclaration|PATHIDENTIFIER] IS_ (declarativeItems+=DeclarativeItem PV)* (BEGIN_
		//	handledSequenceOfStatements=HandledSequenceOfStatements)? END_ endName=[PackageDeclaration|PATHIDENTIFIER]? // TODO: Check endName=name
		//;
		@Override public ParserRule getRule() { return rule; }

		//PACKAGE_ BODY_ name=[PackageDeclaration|PATHIDENTIFIER] IS_ (declarativeItems+=DeclarativeItem PV)* (BEGIN_
		//handledSequenceOfStatements=HandledSequenceOfStatements)? END_ endName=[PackageDeclaration|PATHIDENTIFIER]?
		public Group getGroup() { return cGroup; }

		//PACKAGE_
		public RuleCall getPACKAGE_TerminalRuleCall_0() { return cPACKAGE_TerminalRuleCall_0; }

		//BODY_
		public RuleCall getBODY_TerminalRuleCall_1() { return cBODY_TerminalRuleCall_1; }

		//name=[PackageDeclaration|PATHIDENTIFIER]
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//[PackageDeclaration|PATHIDENTIFIER]
		public CrossReference getNamePackageDeclarationCrossReference_2_0() { return cNamePackageDeclarationCrossReference_2_0; }

		//PATHIDENTIFIER
		public RuleCall getNamePackageDeclarationPATHIDENTIFIERParserRuleCall_2_0_1() { return cNamePackageDeclarationPATHIDENTIFIERParserRuleCall_2_0_1; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_3() { return cIS_TerminalRuleCall_3; }

		//(declarativeItems+=DeclarativeItem PV)*
		public Group getGroup_4() { return cGroup_4; }

		//declarativeItems+=DeclarativeItem
		public Assignment getDeclarativeItemsAssignment_4_0() { return cDeclarativeItemsAssignment_4_0; }

		//DeclarativeItem
		public RuleCall getDeclarativeItemsDeclarativeItemParserRuleCall_4_0_0() { return cDeclarativeItemsDeclarativeItemParserRuleCall_4_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_4_1() { return cPVTerminalRuleCall_4_1; }

		//(BEGIN_ handledSequenceOfStatements=HandledSequenceOfStatements)?
		public Group getGroup_5() { return cGroup_5; }

		//BEGIN_
		public RuleCall getBEGIN_TerminalRuleCall_5_0() { return cBEGIN_TerminalRuleCall_5_0; }

		//handledSequenceOfStatements=HandledSequenceOfStatements
		public Assignment getHandledSequenceOfStatementsAssignment_5_1() { return cHandledSequenceOfStatementsAssignment_5_1; }

		//HandledSequenceOfStatements
		public RuleCall getHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_5_1_0() { return cHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_5_1_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_6() { return cEND_TerminalRuleCall_6; }

		//endName=[PackageDeclaration|PATHIDENTIFIER]?
		public Assignment getEndNameAssignment_7() { return cEndNameAssignment_7; }

		//[PackageDeclaration|PATHIDENTIFIER]
		public CrossReference getEndNamePackageDeclarationCrossReference_7_0() { return cEndNamePackageDeclarationCrossReference_7_0; }

		//PATHIDENTIFIER
		public RuleCall getEndNamePackageDeclarationPATHIDENTIFIERParserRuleCall_7_0_1() { return cEndNamePackageDeclarationPATHIDENTIFIERParserRuleCall_7_0_1; }
	}

	public class TaskDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.TaskDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTaskDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTaskItemsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTaskItemsTaskItemParserRuleCall_1_0_0 = (RuleCall)cTaskItemsAssignment_1_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cPRIVATE_TerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cTaskItemsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cTaskItemsTaskItemParserRuleCall_2_1_0_0 = (RuleCall)cTaskItemsAssignment_2_1_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		
		//TaskDefinition:
		//	{TaskDefinition} (taskItems+=TaskItem PV)* (PRIVATE_ (taskItems+=TaskItem PV)*)?;
		@Override public ParserRule getRule() { return rule; }

		//{TaskDefinition} (taskItems+=TaskItem PV)* (PRIVATE_ (taskItems+=TaskItem PV)*)?
		public Group getGroup() { return cGroup; }

		//{TaskDefinition}
		public Action getTaskDefinitionAction_0() { return cTaskDefinitionAction_0; }

		//(taskItems+=TaskItem PV)*
		public Group getGroup_1() { return cGroup_1; }

		//taskItems+=TaskItem
		public Assignment getTaskItemsAssignment_1_0() { return cTaskItemsAssignment_1_0; }

		//TaskItem
		public RuleCall getTaskItemsTaskItemParserRuleCall_1_0_0() { return cTaskItemsTaskItemParserRuleCall_1_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_1_1() { return cPVTerminalRuleCall_1_1; }

		//(PRIVATE_ (taskItems+=TaskItem PV)*)?
		public Group getGroup_2() { return cGroup_2; }

		//PRIVATE_
		public RuleCall getPRIVATE_TerminalRuleCall_2_0() { return cPRIVATE_TerminalRuleCall_2_0; }

		//(taskItems+=TaskItem PV)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//taskItems+=TaskItem
		public Assignment getTaskItemsAssignment_2_1_0() { return cTaskItemsAssignment_2_1_0; }

		//TaskItem
		public RuleCall getTaskItemsTaskItemParserRuleCall_2_1_0_0() { return cTaskItemsTaskItemParserRuleCall_2_1_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_2_1_1() { return cPVTerminalRuleCall_2_1_1; }
	}

	public class TaskBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.TaskBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTASK_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBODY_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameTaskDeclarationCrossReference_2_0 = (CrossReference)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameTaskDeclarationIDENTIFIERTerminalRuleCall_2_0_1 = (RuleCall)cNameTaskDeclarationCrossReference_2_0.eContents().get(1);
		private final RuleCall cIS_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cDeclarativeItemsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cDeclarativeItemsDeclarativeItemParserRuleCall_4_0_0 = (RuleCall)cDeclarativeItemsAssignment_4_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cBEGIN_TerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cHandledSequenceOfStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_6_0 = (RuleCall)cHandledSequenceOfStatementsAssignment_6.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cEndIdAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cEndIdTaskDeclarationCrossReference_8_0 = (CrossReference)cEndIdAssignment_8.eContents().get(0);
		private final RuleCall cEndIdTaskDeclarationIDENTIFIERTerminalRuleCall_8_0_1 = (RuleCall)cEndIdTaskDeclarationCrossReference_8_0.eContents().get(1);
		
		//TaskBody:
		//	TASK_ BODY_ name=[TaskDeclaration|IDENTIFIER] IS_ (declarativeItems+=DeclarativeItem PV)*
		//	BEGIN_
		//	handledSequenceOfStatements=HandledSequenceOfStatements
		//	END_ endId=[TaskDeclaration|IDENTIFIER]?;
		@Override public ParserRule getRule() { return rule; }

		//TASK_ BODY_ name=[TaskDeclaration|IDENTIFIER] IS_ (declarativeItems+=DeclarativeItem PV)* BEGIN_
		//handledSequenceOfStatements=HandledSequenceOfStatements END_ endId=[TaskDeclaration|IDENTIFIER]?
		public Group getGroup() { return cGroup; }

		//TASK_
		public RuleCall getTASK_TerminalRuleCall_0() { return cTASK_TerminalRuleCall_0; }

		//BODY_
		public RuleCall getBODY_TerminalRuleCall_1() { return cBODY_TerminalRuleCall_1; }

		//name=[TaskDeclaration|IDENTIFIER]
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//[TaskDeclaration|IDENTIFIER]
		public CrossReference getNameTaskDeclarationCrossReference_2_0() { return cNameTaskDeclarationCrossReference_2_0; }

		//IDENTIFIER
		public RuleCall getNameTaskDeclarationIDENTIFIERTerminalRuleCall_2_0_1() { return cNameTaskDeclarationIDENTIFIERTerminalRuleCall_2_0_1; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_3() { return cIS_TerminalRuleCall_3; }

		//(declarativeItems+=DeclarativeItem PV)*
		public Group getGroup_4() { return cGroup_4; }

		//declarativeItems+=DeclarativeItem
		public Assignment getDeclarativeItemsAssignment_4_0() { return cDeclarativeItemsAssignment_4_0; }

		//DeclarativeItem
		public RuleCall getDeclarativeItemsDeclarativeItemParserRuleCall_4_0_0() { return cDeclarativeItemsDeclarativeItemParserRuleCall_4_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_4_1() { return cPVTerminalRuleCall_4_1; }

		//BEGIN_
		public RuleCall getBEGIN_TerminalRuleCall_5() { return cBEGIN_TerminalRuleCall_5; }

		//handledSequenceOfStatements=HandledSequenceOfStatements
		public Assignment getHandledSequenceOfStatementsAssignment_6() { return cHandledSequenceOfStatementsAssignment_6; }

		//HandledSequenceOfStatements
		public RuleCall getHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_6_0() { return cHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_6_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_7() { return cEND_TerminalRuleCall_7; }

		//endId=[TaskDeclaration|IDENTIFIER]?
		public Assignment getEndIdAssignment_8() { return cEndIdAssignment_8; }

		//[TaskDeclaration|IDENTIFIER]
		public CrossReference getEndIdTaskDeclarationCrossReference_8_0() { return cEndIdTaskDeclarationCrossReference_8_0; }

		//IDENTIFIER
		public RuleCall getEndIdTaskDeclarationIDENTIFIERTerminalRuleCall_8_0_1() { return cEndIdTaskDeclarationIDENTIFIERTerminalRuleCall_8_0_1; }
	}

	public class ProtectedBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ProtectedBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPROTECTED_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBODY_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentifierIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cIdentifierAssignment_2.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cProtectedOperationItemAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProtectedOperationItemProtectedOperationItemParserRuleCall_4_0 = (RuleCall)cProtectedOperationItemAssignment_4.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cIdTaskAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIdTaskIDENTIFIERTerminalRuleCall_6_0 = (RuleCall)cIdTaskAssignment_6.eContents().get(0);
		
		//ProtectedBody:
		//	PROTECTED_ BODY_ identifier=IDENTIFIER IS_ protectedOperationItem+=ProtectedOperationItem* END_ idTask=IDENTIFIER?;
		@Override public ParserRule getRule() { return rule; }

		//PROTECTED_ BODY_ identifier=IDENTIFIER IS_ protectedOperationItem+=ProtectedOperationItem* END_ idTask=IDENTIFIER?
		public Group getGroup() { return cGroup; }

		//PROTECTED_
		public RuleCall getPROTECTED_TerminalRuleCall_0() { return cPROTECTED_TerminalRuleCall_0; }

		//BODY_
		public RuleCall getBODY_TerminalRuleCall_1() { return cBODY_TerminalRuleCall_1; }

		//identifier=IDENTIFIER
		public Assignment getIdentifierAssignment_2() { return cIdentifierAssignment_2; }

		//IDENTIFIER
		public RuleCall getIdentifierIDENTIFIERTerminalRuleCall_2_0() { return cIdentifierIDENTIFIERTerminalRuleCall_2_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_3() { return cIS_TerminalRuleCall_3; }

		//protectedOperationItem+=ProtectedOperationItem*
		public Assignment getProtectedOperationItemAssignment_4() { return cProtectedOperationItemAssignment_4; }

		//ProtectedOperationItem
		public RuleCall getProtectedOperationItemProtectedOperationItemParserRuleCall_4_0() { return cProtectedOperationItemProtectedOperationItemParserRuleCall_4_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_5() { return cEND_TerminalRuleCall_5; }

		//idTask=IDENTIFIER?
		public Assignment getIdTaskAssignment_6() { return cIdTaskAssignment_6; }

		//IDENTIFIER
		public RuleCall getIdTaskIDENTIFIERTerminalRuleCall_6_0() { return cIdTaskIDENTIFIERTerminalRuleCall_6_0; }
	}

	public class ProtectedOperationItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ProtectedOperationItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubprogramDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubprogramBodyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEntryBodyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAspectClauseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ProtectedOperationItem:
		//	SubprogramDeclaration
		//	| => SubprogramBody
		//	| EntryBody
		//	| AspectClause;
		@Override public ParserRule getRule() { return rule; }

		//SubprogramDeclaration | => SubprogramBody | EntryBody | AspectClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubprogramDeclaration
		public RuleCall getSubprogramDeclarationParserRuleCall_0() { return cSubprogramDeclarationParserRuleCall_0; }

		//=> SubprogramBody
		public RuleCall getSubprogramBodyParserRuleCall_1() { return cSubprogramBodyParserRuleCall_1; }

		//EntryBody
		public RuleCall getEntryBodyParserRuleCall_2() { return cEntryBodyParserRuleCall_2; }

		//AspectClause
		public RuleCall getAspectClauseParserRuleCall_3() { return cAspectClauseParserRuleCall_3; }
	}

	public class AcceptStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AcceptStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cACCEPT_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cEntryNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntryNameEntryDeclarationCrossReference_1_0 = (CrossReference)cEntryNameAssignment_1.eContents().get(0);
		private final RuleCall cEntryNameEntryDeclarationIDENTIFIERTerminalRuleCall_1_0_1 = (RuleCall)cEntryNameEntryDeclarationCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cPGTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cEntryIndexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEntryIndexEntryIndexParserRuleCall_2_1_0 = (RuleCall)cEntryIndexAssignment_2_1.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cFormalPartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormalPartFormalPartParserRuleCall_3_0 = (RuleCall)cFormalPartAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cDO_TerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cHandledSequenceOfStatementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_4_1_0 = (RuleCall)cHandledSequenceOfStatementsAssignment_4_1.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Assignment cEntryidentifierAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cEntryidentifierIDENTIFIERTerminalRuleCall_4_3_0 = (RuleCall)cEntryidentifierAssignment_4_3.eContents().get(0);
		
		//AcceptStatement:
		//	ACCEPT_ entryName=[EntryDeclaration|IDENTIFIER] (PG entryIndex=EntryIndex PD)? formalPart=FormalPart? (DO_
		//	handledSequenceOfStatements=HandledSequenceOfStatements END_ entryidentifier=IDENTIFIER?)?;
		@Override public ParserRule getRule() { return rule; }

		//ACCEPT_ entryName=[EntryDeclaration|IDENTIFIER] (PG entryIndex=EntryIndex PD)? formalPart=FormalPart? (DO_
		//handledSequenceOfStatements=HandledSequenceOfStatements END_ entryidentifier=IDENTIFIER?)?
		public Group getGroup() { return cGroup; }

		//ACCEPT_
		public RuleCall getACCEPT_TerminalRuleCall_0() { return cACCEPT_TerminalRuleCall_0; }

		//entryName=[EntryDeclaration|IDENTIFIER]
		public Assignment getEntryNameAssignment_1() { return cEntryNameAssignment_1; }

		//[EntryDeclaration|IDENTIFIER]
		public CrossReference getEntryNameEntryDeclarationCrossReference_1_0() { return cEntryNameEntryDeclarationCrossReference_1_0; }

		//IDENTIFIER
		public RuleCall getEntryNameEntryDeclarationIDENTIFIERTerminalRuleCall_1_0_1() { return cEntryNameEntryDeclarationIDENTIFIERTerminalRuleCall_1_0_1; }

		//(PG entryIndex=EntryIndex PD)?
		public Group getGroup_2() { return cGroup_2; }

		//PG
		public RuleCall getPGTerminalRuleCall_2_0() { return cPGTerminalRuleCall_2_0; }

		//entryIndex=EntryIndex
		public Assignment getEntryIndexAssignment_2_1() { return cEntryIndexAssignment_2_1; }

		//EntryIndex
		public RuleCall getEntryIndexEntryIndexParserRuleCall_2_1_0() { return cEntryIndexEntryIndexParserRuleCall_2_1_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_2_2() { return cPDTerminalRuleCall_2_2; }

		//formalPart=FormalPart?
		public Assignment getFormalPartAssignment_3() { return cFormalPartAssignment_3; }

		//FormalPart
		public RuleCall getFormalPartFormalPartParserRuleCall_3_0() { return cFormalPartFormalPartParserRuleCall_3_0; }

		//(DO_ handledSequenceOfStatements=HandledSequenceOfStatements END_ entryidentifier=IDENTIFIER?)?
		public Group getGroup_4() { return cGroup_4; }

		//DO_
		public RuleCall getDO_TerminalRuleCall_4_0() { return cDO_TerminalRuleCall_4_0; }

		//handledSequenceOfStatements=HandledSequenceOfStatements
		public Assignment getHandledSequenceOfStatementsAssignment_4_1() { return cHandledSequenceOfStatementsAssignment_4_1; }

		//HandledSequenceOfStatements
		public RuleCall getHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_4_1_0() { return cHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_4_1_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_4_2() { return cEND_TerminalRuleCall_4_2; }

		//entryidentifier=IDENTIFIER?
		public Assignment getEntryidentifierAssignment_4_3() { return cEntryidentifierAssignment_4_3; }

		//IDENTIFIER
		public RuleCall getEntryidentifierIDENTIFIERTerminalRuleCall_4_3_0() { return cEntryidentifierIDENTIFIERTerminalRuleCall_4_3_0; }
	}

	public class EntryIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.EntryIndex");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EntryIndex:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }

		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class EntryBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.EntryBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cENTRY_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameEntryDeclarationCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameEntryDeclarationIDENTIFIERTerminalRuleCall_1_0_1 = (RuleCall)cNameEntryDeclarationCrossReference_1_0.eContents().get(1);
		private final Assignment cEntryBodyFormalPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntryBodyFormalPartEntryBodyFormalPartParserRuleCall_2_0 = (RuleCall)cEntryBodyFormalPartAssignment_2.eContents().get(0);
		private final Assignment cEntryBarrierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntryBarrierEntryBarrierParserRuleCall_3_0 = (RuleCall)cEntryBarrierAssignment_3.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cDeclarativeItemsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cDeclarativeItemsDeclarativeItemParserRuleCall_5_0_0 = (RuleCall)cDeclarativeItemsAssignment_5_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final RuleCall cBEGIN_TerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cHandledSequenceOfStatementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_7_0 = (RuleCall)cHandledSequenceOfStatementsAssignment_7.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cEndidAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cEndidIDENTIFIERTerminalRuleCall_9_0 = (RuleCall)cEndidAssignment_9.eContents().get(0);
		
		//EntryBody:
		//	ENTRY_ name=[EntryDeclaration|IDENTIFIER] entryBodyFormalPart=EntryBodyFormalPart entryBarrier=EntryBarrier IS_
		//	(declarativeItems+=DeclarativeItem PV)*
		//	BEGIN_
		//	handledSequenceOfStatements=HandledSequenceOfStatements
		//	END_ endid=IDENTIFIER?;
		@Override public ParserRule getRule() { return rule; }

		//ENTRY_ name=[EntryDeclaration|IDENTIFIER] entryBodyFormalPart=EntryBodyFormalPart entryBarrier=EntryBarrier IS_
		//(declarativeItems+=DeclarativeItem PV)* BEGIN_ handledSequenceOfStatements=HandledSequenceOfStatements END_
		//endid=IDENTIFIER?
		public Group getGroup() { return cGroup; }

		//ENTRY_
		public RuleCall getENTRY_TerminalRuleCall_0() { return cENTRY_TerminalRuleCall_0; }

		//name=[EntryDeclaration|IDENTIFIER]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[EntryDeclaration|IDENTIFIER]
		public CrossReference getNameEntryDeclarationCrossReference_1_0() { return cNameEntryDeclarationCrossReference_1_0; }

		//IDENTIFIER
		public RuleCall getNameEntryDeclarationIDENTIFIERTerminalRuleCall_1_0_1() { return cNameEntryDeclarationIDENTIFIERTerminalRuleCall_1_0_1; }

		//entryBodyFormalPart=EntryBodyFormalPart
		public Assignment getEntryBodyFormalPartAssignment_2() { return cEntryBodyFormalPartAssignment_2; }

		//EntryBodyFormalPart
		public RuleCall getEntryBodyFormalPartEntryBodyFormalPartParserRuleCall_2_0() { return cEntryBodyFormalPartEntryBodyFormalPartParserRuleCall_2_0; }

		//entryBarrier=EntryBarrier
		public Assignment getEntryBarrierAssignment_3() { return cEntryBarrierAssignment_3; }

		//EntryBarrier
		public RuleCall getEntryBarrierEntryBarrierParserRuleCall_3_0() { return cEntryBarrierEntryBarrierParserRuleCall_3_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_4() { return cIS_TerminalRuleCall_4; }

		//(declarativeItems+=DeclarativeItem PV)*
		public Group getGroup_5() { return cGroup_5; }

		//declarativeItems+=DeclarativeItem
		public Assignment getDeclarativeItemsAssignment_5_0() { return cDeclarativeItemsAssignment_5_0; }

		//DeclarativeItem
		public RuleCall getDeclarativeItemsDeclarativeItemParserRuleCall_5_0_0() { return cDeclarativeItemsDeclarativeItemParserRuleCall_5_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_5_1() { return cPVTerminalRuleCall_5_1; }

		//BEGIN_
		public RuleCall getBEGIN_TerminalRuleCall_6() { return cBEGIN_TerminalRuleCall_6; }

		//handledSequenceOfStatements=HandledSequenceOfStatements
		public Assignment getHandledSequenceOfStatementsAssignment_7() { return cHandledSequenceOfStatementsAssignment_7; }

		//HandledSequenceOfStatements
		public RuleCall getHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_7_0() { return cHandledSequenceOfStatementsHandledSequenceOfStatementsParserRuleCall_7_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_8() { return cEND_TerminalRuleCall_8; }

		//endid=IDENTIFIER?
		public Assignment getEndidAssignment_9() { return cEndidAssignment_9; }

		//IDENTIFIER
		public RuleCall getEndidIDENTIFIERTerminalRuleCall_9_0() { return cEndidIDENTIFIERTerminalRuleCall_9_0; }
	}

	public class EntryBodyFormalPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.EntryBodyFormalPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntryBodyFormalPartAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPGTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cEntryIndexSpecificationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEntryIndexSpecificationEntryIndexSpecificationParserRuleCall_1_1_0 = (RuleCall)cEntryIndexSpecificationAssignment_1_1.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cFormalPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalPartFormalPartParserRuleCall_2_0 = (RuleCall)cFormalPartAssignment_2.eContents().get(0);
		
		//EntryBodyFormalPart:
		//	{EntryBodyFormalPart} (PG entryIndexSpecification=EntryIndexSpecification PD)? formalPart=FormalPart?;
		@Override public ParserRule getRule() { return rule; }

		//{EntryBodyFormalPart} (PG entryIndexSpecification=EntryIndexSpecification PD)? formalPart=FormalPart?
		public Group getGroup() { return cGroup; }

		//{EntryBodyFormalPart}
		public Action getEntryBodyFormalPartAction_0() { return cEntryBodyFormalPartAction_0; }

		//(PG entryIndexSpecification=EntryIndexSpecification PD)?
		public Group getGroup_1() { return cGroup_1; }

		//PG
		public RuleCall getPGTerminalRuleCall_1_0() { return cPGTerminalRuleCall_1_0; }

		//entryIndexSpecification=EntryIndexSpecification
		public Assignment getEntryIndexSpecificationAssignment_1_1() { return cEntryIndexSpecificationAssignment_1_1; }

		//EntryIndexSpecification
		public RuleCall getEntryIndexSpecificationEntryIndexSpecificationParserRuleCall_1_1_0() { return cEntryIndexSpecificationEntryIndexSpecificationParserRuleCall_1_1_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_1_2() { return cPDTerminalRuleCall_1_2; }

		//formalPart=FormalPart?
		public Assignment getFormalPartAssignment_2() { return cFormalPartAssignment_2; }

		//FormalPart
		public RuleCall getFormalPartFormalPartParserRuleCall_2_0() { return cFormalPartFormalPartParserRuleCall_2_0; }
	}

	public class EntryBarrierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.EntryBarrier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHEN_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		
		//EntryBarrier:
		//	WHEN_ condition=Expression;
		@Override public ParserRule getRule() { return rule; }

		//WHEN_ condition=Expression
		public Group getGroup() { return cGroup; }

		//WHEN_
		public RuleCall getWHEN_TerminalRuleCall_0() { return cWHEN_TerminalRuleCall_0; }

		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
	}

	public class EntryIndexSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.EntryIndexSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFOR_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cIN_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cDiscreteSubtypeDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDiscreteSubtypeDefinitionDiscreteSubtypeDefinitionParserRuleCall_3_0 = (RuleCall)cDiscreteSubtypeDefinitionAssignment_3.eContents().get(0);
		
		//EntryIndexSpecification:
		//	FOR_ name=IDENTIFIER IN_ discreteSubtypeDefinition=DiscreteSubtypeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//FOR_ name=IDENTIFIER IN_ discreteSubtypeDefinition=DiscreteSubtypeDefinition
		public Group getGroup() { return cGroup; }

		//FOR_
		public RuleCall getFOR_TerminalRuleCall_0() { return cFOR_TerminalRuleCall_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0; }

		//IN_
		public RuleCall getIN_TerminalRuleCall_2() { return cIN_TerminalRuleCall_2; }

		//discreteSubtypeDefinition=DiscreteSubtypeDefinition
		public Assignment getDiscreteSubtypeDefinitionAssignment_3() { return cDiscreteSubtypeDefinitionAssignment_3; }

		//DiscreteSubtypeDefinition
		public RuleCall getDiscreteSubtypeDefinitionDiscreteSubtypeDefinitionParserRuleCall_3_0() { return cDiscreteSubtypeDefinitionDiscreteSubtypeDefinitionParserRuleCall_3_0; }
	}

	public class RequeueStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RequeueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cREQUEUE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAbortAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAbortWITH_TerminalRuleCall_2_0_0 = (RuleCall)cAbortAssignment_2_0.eContents().get(0);
		private final RuleCall cABORT_TerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//RequeueStatement:
		//	REQUEUE_ name=Name (abort?=WITH_ ABORT_)?;
		@Override public ParserRule getRule() { return rule; }

		//REQUEUE_ name=Name (abort?=WITH_ ABORT_)?
		public Group getGroup() { return cGroup; }

		//REQUEUE_
		public RuleCall getREQUEUE_TerminalRuleCall_0() { return cREQUEUE_TerminalRuleCall_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//(abort?=WITH_ ABORT_)?
		public Group getGroup_2() { return cGroup_2; }

		//abort?=WITH_
		public Assignment getAbortAssignment_2_0() { return cAbortAssignment_2_0; }

		//WITH_
		public RuleCall getAbortWITH_TerminalRuleCall_2_0_0() { return cAbortWITH_TerminalRuleCall_2_0_0; }

		//ABORT_
		public RuleCall getABORT_TerminalRuleCall_2_1() { return cABORT_TerminalRuleCall_2_1; }
	}

	public class DelayStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DelayStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDELAY_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cUntilAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUntilUNTIL_TerminalRuleCall_1_0 = (RuleCall)cUntilAssignment_1.eContents().get(0);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayExpressionParserRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		
		//DelayStatement:
		//	DELAY_ until=UNTIL_? delay=Expression;
		@Override public ParserRule getRule() { return rule; }

		//DELAY_ until=UNTIL_? delay=Expression
		public Group getGroup() { return cGroup; }

		//DELAY_
		public RuleCall getDELAY_TerminalRuleCall_0() { return cDELAY_TerminalRuleCall_0; }

		//until=UNTIL_?
		public Assignment getUntilAssignment_1() { return cUntilAssignment_1; }

		//UNTIL_
		public RuleCall getUntilUNTIL_TerminalRuleCall_1_0() { return cUntilUNTIL_TerminalRuleCall_1_0; }

		//delay=Expression
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }

		//Expression
		public RuleCall getDelayExpressionParserRuleCall_2_0() { return cDelayExpressionParserRuleCall_2_0; }
	}

	public class SelectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SelectStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectiveAcceptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimedEntryCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConditionalEntryCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAsynchronousSelectParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SelectStatement:
		//	=> SelectiveAccept
		//	| => TimedEntryCall
		//	| => ConditionalEntryCall
		//	| => AsynchronousSelect;
		@Override public ParserRule getRule() { return rule; }

		//=> SelectiveAccept | => TimedEntryCall | => ConditionalEntryCall | => AsynchronousSelect
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> SelectiveAccept
		public RuleCall getSelectiveAcceptParserRuleCall_0() { return cSelectiveAcceptParserRuleCall_0; }

		//=> TimedEntryCall
		public RuleCall getTimedEntryCallParserRuleCall_1() { return cTimedEntryCallParserRuleCall_1; }

		//=> ConditionalEntryCall
		public RuleCall getConditionalEntryCallParserRuleCall_2() { return cConditionalEntryCallParserRuleCall_2; }

		//=> AsynchronousSelect
		public RuleCall getAsynchronousSelectParserRuleCall_3() { return cAsynchronousSelectParserRuleCall_3; }
	}

	public class SelectiveAcceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SelectiveAccept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSELECT_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cSelectguardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectguardGuardParserRuleCall_1_0 = (RuleCall)cSelectguardAssignment_1.eContents().get(0);
		private final Assignment cSelectAlternativeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelectAlternativeSelectAlternativeParserRuleCall_2_0 = (RuleCall)cSelectAlternativeAssignment_2.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cGuardedAlternativesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cGuardedAlternativesGuardedAlternativeParserRuleCall_4_0_0 = (RuleCall)cGuardedAlternativesAssignment_4_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cELSE_TerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cElseStatementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementsSequenceOfStatementsParserRuleCall_5_1_0 = (RuleCall)cElseStatementsAssignment_5_1.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cSELECT_TerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//SelectiveAccept:
		//	SELECT_ selectguard=Guard?
		//	selectAlternative=SelectAlternative PV (guardedAlternatives+=GuardedAlternative PV)* (ELSE_
		//	elseStatements=SequenceOfStatements)?
		//	END_ SELECT_;
		@Override public ParserRule getRule() { return rule; }

		//SELECT_ selectguard=Guard? selectAlternative=SelectAlternative PV (guardedAlternatives+=GuardedAlternative PV)* (ELSE_
		//elseStatements=SequenceOfStatements)? END_ SELECT_
		public Group getGroup() { return cGroup; }

		//SELECT_
		public RuleCall getSELECT_TerminalRuleCall_0() { return cSELECT_TerminalRuleCall_0; }

		//selectguard=Guard?
		public Assignment getSelectguardAssignment_1() { return cSelectguardAssignment_1; }

		//Guard
		public RuleCall getSelectguardGuardParserRuleCall_1_0() { return cSelectguardGuardParserRuleCall_1_0; }

		//selectAlternative=SelectAlternative
		public Assignment getSelectAlternativeAssignment_2() { return cSelectAlternativeAssignment_2; }

		//SelectAlternative
		public RuleCall getSelectAlternativeSelectAlternativeParserRuleCall_2_0() { return cSelectAlternativeSelectAlternativeParserRuleCall_2_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_3() { return cPVTerminalRuleCall_3; }

		//(guardedAlternatives+=GuardedAlternative PV)*
		public Group getGroup_4() { return cGroup_4; }

		//guardedAlternatives+=GuardedAlternative
		public Assignment getGuardedAlternativesAssignment_4_0() { return cGuardedAlternativesAssignment_4_0; }

		//GuardedAlternative
		public RuleCall getGuardedAlternativesGuardedAlternativeParserRuleCall_4_0_0() { return cGuardedAlternativesGuardedAlternativeParserRuleCall_4_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_4_1() { return cPVTerminalRuleCall_4_1; }

		//(ELSE_ elseStatements=SequenceOfStatements)?
		public Group getGroup_5() { return cGroup_5; }

		//ELSE_
		public RuleCall getELSE_TerminalRuleCall_5_0() { return cELSE_TerminalRuleCall_5_0; }

		//elseStatements=SequenceOfStatements
		public Assignment getElseStatementsAssignment_5_1() { return cElseStatementsAssignment_5_1; }

		//SequenceOfStatements
		public RuleCall getElseStatementsSequenceOfStatementsParserRuleCall_5_1_0() { return cElseStatementsSequenceOfStatementsParserRuleCall_5_1_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_6() { return cEND_TerminalRuleCall_6; }

		//SELECT_
		public RuleCall getSELECT_TerminalRuleCall_7() { return cSELECT_TerminalRuleCall_7; }
	}

	public class GuardedAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.GuardedAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOR_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cGuardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGuardGuardParserRuleCall_1_0 = (RuleCall)cGuardAssignment_1.eContents().get(0);
		private final Assignment cAlternativeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAlternativeSelectAlternativeParserRuleCall_2_0 = (RuleCall)cAlternativeAssignment_2.eContents().get(0);
		
		//GuardedAlternative:
		//	OR_ guard=Guard? alternative=SelectAlternative;
		@Override public ParserRule getRule() { return rule; }

		//OR_ guard=Guard? alternative=SelectAlternative
		public Group getGroup() { return cGroup; }

		//OR_
		public RuleCall getOR_TerminalRuleCall_0() { return cOR_TerminalRuleCall_0; }

		//guard=Guard?
		public Assignment getGuardAssignment_1() { return cGuardAssignment_1; }

		//Guard
		public RuleCall getGuardGuardParserRuleCall_1_0() { return cGuardGuardParserRuleCall_1_0; }

		//alternative=SelectAlternative
		public Assignment getAlternativeAssignment_2() { return cAlternativeAssignment_2; }

		//SelectAlternative
		public RuleCall getAlternativeSelectAlternativeParserRuleCall_2_0() { return cAlternativeSelectAlternativeParserRuleCall_2_0; }
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHEN_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final RuleCall cFLECHETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Guard:
		//	WHEN_ condition=Expression FLECHE;
		@Override public ParserRule getRule() { return rule; }

		//WHEN_ condition=Expression FLECHE
		public Group getGroup() { return cGroup; }

		//WHEN_
		public RuleCall getWHEN_TerminalRuleCall_0() { return cWHEN_TerminalRuleCall_0; }

		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }

		//FLECHE
		public RuleCall getFLECHETerminalRuleCall_2() { return cFLECHETerminalRuleCall_2; }
	}

	public class SelectAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SelectAlternative");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAcceptAlternativeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDelayAlternativeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSelectAlternativeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cTERMINATE_TerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//SelectAlternative:
		//	AcceptAlternative
		//	| DelayAlternative
		//	| {SelectAlternative} TERMINATE_;
		@Override public ParserRule getRule() { return rule; }

		//AcceptAlternative | DelayAlternative | {SelectAlternative} TERMINATE_
		public Alternatives getAlternatives() { return cAlternatives; }

		//AcceptAlternative
		public RuleCall getAcceptAlternativeParserRuleCall_0() { return cAcceptAlternativeParserRuleCall_0; }

		//DelayAlternative
		public RuleCall getDelayAlternativeParserRuleCall_1() { return cDelayAlternativeParserRuleCall_1; }

		//{SelectAlternative} TERMINATE_
		public Group getGroup_2() { return cGroup_2; }

		//{SelectAlternative}
		public Action getSelectAlternativeAction_2_0() { return cSelectAlternativeAction_2_0; }

		//TERMINATE_
		public RuleCall getTERMINATE_TerminalRuleCall_2_1() { return cTERMINATE_TerminalRuleCall_2_1; }
	}

	public class AcceptAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AcceptAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAcceptStatementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAcceptStatementAcceptStatementParserRuleCall_0_0 = (RuleCall)cAcceptStatementAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPVTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cSequenceOfStatementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSequenceOfStatementsSequenceOfStatementsParserRuleCall_1_1_0 = (RuleCall)cSequenceOfStatementsAssignment_1_1.eContents().get(0);
		
		//AcceptAlternative:
		//	acceptStatement=AcceptStatement (PV sequenceOfStatements=SequenceOfStatements)?;
		@Override public ParserRule getRule() { return rule; }

		//acceptStatement=AcceptStatement (PV sequenceOfStatements=SequenceOfStatements)?
		public Group getGroup() { return cGroup; }

		//acceptStatement=AcceptStatement
		public Assignment getAcceptStatementAssignment_0() { return cAcceptStatementAssignment_0; }

		//AcceptStatement
		public RuleCall getAcceptStatementAcceptStatementParserRuleCall_0_0() { return cAcceptStatementAcceptStatementParserRuleCall_0_0; }

		//(PV sequenceOfStatements=SequenceOfStatements)?
		public Group getGroup_1() { return cGroup_1; }

		//PV
		public RuleCall getPVTerminalRuleCall_1_0() { return cPVTerminalRuleCall_1_0; }

		//sequenceOfStatements=SequenceOfStatements
		public Assignment getSequenceOfStatementsAssignment_1_1() { return cSequenceOfStatementsAssignment_1_1; }

		//SequenceOfStatements
		public RuleCall getSequenceOfStatementsSequenceOfStatementsParserRuleCall_1_1_0() { return cSequenceOfStatementsSequenceOfStatementsParserRuleCall_1_1_0; }
	}

	public class DelayAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DelayAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDelayStatementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDelayStatementDelayStatementParserRuleCall_0_0 = (RuleCall)cDelayStatementAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPVTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cSequenceOfStatementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSequenceOfStatementsSequenceOfStatementsParserRuleCall_1_1_0 = (RuleCall)cSequenceOfStatementsAssignment_1_1.eContents().get(0);
		
		//DelayAlternative:
		//	delayStatement=DelayStatement (PV sequenceOfStatements=SequenceOfStatements)?;
		@Override public ParserRule getRule() { return rule; }

		//delayStatement=DelayStatement (PV sequenceOfStatements=SequenceOfStatements)?
		public Group getGroup() { return cGroup; }

		//delayStatement=DelayStatement
		public Assignment getDelayStatementAssignment_0() { return cDelayStatementAssignment_0; }

		//DelayStatement
		public RuleCall getDelayStatementDelayStatementParserRuleCall_0_0() { return cDelayStatementDelayStatementParserRuleCall_0_0; }

		//(PV sequenceOfStatements=SequenceOfStatements)?
		public Group getGroup_1() { return cGroup_1; }

		//PV
		public RuleCall getPVTerminalRuleCall_1_0() { return cPVTerminalRuleCall_1_0; }

		//sequenceOfStatements=SequenceOfStatements
		public Assignment getSequenceOfStatementsAssignment_1_1() { return cSequenceOfStatementsAssignment_1_1; }

		//SequenceOfStatements
		public RuleCall getSequenceOfStatementsSequenceOfStatementsParserRuleCall_1_1_0() { return cSequenceOfStatementsSequenceOfStatementsParserRuleCall_1_1_0; }
	}

	public class TimedEntryCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.TimedEntryCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSELECT_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cEntryCallAlternativeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntryCallAlternativeEntryCallAlternativeParserRuleCall_1_0 = (RuleCall)cEntryCallAlternativeAssignment_1.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cOR_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cDelayAlternativeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDelayAlternativeDelayAlternativeParserRuleCall_4_0 = (RuleCall)cDelayAlternativeAssignment_4.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cEND_TerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cSELECT_TerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//TimedEntryCall:
		//	SELECT_ entryCallAlternative=EntryCallAlternative PV OR_ delayAlternative=DelayAlternative PV END_ SELECT_;
		@Override public ParserRule getRule() { return rule; }

		//SELECT_ entryCallAlternative=EntryCallAlternative PV OR_ delayAlternative=DelayAlternative PV END_ SELECT_
		public Group getGroup() { return cGroup; }

		//SELECT_
		public RuleCall getSELECT_TerminalRuleCall_0() { return cSELECT_TerminalRuleCall_0; }

		//entryCallAlternative=EntryCallAlternative
		public Assignment getEntryCallAlternativeAssignment_1() { return cEntryCallAlternativeAssignment_1; }

		//EntryCallAlternative
		public RuleCall getEntryCallAlternativeEntryCallAlternativeParserRuleCall_1_0() { return cEntryCallAlternativeEntryCallAlternativeParserRuleCall_1_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_2() { return cPVTerminalRuleCall_2; }

		//OR_
		public RuleCall getOR_TerminalRuleCall_3() { return cOR_TerminalRuleCall_3; }

		//delayAlternative=DelayAlternative
		public Assignment getDelayAlternativeAssignment_4() { return cDelayAlternativeAssignment_4; }

		//DelayAlternative
		public RuleCall getDelayAlternativeDelayAlternativeParserRuleCall_4_0() { return cDelayAlternativeDelayAlternativeParserRuleCall_4_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_5() { return cPVTerminalRuleCall_5; }

		//END_
		public RuleCall getEND_TerminalRuleCall_6() { return cEND_TerminalRuleCall_6; }

		//SELECT_
		public RuleCall getSELECT_TerminalRuleCall_7() { return cSELECT_TerminalRuleCall_7; }
	}

	public class EntryCallAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.EntryCallAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCallAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCallProcedureOrEntryCallStatementParserRuleCall_0_0 = (RuleCall)cCallAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPVTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cSequenceOfStatementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSequenceOfStatementsSequenceOfStatementsParserRuleCall_1_1_0 = (RuleCall)cSequenceOfStatementsAssignment_1_1.eContents().get(0);
		
		//EntryCallAlternative:
		//	call=ProcedureOrEntryCallStatement (PV sequenceOfStatements=SequenceOfStatements)?;
		@Override public ParserRule getRule() { return rule; }

		//call=ProcedureOrEntryCallStatement (PV sequenceOfStatements=SequenceOfStatements)?
		public Group getGroup() { return cGroup; }

		//call=ProcedureOrEntryCallStatement
		public Assignment getCallAssignment_0() { return cCallAssignment_0; }

		//ProcedureOrEntryCallStatement
		public RuleCall getCallProcedureOrEntryCallStatementParserRuleCall_0_0() { return cCallProcedureOrEntryCallStatementParserRuleCall_0_0; }

		//(PV sequenceOfStatements=SequenceOfStatements)?
		public Group getGroup_1() { return cGroup_1; }

		//PV
		public RuleCall getPVTerminalRuleCall_1_0() { return cPVTerminalRuleCall_1_0; }

		//sequenceOfStatements=SequenceOfStatements
		public Assignment getSequenceOfStatementsAssignment_1_1() { return cSequenceOfStatementsAssignment_1_1; }

		//SequenceOfStatements
		public RuleCall getSequenceOfStatementsSequenceOfStatementsParserRuleCall_1_1_0() { return cSequenceOfStatementsSequenceOfStatementsParserRuleCall_1_1_0; }
	}

	public class ConditionalEntryCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ConditionalEntryCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSELECT_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cEntryCallAlternativeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntryCallAlternativeEntryCallAlternativeParserRuleCall_1_0 = (RuleCall)cEntryCallAlternativeAssignment_1.eContents().get(0);
		private final RuleCall cELSE_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cElseSequenceOfStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElseSequenceOfStatementsSequenceOfStatementsParserRuleCall_3_0 = (RuleCall)cElseSequenceOfStatementsAssignment_3.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSELECT_TerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//ConditionalEntryCall:
		//	SELECT_ entryCallAlternative=EntryCallAlternative
		//	ELSE_ elseSequenceOfStatements=SequenceOfStatements
		//	END_ SELECT_;
		@Override public ParserRule getRule() { return rule; }

		//SELECT_ entryCallAlternative=EntryCallAlternative ELSE_ elseSequenceOfStatements=SequenceOfStatements END_ SELECT_
		public Group getGroup() { return cGroup; }

		//SELECT_
		public RuleCall getSELECT_TerminalRuleCall_0() { return cSELECT_TerminalRuleCall_0; }

		//entryCallAlternative=EntryCallAlternative
		public Assignment getEntryCallAlternativeAssignment_1() { return cEntryCallAlternativeAssignment_1; }

		//EntryCallAlternative
		public RuleCall getEntryCallAlternativeEntryCallAlternativeParserRuleCall_1_0() { return cEntryCallAlternativeEntryCallAlternativeParserRuleCall_1_0; }

		//ELSE_
		public RuleCall getELSE_TerminalRuleCall_2() { return cELSE_TerminalRuleCall_2; }

		//elseSequenceOfStatements=SequenceOfStatements
		public Assignment getElseSequenceOfStatementsAssignment_3() { return cElseSequenceOfStatementsAssignment_3; }

		//SequenceOfStatements
		public RuleCall getElseSequenceOfStatementsSequenceOfStatementsParserRuleCall_3_0() { return cElseSequenceOfStatementsSequenceOfStatementsParserRuleCall_3_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_4() { return cEND_TerminalRuleCall_4; }

		//SELECT_
		public RuleCall getSELECT_TerminalRuleCall_5() { return cSELECT_TerminalRuleCall_5; }
	}

	public class AsynchronousSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AsynchronousSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSELECT_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTriggeringAlternativeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTriggeringAlternativeTriggeringAlternativeParserRuleCall_1_0 = (RuleCall)cTriggeringAlternativeAssignment_1.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTHEN_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cABORT_TerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cAbortablePartAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAbortablePartAbortablePartParserRuleCall_5_0 = (RuleCall)cAbortablePartAssignment_5.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cSELECT_TerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//AsynchronousSelect:
		//	SELECT_ triggeringAlternative=TriggeringAlternative PV
		//	THEN_ ABORT_ abortablePart=AbortablePart
		//	END_ SELECT_;
		@Override public ParserRule getRule() { return rule; }

		//SELECT_ triggeringAlternative=TriggeringAlternative PV THEN_ ABORT_ abortablePart=AbortablePart END_ SELECT_
		public Group getGroup() { return cGroup; }

		//SELECT_
		public RuleCall getSELECT_TerminalRuleCall_0() { return cSELECT_TerminalRuleCall_0; }

		//triggeringAlternative=TriggeringAlternative
		public Assignment getTriggeringAlternativeAssignment_1() { return cTriggeringAlternativeAssignment_1; }

		//TriggeringAlternative
		public RuleCall getTriggeringAlternativeTriggeringAlternativeParserRuleCall_1_0() { return cTriggeringAlternativeTriggeringAlternativeParserRuleCall_1_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_2() { return cPVTerminalRuleCall_2; }

		//THEN_
		public RuleCall getTHEN_TerminalRuleCall_3() { return cTHEN_TerminalRuleCall_3; }

		//ABORT_
		public RuleCall getABORT_TerminalRuleCall_4() { return cABORT_TerminalRuleCall_4; }

		//abortablePart=AbortablePart
		public Assignment getAbortablePartAssignment_5() { return cAbortablePartAssignment_5; }

		//AbortablePart
		public RuleCall getAbortablePartAbortablePartParserRuleCall_5_0() { return cAbortablePartAbortablePartParserRuleCall_5_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_6() { return cEND_TerminalRuleCall_6; }

		//SELECT_
		public RuleCall getSELECT_TerminalRuleCall_7() { return cSELECT_TerminalRuleCall_7; }
	}

	public class TriggeringAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.TriggeringAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTriggeringStatementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTriggeringStatementTriggeringStatementParserRuleCall_0_0 = (RuleCall)cTriggeringStatementAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPVTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cSequenceOfStatementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSequenceOfStatementsSequenceOfStatementsParserRuleCall_1_1_0 = (RuleCall)cSequenceOfStatementsAssignment_1_1.eContents().get(0);
		
		//TriggeringAlternative:
		//	triggeringStatement=TriggeringStatement (PV sequenceOfStatements=SequenceOfStatements)?;
		@Override public ParserRule getRule() { return rule; }

		//triggeringStatement=TriggeringStatement (PV sequenceOfStatements=SequenceOfStatements)?
		public Group getGroup() { return cGroup; }

		//triggeringStatement=TriggeringStatement
		public Assignment getTriggeringStatementAssignment_0() { return cTriggeringStatementAssignment_0; }

		//TriggeringStatement
		public RuleCall getTriggeringStatementTriggeringStatementParserRuleCall_0_0() { return cTriggeringStatementTriggeringStatementParserRuleCall_0_0; }

		//(PV sequenceOfStatements=SequenceOfStatements)?
		public Group getGroup_1() { return cGroup_1; }

		//PV
		public RuleCall getPVTerminalRuleCall_1_0() { return cPVTerminalRuleCall_1_0; }

		//sequenceOfStatements=SequenceOfStatements
		public Assignment getSequenceOfStatementsAssignment_1_1() { return cSequenceOfStatementsAssignment_1_1; }

		//SequenceOfStatements
		public RuleCall getSequenceOfStatementsSequenceOfStatementsParserRuleCall_1_1_0() { return cSequenceOfStatementsSequenceOfStatementsParserRuleCall_1_1_0; }
	}

	public class TriggeringStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.TriggeringStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcedureOrEntryCallStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDelayStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TriggeringStatement:
		//	ProcedureOrEntryCallStatement
		//	| DelayStatement;
		@Override public ParserRule getRule() { return rule; }

		//ProcedureOrEntryCallStatement | DelayStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//ProcedureOrEntryCallStatement
		public RuleCall getProcedureOrEntryCallStatementParserRuleCall_0() { return cProcedureOrEntryCallStatementParserRuleCall_0; }

		//DelayStatement
		public RuleCall getDelayStatementParserRuleCall_1() { return cDelayStatementParserRuleCall_1; }
	}

	public class AbortablePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AbortablePart");
		private final RuleCall cSequenceOfStatementsParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AbortablePart:
		//	SequenceOfStatements;
		@Override public ParserRule getRule() { return rule; }

		//SequenceOfStatements
		public RuleCall getSequenceOfStatementsParserRuleCall() { return cSequenceOfStatementsParserRuleCall; }
	}

	public class AbortStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AbortStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cABORT_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTaskNamesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//AbortStatement:
		//	ABORT_ TaskNames;
		@Override public ParserRule getRule() { return rule; }

		//ABORT_ TaskNames
		public Group getGroup() { return cGroup; }

		//ABORT_
		public RuleCall getABORT_TerminalRuleCall_0() { return cABORT_TerminalRuleCall_0; }

		//TaskNames
		public RuleCall getTaskNamesParserRuleCall_1() { return cTaskNamesParserRuleCall_1; }
	}

	public class TaskNamesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.TaskNames");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTaskNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTaskNamesNameParserRuleCall_0_0 = (RuleCall)cTaskNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cVTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cTaskNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTaskNamesNameParserRuleCall_1_1_0 = (RuleCall)cTaskNamesAssignment_1_1.eContents().get(0);
		
		//TaskNames:
		//	taskNames+=Name (V taskNames+=Name)*;
		@Override public ParserRule getRule() { return rule; }

		//taskNames+=Name (V taskNames+=Name)*
		public Group getGroup() { return cGroup; }

		//taskNames+=Name
		public Assignment getTaskNamesAssignment_0() { return cTaskNamesAssignment_0; }

		//Name
		public RuleCall getTaskNamesNameParserRuleCall_0_0() { return cTaskNamesNameParserRuleCall_0_0; }

		//(V taskNames+=Name)*
		public Group getGroup_1() { return cGroup_1; }

		//V
		public RuleCall getVTerminalRuleCall_1_0() { return cVTerminalRuleCall_1_0; }

		//taskNames+=Name
		public Assignment getTaskNamesAssignment_1_1() { return cTaskNamesAssignment_1_1; }

		//Name
		public RuleCall getTaskNamesNameParserRuleCall_1_1_0() { return cTaskNamesNameParserRuleCall_1_1_0; }
	}

	public class BodyStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.BodyStub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSubprogramSpecificationParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cPackageBodyStubParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cTaskBodyStubParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cProtectedBodyStubParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cIS_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSEPARATE_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//BodyStub:
		//	(SubprogramSpecification
		//	| PackageBodyStub
		//	| TaskBodyStub
		//	| ProtectedBodyStub) IS_ SEPARATE_;
		@Override public ParserRule getRule() { return rule; }

		//(SubprogramSpecification | PackageBodyStub | TaskBodyStub | ProtectedBodyStub) IS_ SEPARATE_
		public Group getGroup() { return cGroup; }

		//(SubprogramSpecification | PackageBodyStub | TaskBodyStub | ProtectedBodyStub)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//SubprogramSpecification
		public RuleCall getSubprogramSpecificationParserRuleCall_0_0() { return cSubprogramSpecificationParserRuleCall_0_0; }

		//PackageBodyStub
		public RuleCall getPackageBodyStubParserRuleCall_0_1() { return cPackageBodyStubParserRuleCall_0_1; }

		//TaskBodyStub
		public RuleCall getTaskBodyStubParserRuleCall_0_2() { return cTaskBodyStubParserRuleCall_0_2; }

		//ProtectedBodyStub
		public RuleCall getProtectedBodyStubParserRuleCall_0_3() { return cProtectedBodyStubParserRuleCall_0_3; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_1() { return cIS_TerminalRuleCall_1; }

		//SEPARATE_
		public RuleCall getSEPARATE_TerminalRuleCall_2() { return cSEPARATE_TerminalRuleCall_2; }
	}

	public class PackageBodyStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PackageBodyStub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPACKAGE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBODY_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//PackageBodyStub:
		//	PACKAGE_ BODY_ name=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }

		//PACKAGE_ BODY_ name=IDENTIFIER
		public Group getGroup() { return cGroup; }

		//PACKAGE_
		public RuleCall getPACKAGE_TerminalRuleCall_0() { return cPACKAGE_TerminalRuleCall_0; }

		//BODY_
		public RuleCall getBODY_TerminalRuleCall_1() { return cBODY_TerminalRuleCall_1; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_2_0() { return cNameIDENTIFIERTerminalRuleCall_2_0; }
	}

	public class TaskBodyStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.TaskBodyStub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTASK_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBODY_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//TaskBodyStub:
		//	TASK_ BODY_ name=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }

		//TASK_ BODY_ name=IDENTIFIER
		public Group getGroup() { return cGroup; }

		//TASK_
		public RuleCall getTASK_TerminalRuleCall_0() { return cTASK_TerminalRuleCall_0; }

		//BODY_
		public RuleCall getBODY_TerminalRuleCall_1() { return cBODY_TerminalRuleCall_1; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_2_0() { return cNameIDENTIFIERTerminalRuleCall_2_0; }
	}

	public class ProtectedBodyStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ProtectedBodyStub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPROTECTED_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBODY_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ProtectedBodyStub:
		//	PROTECTED_ BODY_ name=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }

		//PROTECTED_ BODY_ name=IDENTIFIER
		public Group getGroup() { return cGroup; }

		//PROTECTED_
		public RuleCall getPROTECTED_TerminalRuleCall_0() { return cPROTECTED_TerminalRuleCall_0; }

		//BODY_
		public RuleCall getBODY_TerminalRuleCall_1() { return cBODY_TerminalRuleCall_1; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_2_0() { return cNameIDENTIFIERTerminalRuleCall_2_0; }
	}

	public class SeparateSubunitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SeparateSubunit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSEPARATE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cParentUnitNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParentUnitNamePATHIDENTIFIERParserRuleCall_2_0 = (RuleCall)cParentUnitNameAssignment_2.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cProperBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProperBodyProperBodyParserRuleCall_4_0 = (RuleCall)cProperBodyAssignment_4.eContents().get(0);
		
		//SeparateSubunit:
		//	SEPARATE_ PG parentUnitName=PATHIDENTIFIER PD properBody=ProperBody;
		@Override public ParserRule getRule() { return rule; }

		//SEPARATE_ PG parentUnitName=PATHIDENTIFIER PD properBody=ProperBody
		public Group getGroup() { return cGroup; }

		//SEPARATE_
		public RuleCall getSEPARATE_TerminalRuleCall_0() { return cSEPARATE_TerminalRuleCall_0; }

		//PG
		public RuleCall getPGTerminalRuleCall_1() { return cPGTerminalRuleCall_1; }

		//parentUnitName=PATHIDENTIFIER
		public Assignment getParentUnitNameAssignment_2() { return cParentUnitNameAssignment_2; }

		//PATHIDENTIFIER
		public RuleCall getParentUnitNamePATHIDENTIFIERParserRuleCall_2_0() { return cParentUnitNamePATHIDENTIFIERParserRuleCall_2_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_3() { return cPDTerminalRuleCall_3; }

		//properBody=ProperBody
		public Assignment getProperBodyAssignment_4() { return cProperBodyAssignment_4; }

		//ProperBody
		public RuleCall getProperBodyProperBodyParserRuleCall_4_0() { return cProperBodyProperBodyParserRuleCall_4_0; }
	}

	public class RaiseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RaiseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRaiseStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cRAISE_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExceptionNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExceptionNameNameParserRuleCall_2_0_0 = (RuleCall)cExceptionNameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cWITH_TerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Assignment cWithExpressionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cWithExpressionExpressionParserRuleCall_2_1_1_0 = (RuleCall)cWithExpressionAssignment_2_1_1.eContents().get(0);
		
		//RaiseStatement:
		//	{RaiseStatement} RAISE_ (exceptionName=Name (WITH_ withExpression=Expression)?)?;
		@Override public ParserRule getRule() { return rule; }

		//{RaiseStatement} RAISE_ (exceptionName=Name (WITH_ withExpression=Expression)?)?
		public Group getGroup() { return cGroup; }

		//{RaiseStatement}
		public Action getRaiseStatementAction_0() { return cRaiseStatementAction_0; }

		//// TODO: semantic rule : Check that Expression is of type String
		//RAISE_
		public RuleCall getRAISE_TerminalRuleCall_1() { return cRAISE_TerminalRuleCall_1; }

		//(exceptionName=Name (WITH_ withExpression=Expression)?)?
		public Group getGroup_2() { return cGroup_2; }

		//exceptionName=Name
		public Assignment getExceptionNameAssignment_2_0() { return cExceptionNameAssignment_2_0; }

		//Name
		public RuleCall getExceptionNameNameParserRuleCall_2_0_0() { return cExceptionNameNameParserRuleCall_2_0_0; }

		//(WITH_ withExpression=Expression)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//WITH_
		public RuleCall getWITH_TerminalRuleCall_2_1_0() { return cWITH_TerminalRuleCall_2_1_0; }

		//withExpression=Expression
		public Assignment getWithExpressionAssignment_2_1_1() { return cWithExpressionAssignment_2_1_1; }

		//Expression
		public RuleCall getWithExpressionExpressionParserRuleCall_2_1_1_0() { return cWithExpressionExpressionParserRuleCall_2_1_1_0; }
	}

	public class GenericActualPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.GenericActualPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cGenericAssociationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGenericAssociationGenericAssociationParserRuleCall_1_0 = (RuleCall)cGenericAssociationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cVTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cGenericAssociationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGenericAssociationGenericAssociationParserRuleCall_2_1_0 = (RuleCall)cGenericAssociationAssignment_2_1.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//GenericActualPart:
		//	PG genericAssociation+=GenericAssociation (V genericAssociation+=GenericAssociation)* PD;
		@Override public ParserRule getRule() { return rule; }

		//PG genericAssociation+=GenericAssociation (V genericAssociation+=GenericAssociation)* PD
		public Group getGroup() { return cGroup; }

		//PG
		public RuleCall getPGTerminalRuleCall_0() { return cPGTerminalRuleCall_0; }

		//genericAssociation+=GenericAssociation
		public Assignment getGenericAssociationAssignment_1() { return cGenericAssociationAssignment_1; }

		//GenericAssociation
		public RuleCall getGenericAssociationGenericAssociationParserRuleCall_1_0() { return cGenericAssociationGenericAssociationParserRuleCall_1_0; }

		//(V genericAssociation+=GenericAssociation)*
		public Group getGroup_2() { return cGroup_2; }

		//V
		public RuleCall getVTerminalRuleCall_2_0() { return cVTerminalRuleCall_2_0; }

		//genericAssociation+=GenericAssociation
		public Assignment getGenericAssociationAssignment_2_1() { return cGenericAssociationAssignment_2_1; }

		//GenericAssociation
		public RuleCall getGenericAssociationGenericAssociationParserRuleCall_2_1_0() { return cGenericAssociationGenericAssociationParserRuleCall_2_1_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_3() { return cPDTerminalRuleCall_3; }
	}

	public class GenericAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.GenericAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSelectorNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSelectorNameSelectorNameParserRuleCall_0_0_0 = (RuleCall)cSelectorNameAssignment_0_0.eContents().get(0);
		private final RuleCall cFLECHETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cExpplicitGenericActualParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpplicitGenericActualParamExplicitGenericActualParameterParserRuleCall_1_0 = (RuleCall)cExpplicitGenericActualParamAssignment_1.eContents().get(0);
		
		//GenericAssociation:
		//	(selectorName=SelectorName FLECHE)? expplicitGenericActualParam=ExplicitGenericActualParameter;
		@Override public ParserRule getRule() { return rule; }

		//(selectorName=SelectorName FLECHE)? expplicitGenericActualParam=ExplicitGenericActualParameter
		public Group getGroup() { return cGroup; }

		//(selectorName=SelectorName FLECHE)?
		public Group getGroup_0() { return cGroup_0; }

		//selectorName=SelectorName
		public Assignment getSelectorNameAssignment_0_0() { return cSelectorNameAssignment_0_0; }

		//SelectorName
		public RuleCall getSelectorNameSelectorNameParserRuleCall_0_0_0() { return cSelectorNameSelectorNameParserRuleCall_0_0_0; }

		//FLECHE
		public RuleCall getFLECHETerminalRuleCall_0_1() { return cFLECHETerminalRuleCall_0_1; }

		//expplicitGenericActualParam=ExplicitGenericActualParameter
		public Assignment getExpplicitGenericActualParamAssignment_1() { return cExpplicitGenericActualParamAssignment_1; }

		//ExplicitGenericActualParameter
		public RuleCall getExpplicitGenericActualParamExplicitGenericActualParameterParserRuleCall_1_0() { return cExpplicitGenericActualParamExplicitGenericActualParameterParserRuleCall_1_0; }
	}

	public class ExplicitGenericActualParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ExplicitGenericActualParameter");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExplicitGenericActualParameter:
		//	Expression // TODO : semantic check: 
		//	// if crossref is Expression = Name, check it is
		//	//        | Variable_name
		//	//        | Subprogram_name
		//	//        | Entry_name
		//	//        | Subtype_mark
		//	//        | Package_instance_name
		//;
		@Override public ParserRule getRule() { return rule; }

		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.TypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumerationTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRecordTypeDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDerivedTypeDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIntegerTypeDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cArrayTypeDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAccessTypeDefinitionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInterfaceTypeDefinitionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		////Code_statement: // TODO: To be removed
		////        qualifiedExpression=Qualified_expression PV
		////        ;
		/////////////////////////////////////////////////////////////////////////////////
		////
		////                       Grammar module : TYPES.XTEXT 
		////
		/////////////////////////////////////////////////////////////////////////////////
		//TypeDefinition:
		//	EnumerationTypeDefinition
		//	| RealTypeDefinition
		//	| RecordTypeDefinition
		//	| DerivedTypeDefinition
		//	| IntegerTypeDefinition
		//	| ArrayTypeDefinition
		//	| AccessTypeDefinition
		//	| InterfaceTypeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//EnumerationTypeDefinition | RealTypeDefinition | RecordTypeDefinition | DerivedTypeDefinition | IntegerTypeDefinition |
		//ArrayTypeDefinition | AccessTypeDefinition | InterfaceTypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnumerationTypeDefinition
		public RuleCall getEnumerationTypeDefinitionParserRuleCall_0() { return cEnumerationTypeDefinitionParserRuleCall_0; }

		//RealTypeDefinition
		public RuleCall getRealTypeDefinitionParserRuleCall_1() { return cRealTypeDefinitionParserRuleCall_1; }

		//RecordTypeDefinition
		public RuleCall getRecordTypeDefinitionParserRuleCall_2() { return cRecordTypeDefinitionParserRuleCall_2; }

		//DerivedTypeDefinition
		public RuleCall getDerivedTypeDefinitionParserRuleCall_3() { return cDerivedTypeDefinitionParserRuleCall_3; }

		//IntegerTypeDefinition
		public RuleCall getIntegerTypeDefinitionParserRuleCall_4() { return cIntegerTypeDefinitionParserRuleCall_4; }

		//ArrayTypeDefinition
		public RuleCall getArrayTypeDefinitionParserRuleCall_5() { return cArrayTypeDefinitionParserRuleCall_5; }

		//AccessTypeDefinition
		public RuleCall getAccessTypeDefinitionParserRuleCall_6() { return cAccessTypeDefinitionParserRuleCall_6; }

		//InterfaceTypeDefinition
		public RuleCall getInterfaceTypeDefinitionParserRuleCall_7() { return cInterfaceTypeDefinitionParserRuleCall_7; }
	}

	public class DiscriminantPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DiscriminantPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnknownDiscriminantPartParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKnownDiscriminantPartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DiscriminantPart:
		//	UnknownDiscriminantPart
		//	| KnownDiscriminantPart;
		@Override public ParserRule getRule() { return rule; }

		//UnknownDiscriminantPart | KnownDiscriminantPart
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnknownDiscriminantPart
		public RuleCall getUnknownDiscriminantPartParserRuleCall_0() { return cUnknownDiscriminantPartParserRuleCall_0; }

		//KnownDiscriminantPart
		public RuleCall getKnownDiscriminantPartParserRuleCall_1() { return cKnownDiscriminantPartParserRuleCall_1; }
	}

	public class UnknownDiscriminantPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.UnknownDiscriminantPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cBoxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoxBOITTerminalRuleCall_1_0 = (RuleCall)cBoxAssignment_1.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//UnknownDiscriminantPart:
		//	PG box?=BOIT PD;
		@Override public ParserRule getRule() { return rule; }

		//PG box?=BOIT PD
		public Group getGroup() { return cGroup; }

		//PG
		public RuleCall getPGTerminalRuleCall_0() { return cPGTerminalRuleCall_0; }

		//box?=BOIT
		public Assignment getBoxAssignment_1() { return cBoxAssignment_1; }

		//BOIT
		public RuleCall getBoxBOITTerminalRuleCall_1_0() { return cBoxBOITTerminalRuleCall_1_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_2() { return cPDTerminalRuleCall_2; }
	}

	public class KnownDiscriminantPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.KnownDiscriminantPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cDiscriminantsSpecificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDiscriminantsSpecificationDiscriminantSpecificationParserRuleCall_1_0 = (RuleCall)cDiscriminantsSpecificationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cPVTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cDiscriminantsSpecificationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDiscriminantsSpecificationDiscriminantSpecificationParserRuleCall_2_1_0 = (RuleCall)cDiscriminantsSpecificationAssignment_2_1.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//KnownDiscriminantPart:
		//	PG discriminantsSpecification+=DiscriminantSpecification (PV discriminantsSpecification+=DiscriminantSpecification)*
		//	PD;
		@Override public ParserRule getRule() { return rule; }

		//PG discriminantsSpecification+=DiscriminantSpecification (PV discriminantsSpecification+=DiscriminantSpecification)* PD
		public Group getGroup() { return cGroup; }

		//PG
		public RuleCall getPGTerminalRuleCall_0() { return cPGTerminalRuleCall_0; }

		//discriminantsSpecification+=DiscriminantSpecification
		public Assignment getDiscriminantsSpecificationAssignment_1() { return cDiscriminantsSpecificationAssignment_1; }

		//DiscriminantSpecification
		public RuleCall getDiscriminantsSpecificationDiscriminantSpecificationParserRuleCall_1_0() { return cDiscriminantsSpecificationDiscriminantSpecificationParserRuleCall_1_0; }

		//(PV discriminantsSpecification+=DiscriminantSpecification)*
		public Group getGroup_2() { return cGroup_2; }

		//PV
		public RuleCall getPVTerminalRuleCall_2_0() { return cPVTerminalRuleCall_2_0; }

		//discriminantsSpecification+=DiscriminantSpecification
		public Assignment getDiscriminantsSpecificationAssignment_2_1() { return cDiscriminantsSpecificationAssignment_2_1; }

		//DiscriminantSpecification
		public RuleCall getDiscriminantsSpecificationDiscriminantSpecificationParserRuleCall_2_1_0() { return cDiscriminantsSpecificationDiscriminantSpecificationParserRuleCall_2_1_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_3() { return cPDTerminalRuleCall_3; }
	}

	public class DiscriminantSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DiscriminantSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefiningIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefiningIdentifiersDefiningIdentifierListParserRuleCall_0_0 = (RuleCall)cDefiningIdentifiersAssignment_0.eContents().get(0);
		private final RuleCall cDPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cOptNullExclusionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOptNullExclusionOptNullExclusionParserRuleCall_2_0 = (RuleCall)cOptNullExclusionAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cAccessDefinitionAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cAccessDefinitionNotNullAccessDefinitionParserRuleCall_3_0_0 = (RuleCall)cAccessDefinitionAssignment_3_0.eContents().get(0);
		private final Assignment cSubtypeMarkAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cSubtypeMarkNameParserRuleCall_3_1_0 = (RuleCall)cSubtypeMarkAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cDPETerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_4_1_0 = (RuleCall)cDefaultValueAssignment_4_1.eContents().get(0);
		
		//DiscriminantSpecification:
		//	definingIdentifiers=DefiningIdentifierList DP optNullExclusion=OptNullExclusion
		//	(accessDefinition=NotNullAccessDefinition | subtypeMark=Name) (DPE defaultValue=Expression)?;
		@Override public ParserRule getRule() { return rule; }

		//definingIdentifiers=DefiningIdentifierList DP optNullExclusion=OptNullExclusion
		//(accessDefinition=NotNullAccessDefinition | subtypeMark=Name) (DPE defaultValue=Expression)?
		public Group getGroup() { return cGroup; }

		//definingIdentifiers=DefiningIdentifierList
		public Assignment getDefiningIdentifiersAssignment_0() { return cDefiningIdentifiersAssignment_0; }

		//DefiningIdentifierList
		public RuleCall getDefiningIdentifiersDefiningIdentifierListParserRuleCall_0_0() { return cDefiningIdentifiersDefiningIdentifierListParserRuleCall_0_0; }

		//DP
		public RuleCall getDPTerminalRuleCall_1() { return cDPTerminalRuleCall_1; }

		//optNullExclusion=OptNullExclusion
		public Assignment getOptNullExclusionAssignment_2() { return cOptNullExclusionAssignment_2; }

		//OptNullExclusion
		public RuleCall getOptNullExclusionOptNullExclusionParserRuleCall_2_0() { return cOptNullExclusionOptNullExclusionParserRuleCall_2_0; }

		//(accessDefinition=NotNullAccessDefinition | subtypeMark=Name)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//accessDefinition=NotNullAccessDefinition
		public Assignment getAccessDefinitionAssignment_3_0() { return cAccessDefinitionAssignment_3_0; }

		//NotNullAccessDefinition
		public RuleCall getAccessDefinitionNotNullAccessDefinitionParserRuleCall_3_0_0() { return cAccessDefinitionNotNullAccessDefinitionParserRuleCall_3_0_0; }

		//subtypeMark=Name
		public Assignment getSubtypeMarkAssignment_3_1() { return cSubtypeMarkAssignment_3_1; }

		//Name
		public RuleCall getSubtypeMarkNameParserRuleCall_3_1_0() { return cSubtypeMarkNameParserRuleCall_3_1_0; }

		//(DPE defaultValue=Expression)?
		public Group getGroup_4() { return cGroup_4; }

		//DPE
		public RuleCall getDPETerminalRuleCall_4_0() { return cDPETerminalRuleCall_4_0; }

		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_4_1() { return cDefaultValueAssignment_4_1; }

		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_4_1_0() { return cDefaultValueExpressionParserRuleCall_4_1_0; }
	}

	public class InterfaceListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.InterfaceList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInterfaceSubtypeMarkAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInterfaceSubtypeMarkNameParserRuleCall_0_0 = (RuleCall)cInterfaceSubtypeMarkAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cAND_TerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cInterfaceSubtypeMarkAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInterfaceSubtypeMarkNameParserRuleCall_1_1_0 = (RuleCall)cInterfaceSubtypeMarkAssignment_1_1.eContents().get(0);
		
		//InterfaceList:
		//	interfaceSubtypeMark+=Name (AND_ interfaceSubtypeMark+=Name)*;
		@Override public ParserRule getRule() { return rule; }

		//interfaceSubtypeMark+=Name (AND_ interfaceSubtypeMark+=Name)*
		public Group getGroup() { return cGroup; }

		//interfaceSubtypeMark+=Name
		public Assignment getInterfaceSubtypeMarkAssignment_0() { return cInterfaceSubtypeMarkAssignment_0; }

		//Name
		public RuleCall getInterfaceSubtypeMarkNameParserRuleCall_0_0() { return cInterfaceSubtypeMarkNameParserRuleCall_0_0; }

		//(AND_ interfaceSubtypeMark+=Name)*
		public Group getGroup_1() { return cGroup_1; }

		//AND_
		public RuleCall getAND_TerminalRuleCall_1_0() { return cAND_TerminalRuleCall_1_0; }

		//interfaceSubtypeMark+=Name
		public Assignment getInterfaceSubtypeMarkAssignment_1_1() { return cInterfaceSubtypeMarkAssignment_1_1; }

		//Name
		public RuleCall getInterfaceSubtypeMarkNameParserRuleCall_1_1_0() { return cInterfaceSubtypeMarkNameParserRuleCall_1_1_0; }
	}

	public class InterfaceTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.InterfaceTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceTypeDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLimitedAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLimitedLIMITED_TerminalRuleCall_1_0_0 = (RuleCall)cLimitedAssignment_1_0.eContents().get(0);
		private final Assignment cTaskAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTaskTASK_TerminalRuleCall_1_1_0 = (RuleCall)cTaskAssignment_1_1.eContents().get(0);
		private final Assignment cProtectedAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cProtectedPROTECTED_TerminalRuleCall_1_2_0 = (RuleCall)cProtectedAssignment_1_2.eContents().get(0);
		private final Assignment cSynchroAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cSynchroSYNCHRONIZED_TerminalRuleCall_1_3_0 = (RuleCall)cSynchroAssignment_1_3.eContents().get(0);
		private final RuleCall cINTERFACE_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cAND_TerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cInterfaceListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInterfaceListInterfaceListParserRuleCall_3_1_0 = (RuleCall)cInterfaceListAssignment_3_1.eContents().get(0);
		
		//InterfaceTypeDefinition:
		//	{InterfaceTypeDefinition} (limited?=LIMITED_ | task?=TASK_ | protected?=PROTECTED_ | synchro?=SYNCHRONIZED_)?
		//	INTERFACE_ (AND_ interfaceList=InterfaceList)?;
		@Override public ParserRule getRule() { return rule; }

		//{InterfaceTypeDefinition} (limited?=LIMITED_ | task?=TASK_ | protected?=PROTECTED_ | synchro?=SYNCHRONIZED_)? INTERFACE_
		//(AND_ interfaceList=InterfaceList)?
		public Group getGroup() { return cGroup; }

		//{InterfaceTypeDefinition}
		public Action getInterfaceTypeDefinitionAction_0() { return cInterfaceTypeDefinitionAction_0; }

		//(limited?=LIMITED_ | task?=TASK_ | protected?=PROTECTED_ | synchro?=SYNCHRONIZED_)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//limited?=LIMITED_
		public Assignment getLimitedAssignment_1_0() { return cLimitedAssignment_1_0; }

		//LIMITED_
		public RuleCall getLimitedLIMITED_TerminalRuleCall_1_0_0() { return cLimitedLIMITED_TerminalRuleCall_1_0_0; }

		//task?=TASK_
		public Assignment getTaskAssignment_1_1() { return cTaskAssignment_1_1; }

		//TASK_
		public RuleCall getTaskTASK_TerminalRuleCall_1_1_0() { return cTaskTASK_TerminalRuleCall_1_1_0; }

		//protected?=PROTECTED_
		public Assignment getProtectedAssignment_1_2() { return cProtectedAssignment_1_2; }

		//PROTECTED_
		public RuleCall getProtectedPROTECTED_TerminalRuleCall_1_2_0() { return cProtectedPROTECTED_TerminalRuleCall_1_2_0; }

		//synchro?=SYNCHRONIZED_
		public Assignment getSynchroAssignment_1_3() { return cSynchroAssignment_1_3; }

		//SYNCHRONIZED_
		public RuleCall getSynchroSYNCHRONIZED_TerminalRuleCall_1_3_0() { return cSynchroSYNCHRONIZED_TerminalRuleCall_1_3_0; }

		//INTERFACE_
		public RuleCall getINTERFACE_TerminalRuleCall_2() { return cINTERFACE_TerminalRuleCall_2; }

		//(AND_ interfaceList=InterfaceList)?
		public Group getGroup_3() { return cGroup_3; }

		//AND_
		public RuleCall getAND_TerminalRuleCall_3_0() { return cAND_TerminalRuleCall_3_0; }

		//interfaceList=InterfaceList
		public Assignment getInterfaceListAssignment_3_1() { return cInterfaceListAssignment_3_1; }

		//InterfaceList
		public RuleCall getInterfaceListInterfaceListParserRuleCall_3_1_0() { return cInterfaceListInterfaceListParserRuleCall_3_1_0; }
	}

	public class DerivedTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DerivedTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAbstractABSTRACT_TerminalRuleCall_0_0 = (RuleCall)cAbstractAssignment_0.eContents().get(0);
		private final Assignment cLimitedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLimitedLIMITED_TerminalRuleCall_1_0 = (RuleCall)cLimitedAssignment_1.eContents().get(0);
		private final RuleCall cNEW_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSubtypeIndicationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubtypeIndicationSubtypeIndicationParserRuleCall_3_0 = (RuleCall)cSubtypeIndicationAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final RuleCall cAND_TerminalRuleCall_4_0_0 = (RuleCall)cGroup_4_0.eContents().get(0);
		private final Assignment cInterfaceListAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cInterfaceListInterfaceListParserRuleCall_4_0_1_0 = (RuleCall)cInterfaceListAssignment_4_0_1.eContents().get(0);
		private final Assignment cRecordExtentionPartAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRecordExtentionPartRecordExtensionPartParserRuleCall_4_1_0 = (RuleCall)cRecordExtentionPartAssignment_4_1.eContents().get(0);
		
		//DerivedTypeDefinition:
		//	abstract=ABSTRACT_? limited=LIMITED_? NEW_ subtypeIndication=SubtypeIndication ((AND_ interfaceList=InterfaceList)?
		//	recordExtentionPart=RecordExtensionPart)?;
		@Override public ParserRule getRule() { return rule; }

		//abstract=ABSTRACT_? limited=LIMITED_? NEW_ subtypeIndication=SubtypeIndication ((AND_ interfaceList=InterfaceList)?
		//recordExtentionPart=RecordExtensionPart)?
		public Group getGroup() { return cGroup; }

		//abstract=ABSTRACT_?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }

		//ABSTRACT_
		public RuleCall getAbstractABSTRACT_TerminalRuleCall_0_0() { return cAbstractABSTRACT_TerminalRuleCall_0_0; }

		//limited=LIMITED_?
		public Assignment getLimitedAssignment_1() { return cLimitedAssignment_1; }

		//LIMITED_
		public RuleCall getLimitedLIMITED_TerminalRuleCall_1_0() { return cLimitedLIMITED_TerminalRuleCall_1_0; }

		//NEW_
		public RuleCall getNEW_TerminalRuleCall_2() { return cNEW_TerminalRuleCall_2; }

		//subtypeIndication=SubtypeIndication
		public Assignment getSubtypeIndicationAssignment_3() { return cSubtypeIndicationAssignment_3; }

		//SubtypeIndication
		public RuleCall getSubtypeIndicationSubtypeIndicationParserRuleCall_3_0() { return cSubtypeIndicationSubtypeIndicationParserRuleCall_3_0; }

		//((AND_ interfaceList=InterfaceList)? recordExtentionPart=RecordExtensionPart)?
		public Group getGroup_4() { return cGroup_4; }

		//(AND_ interfaceList=InterfaceList)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//AND_
		public RuleCall getAND_TerminalRuleCall_4_0_0() { return cAND_TerminalRuleCall_4_0_0; }

		//interfaceList=InterfaceList
		public Assignment getInterfaceListAssignment_4_0_1() { return cInterfaceListAssignment_4_0_1; }

		//InterfaceList
		public RuleCall getInterfaceListInterfaceListParserRuleCall_4_0_1_0() { return cInterfaceListInterfaceListParserRuleCall_4_0_1_0; }

		//recordExtentionPart=RecordExtensionPart
		public Assignment getRecordExtentionPartAssignment_4_1() { return cRecordExtentionPartAssignment_4_1; }

		//RecordExtensionPart
		public RuleCall getRecordExtentionPartRecordExtensionPartParserRuleCall_4_1_0() { return cRecordExtentionPartRecordExtensionPartParserRuleCall_4_1_0; }
	}

	public class RecordExtensionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RecordExtensionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWITH_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cRecordDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecordDefinitionRecordDefinitionParserRuleCall_1_0 = (RuleCall)cRecordDefinitionAssignment_1.eContents().get(0);
		
		//RecordExtensionPart:
		//	WITH_ recordDefinition=RecordDefinition;
		@Override public ParserRule getRule() { return rule; }

		//WITH_ recordDefinition=RecordDefinition
		public Group getGroup() { return cGroup; }

		//WITH_
		public RuleCall getWITH_TerminalRuleCall_0() { return cWITH_TerminalRuleCall_0; }

		//recordDefinition=RecordDefinition
		public Assignment getRecordDefinitionAssignment_1() { return cRecordDefinitionAssignment_1; }

		//RecordDefinition
		public RuleCall getRecordDefinitionRecordDefinitionParserRuleCall_1_0() { return cRecordDefinitionRecordDefinitionParserRuleCall_1_0; }
	}

	public class AccessTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AccessTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptNullExclusionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOptNullExclusionOptNullExclusionParserRuleCall_0_0 = (RuleCall)cOptNullExclusionAssignment_0.eContents().get(0);
		private final Assignment cAccessDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccessDefinitionAccessSpecificationParserRuleCall_1_0 = (RuleCall)cAccessDefinitionAssignment_1.eContents().get(0);
		
		//AccessTypeDefinition:
		//	optNullExclusion=OptNullExclusion accessDefinition=AccessSpecification;
		@Override public ParserRule getRule() { return rule; }

		//optNullExclusion=OptNullExclusion accessDefinition=AccessSpecification
		public Group getGroup() { return cGroup; }

		//optNullExclusion=OptNullExclusion
		public Assignment getOptNullExclusionAssignment_0() { return cOptNullExclusionAssignment_0; }

		//OptNullExclusion
		public RuleCall getOptNullExclusionOptNullExclusionParserRuleCall_0_0() { return cOptNullExclusionOptNullExclusionParserRuleCall_0_0; }

		//accessDefinition=AccessSpecification
		public Assignment getAccessDefinitionAssignment_1() { return cAccessDefinitionAssignment_1; }

		//AccessSpecification
		public RuleCall getAccessDefinitionAccessSpecificationParserRuleCall_1_0() { return cAccessDefinitionAccessSpecificationParserRuleCall_1_0; }
	}

	public class AccessSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AccessSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAccessToDataDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAccessToSubprogramDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AccessSpecification:
		//	AccessToDataDefinition
		//	| AccessToSubprogramDefinition;
		@Override public ParserRule getRule() { return rule; }

		//AccessToDataDefinition | AccessToSubprogramDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//AccessToDataDefinition
		public RuleCall getAccessToDataDefinitionParserRuleCall_0() { return cAccessToDataDefinitionParserRuleCall_0; }

		//AccessToSubprogramDefinition
		public RuleCall getAccessToSubprogramDefinitionParserRuleCall_1() { return cAccessToSubprogramDefinitionParserRuleCall_1; }
	}

	public class AccessToSubprogramDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AccessToSubprogramDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAccessToSubprogramDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cACCESS_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cProtectedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProtectedPROTECTED_TerminalRuleCall_2_0 = (RuleCall)cProtectedAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cPROCEDURE_TerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Assignment cFormalPartAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cFormalPartFormalPartParserRuleCall_3_0_1_0 = (RuleCall)cFormalPartAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cFUNCTION_TerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Assignment cParameterAndResultProfileAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParameterAndResultProfileParameterAndResultProfileParserRuleCall_3_1_1_0 = (RuleCall)cParameterAndResultProfileAssignment_3_1_1.eContents().get(0);
		
		//AccessToSubprogramDefinition:
		//	{AccessToSubprogramDefinition} ACCESS_ protected?=PROTECTED_? (PROCEDURE_ formalPart=FormalPart?
		//	| FUNCTION_ parameterAndResultProfile=ParameterAndResultProfile);
		@Override public ParserRule getRule() { return rule; }

		//{AccessToSubprogramDefinition} ACCESS_ protected?=PROTECTED_? (PROCEDURE_ formalPart=FormalPart? | FUNCTION_
		//parameterAndResultProfile=ParameterAndResultProfile)
		public Group getGroup() { return cGroup; }

		//{AccessToSubprogramDefinition}
		public Action getAccessToSubprogramDefinitionAction_0() { return cAccessToSubprogramDefinitionAction_0; }

		//ACCESS_
		public RuleCall getACCESS_TerminalRuleCall_1() { return cACCESS_TerminalRuleCall_1; }

		//protected?=PROTECTED_?
		public Assignment getProtectedAssignment_2() { return cProtectedAssignment_2; }

		//PROTECTED_
		public RuleCall getProtectedPROTECTED_TerminalRuleCall_2_0() { return cProtectedPROTECTED_TerminalRuleCall_2_0; }

		//(PROCEDURE_ formalPart=FormalPart? | FUNCTION_ parameterAndResultProfile=ParameterAndResultProfile)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//PROCEDURE_ formalPart=FormalPart?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//PROCEDURE_
		public RuleCall getPROCEDURE_TerminalRuleCall_3_0_0() { return cPROCEDURE_TerminalRuleCall_3_0_0; }

		//formalPart=FormalPart?
		public Assignment getFormalPartAssignment_3_0_1() { return cFormalPartAssignment_3_0_1; }

		//FormalPart
		public RuleCall getFormalPartFormalPartParserRuleCall_3_0_1_0() { return cFormalPartFormalPartParserRuleCall_3_0_1_0; }

		//FUNCTION_ parameterAndResultProfile=ParameterAndResultProfile
		public Group getGroup_3_1() { return cGroup_3_1; }

		//FUNCTION_
		public RuleCall getFUNCTION_TerminalRuleCall_3_1_0() { return cFUNCTION_TerminalRuleCall_3_1_0; }

		//parameterAndResultProfile=ParameterAndResultProfile
		public Assignment getParameterAndResultProfileAssignment_3_1_1() { return cParameterAndResultProfileAssignment_3_1_1; }

		//ParameterAndResultProfile
		public RuleCall getParameterAndResultProfileParameterAndResultProfileParserRuleCall_3_1_1_0() { return cParameterAndResultProfileParameterAndResultProfileParserRuleCall_3_1_1_0; }
	}

	public class AccessToDataDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AccessToDataDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cACCESS_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cGeneralAccessModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGeneralAccessModifierGeneralAccessModifierParserRuleCall_1_0 = (RuleCall)cGeneralAccessModifierAssignment_1.eContents().get(0);
		private final Assignment cSubtypeIndicationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubtypeIndicationSubtypeIndicationParserRuleCall_2_0 = (RuleCall)cSubtypeIndicationAssignment_2.eContents().get(0);
		
		//AccessToDataDefinition:
		//	ACCESS_ generalAccessModifier=GeneralAccessModifier? subtypeIndication=SubtypeIndication;
		@Override public ParserRule getRule() { return rule; }

		//ACCESS_ generalAccessModifier=GeneralAccessModifier? subtypeIndication=SubtypeIndication
		public Group getGroup() { return cGroup; }

		//ACCESS_
		public RuleCall getACCESS_TerminalRuleCall_0() { return cACCESS_TerminalRuleCall_0; }

		//generalAccessModifier=GeneralAccessModifier?
		public Assignment getGeneralAccessModifierAssignment_1() { return cGeneralAccessModifierAssignment_1; }

		//GeneralAccessModifier
		public RuleCall getGeneralAccessModifierGeneralAccessModifierParserRuleCall_1_0() { return cGeneralAccessModifierGeneralAccessModifierParserRuleCall_1_0; }

		//subtypeIndication=SubtypeIndication
		public Assignment getSubtypeIndicationAssignment_2() { return cSubtypeIndicationAssignment_2; }

		//SubtypeIndication
		public RuleCall getSubtypeIndicationSubtypeIndicationParserRuleCall_2_0() { return cSubtypeIndicationSubtypeIndicationParserRuleCall_2_0; }
	}

	public class GeneralAccessModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.GeneralAccessModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cALL_TerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCONSTANT_TerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GeneralAccessModifier:
		//	ALL_
		//	| CONSTANT_;
		@Override public ParserRule getRule() { return rule; }

		//ALL_ | CONSTANT_
		public Alternatives getAlternatives() { return cAlternatives; }

		//ALL_
		public RuleCall getALL_TerminalRuleCall_0() { return cALL_TerminalRuleCall_0; }

		//CONSTANT_
		public RuleCall getCONSTANT_TerminalRuleCall_1() { return cCONSTANT_TerminalRuleCall_1; }
	}

	public class ArrayTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ArrayTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cARRAY_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cArrayIndexesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArrayIndexesArrayIndexesParserRuleCall_2_0 = (RuleCall)cArrayIndexesAssignment_2.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cOF_TerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cComponentDefinitionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComponentDefinitionComponentDefinitionParserRuleCall_5_0 = (RuleCall)cComponentDefinitionAssignment_5.eContents().get(0);
		
		//ArrayTypeDefinition:
		//	ARRAY_
		//	PG arrayIndexes=ArrayIndexes PD OF_ componentDefinition=ComponentDefinition;
		@Override public ParserRule getRule() { return rule; }

		//ARRAY_ PG arrayIndexes=ArrayIndexes PD OF_ componentDefinition=ComponentDefinition
		public Group getGroup() { return cGroup; }

		//ARRAY_
		public RuleCall getARRAY_TerminalRuleCall_0() { return cARRAY_TerminalRuleCall_0; }

		//PG
		public RuleCall getPGTerminalRuleCall_1() { return cPGTerminalRuleCall_1; }

		//arrayIndexes=ArrayIndexes
		public Assignment getArrayIndexesAssignment_2() { return cArrayIndexesAssignment_2; }

		//ArrayIndexes
		public RuleCall getArrayIndexesArrayIndexesParserRuleCall_2_0() { return cArrayIndexesArrayIndexesParserRuleCall_2_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_3() { return cPDTerminalRuleCall_3; }

		//OF_
		public RuleCall getOF_TerminalRuleCall_4() { return cOF_TerminalRuleCall_4; }

		//componentDefinition=ComponentDefinition
		public Assignment getComponentDefinitionAssignment_5() { return cComponentDefinitionAssignment_5; }

		//ComponentDefinition
		public RuleCall getComponentDefinitionComponentDefinitionParserRuleCall_5_0() { return cComponentDefinitionComponentDefinitionParserRuleCall_5_0; }
	}

	public class ArrayIndexesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ArrayIndexes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnconstrainedIndexesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstrainedIndexesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ArrayIndexes:
		//	=> UnconstrainedIndexes
		//	| ConstrainedIndexes;
		@Override public ParserRule getRule() { return rule; }

		//=> UnconstrainedIndexes | ConstrainedIndexes
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> UnconstrainedIndexes
		public RuleCall getUnconstrainedIndexesParserRuleCall_0() { return cUnconstrainedIndexesParserRuleCall_0; }

		//ConstrainedIndexes
		public RuleCall getConstrainedIndexesParserRuleCall_1() { return cConstrainedIndexesParserRuleCall_1; }
	}

	public class UnconstrainedIndexesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.UnconstrainedIndexes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubtypeMarkAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubtypeMarkNameParserRuleCall_0_0 = (RuleCall)cSubtypeMarkAssignment_0.eContents().get(0);
		private final RuleCall cRANGE_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cBOITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cVTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cSubtypeMarkAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSubtypeMarkNameParserRuleCall_3_1_0 = (RuleCall)cSubtypeMarkAssignment_3_1.eContents().get(0);
		private final RuleCall cRANGE_TerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final RuleCall cBOITTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		
		//UnconstrainedIndexes:
		//	subtypeMark+=Name RANGE_ BOIT (V subtypeMark+=Name RANGE_ BOIT)*;
		@Override public ParserRule getRule() { return rule; }

		//subtypeMark+=Name RANGE_ BOIT (V subtypeMark+=Name RANGE_ BOIT)*
		public Group getGroup() { return cGroup; }

		//subtypeMark+=Name
		public Assignment getSubtypeMarkAssignment_0() { return cSubtypeMarkAssignment_0; }

		//Name
		public RuleCall getSubtypeMarkNameParserRuleCall_0_0() { return cSubtypeMarkNameParserRuleCall_0_0; }

		//RANGE_
		public RuleCall getRANGE_TerminalRuleCall_1() { return cRANGE_TerminalRuleCall_1; }

		//BOIT
		public RuleCall getBOITTerminalRuleCall_2() { return cBOITTerminalRuleCall_2; }

		//(V subtypeMark+=Name RANGE_ BOIT)*
		public Group getGroup_3() { return cGroup_3; }

		//V
		public RuleCall getVTerminalRuleCall_3_0() { return cVTerminalRuleCall_3_0; }

		//subtypeMark+=Name
		public Assignment getSubtypeMarkAssignment_3_1() { return cSubtypeMarkAssignment_3_1; }

		//Name
		public RuleCall getSubtypeMarkNameParserRuleCall_3_1_0() { return cSubtypeMarkNameParserRuleCall_3_1_0; }

		//RANGE_
		public RuleCall getRANGE_TerminalRuleCall_3_2() { return cRANGE_TerminalRuleCall_3_2; }

		//BOIT
		public RuleCall getBOITTerminalRuleCall_3_3() { return cBOITTerminalRuleCall_3_3; }
	}

	public class ConstrainedIndexesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ConstrainedIndexes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstrainedIndexAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstrainedIndexDiscreteSubtypeDefinitionParserRuleCall_0_0 = (RuleCall)cConstrainedIndexAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cVTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cConstrainedIndexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstrainedIndexDiscreteSubtypeDefinitionParserRuleCall_1_1_0 = (RuleCall)cConstrainedIndexAssignment_1_1.eContents().get(0);
		
		//ConstrainedIndexes:
		//	constrainedIndex+=DiscreteSubtypeDefinition (V constrainedIndex+=DiscreteSubtypeDefinition)*;
		@Override public ParserRule getRule() { return rule; }

		//constrainedIndex+=DiscreteSubtypeDefinition (V constrainedIndex+=DiscreteSubtypeDefinition)*
		public Group getGroup() { return cGroup; }

		//constrainedIndex+=DiscreteSubtypeDefinition
		public Assignment getConstrainedIndexAssignment_0() { return cConstrainedIndexAssignment_0; }

		//DiscreteSubtypeDefinition
		public RuleCall getConstrainedIndexDiscreteSubtypeDefinitionParserRuleCall_0_0() { return cConstrainedIndexDiscreteSubtypeDefinitionParserRuleCall_0_0; }

		//(V constrainedIndex+=DiscreteSubtypeDefinition)*
		public Group getGroup_1() { return cGroup_1; }

		//V
		public RuleCall getVTerminalRuleCall_1_0() { return cVTerminalRuleCall_1_0; }

		//constrainedIndex+=DiscreteSubtypeDefinition
		public Assignment getConstrainedIndexAssignment_1_1() { return cConstrainedIndexAssignment_1_1; }

		//DiscreteSubtypeDefinition
		public RuleCall getConstrainedIndexDiscreteSubtypeDefinitionParserRuleCall_1_1_0() { return cConstrainedIndexDiscreteSubtypeDefinitionParserRuleCall_1_1_0; }
	}

	public class DiscreteSubtypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DiscreteSubtypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDiscreteRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubtypeIndicationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DiscreteSubtypeDefinition:
		//	=> DiscreteRange
		//	| SubtypeIndication // TODO: Semantic rule: check Subtype_indication is discrete. 
		//;
		@Override public ParserRule getRule() { return rule; }

		//=> DiscreteRange | SubtypeIndication
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> DiscreteRange
		public RuleCall getDiscreteRangeParserRuleCall_0() { return cDiscreteRangeParserRuleCall_0; }

		//SubtypeIndication
		public RuleCall getSubtypeIndicationParserRuleCall_1() { return cSubtypeIndicationParserRuleCall_1; }
	}

	public class ComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ComponentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAliasedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAliasedALIASED_TerminalRuleCall_0_0 = (RuleCall)cAliasedAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cSubtypeIndicationAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cSubtypeIndicationSubtypeIndicationParserRuleCall_1_0_0 = (RuleCall)cSubtypeIndicationAssignment_1_0.eContents().get(0);
		private final Assignment cAnonymousAccessDefinitionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cAnonymousAccessDefinitionAnonymousAccessDefinitionParserRuleCall_1_1_0 = (RuleCall)cAnonymousAccessDefinitionAssignment_1_1.eContents().get(0);
		
		//ComponentDefinition:
		//	aliased?=ALIASED_? (subtypeIndication=SubtypeIndication
		//	| anonymousAccessDefinition=AnonymousAccessDefinition);
		@Override public ParserRule getRule() { return rule; }

		//aliased?=ALIASED_? (subtypeIndication=SubtypeIndication | anonymousAccessDefinition=AnonymousAccessDefinition)
		public Group getGroup() { return cGroup; }

		//aliased?=ALIASED_?
		public Assignment getAliasedAssignment_0() { return cAliasedAssignment_0; }

		//ALIASED_
		public RuleCall getAliasedALIASED_TerminalRuleCall_0_0() { return cAliasedALIASED_TerminalRuleCall_0_0; }

		//(subtypeIndication=SubtypeIndication | anonymousAccessDefinition=AnonymousAccessDefinition)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//subtypeIndication=SubtypeIndication
		public Assignment getSubtypeIndicationAssignment_1_0() { return cSubtypeIndicationAssignment_1_0; }

		//SubtypeIndication
		public RuleCall getSubtypeIndicationSubtypeIndicationParserRuleCall_1_0_0() { return cSubtypeIndicationSubtypeIndicationParserRuleCall_1_0_0; }

		//anonymousAccessDefinition=AnonymousAccessDefinition
		public Assignment getAnonymousAccessDefinitionAssignment_1_1() { return cAnonymousAccessDefinitionAssignment_1_1; }

		//AnonymousAccessDefinition
		public RuleCall getAnonymousAccessDefinitionAnonymousAccessDefinitionParserRuleCall_1_1_0() { return cAnonymousAccessDefinitionAnonymousAccessDefinitionParserRuleCall_1_1_0; }
	}

	public class AnonymousAccessDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AnonymousAccessDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptNullExclusionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOptNullExclusionOptNullExclusionParserRuleCall_0_0 = (RuleCall)cOptNullExclusionAssignment_0.eContents().get(0);
		private final Assignment cAccessDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccessDefNotNullAccessDefinitionParserRuleCall_1_0 = (RuleCall)cAccessDefAssignment_1.eContents().get(0);
		
		//AnonymousAccessDefinition:
		//	optNullExclusion=OptNullExclusion accessDef=NotNullAccessDefinition;
		@Override public ParserRule getRule() { return rule; }

		//optNullExclusion=OptNullExclusion accessDef=NotNullAccessDefinition
		public Group getGroup() { return cGroup; }

		//optNullExclusion=OptNullExclusion
		public Assignment getOptNullExclusionAssignment_0() { return cOptNullExclusionAssignment_0; }

		//OptNullExclusion
		public RuleCall getOptNullExclusionOptNullExclusionParserRuleCall_0_0() { return cOptNullExclusionOptNullExclusionParserRuleCall_0_0; }

		//accessDef=NotNullAccessDefinition
		public Assignment getAccessDefAssignment_1() { return cAccessDefAssignment_1; }

		//NotNullAccessDefinition
		public RuleCall getAccessDefNotNullAccessDefinitionParserRuleCall_1_0() { return cAccessDefNotNullAccessDefinitionParserRuleCall_1_0; }
	}

	public class NotNullAccessDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NotNullAccessDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cACCESS_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cAccessToDataInstanceParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cAccessToSubprogramDefinitionParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//NotNullAccessDefinition:
		//	ACCESS_ (AccessToDataInstance
		//	| AccessToSubprogramDefinition);
		@Override public ParserRule getRule() { return rule; }

		//ACCESS_ (AccessToDataInstance | AccessToSubprogramDefinition)
		public Group getGroup() { return cGroup; }

		//ACCESS_
		public RuleCall getACCESS_TerminalRuleCall_0() { return cACCESS_TerminalRuleCall_0; }

		//(AccessToDataInstance | AccessToSubprogramDefinition)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//AccessToDataInstance
		public RuleCall getAccessToDataInstanceParserRuleCall_1_0() { return cAccessToDataInstanceParserRuleCall_1_0; }

		//AccessToSubprogramDefinition
		public RuleCall getAccessToSubprogramDefinitionParserRuleCall_1_1() { return cAccessToSubprogramDefinitionParserRuleCall_1_1; }
	}

	public class AccessToDataInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AccessToDataInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstantCONSTANT_TerminalRuleCall_0_0 = (RuleCall)cConstantAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AccessToDataInstance:
		//	constant=CONSTANT_? name=Name;
		@Override public ParserRule getRule() { return rule; }

		//constant=CONSTANT_? name=Name
		public Group getGroup() { return cGroup; }

		//constant=CONSTANT_?
		public Assignment getConstantAssignment_0() { return cConstantAssignment_0; }

		//CONSTANT_
		public RuleCall getConstantCONSTANT_TerminalRuleCall_0_0() { return cConstantCONSTANT_TerminalRuleCall_0_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}

	public class ParameterAndResultProfileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ParameterAndResultProfile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFormalPartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFormalPartFormalPartParserRuleCall_0_0 = (RuleCall)cFormalPartAssignment_0.eContents().get(0);
		private final RuleCall cRETURN_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cOpt_nullExclusionAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cOpt_nullExclusionOptNullExclusionParserRuleCall_2_0_0_0 = (RuleCall)cOpt_nullExclusionAssignment_2_0_0.eContents().get(0);
		private final Assignment cSubtypeMarkAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cSubtypeMarkNameParserRuleCall_2_0_1_0 = (RuleCall)cSubtypeMarkAssignment_2_0_1.eContents().get(0);
		private final Assignment cAnonymousAccessDefinitionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cAnonymousAccessDefinitionAnonymousAccessDefinitionParserRuleCall_2_1_0 = (RuleCall)cAnonymousAccessDefinitionAssignment_2_1.eContents().get(0);
		
		//ParameterAndResultProfile:
		//	formalPart=FormalPart? RETURN_ (opt_nullExclusion=OptNullExclusion subtypeMark=Name // TODO: check this rule
		//	| anonymousAccessDefinition=AnonymousAccessDefinition);
		@Override public ParserRule getRule() { return rule; }

		//formalPart=FormalPart? RETURN_ (opt_nullExclusion=OptNullExclusion subtypeMark=Name // TODO: check this rule
		//| anonymousAccessDefinition=AnonymousAccessDefinition)
		public Group getGroup() { return cGroup; }

		//formalPart=FormalPart?
		public Assignment getFormalPartAssignment_0() { return cFormalPartAssignment_0; }

		//FormalPart
		public RuleCall getFormalPartFormalPartParserRuleCall_0_0() { return cFormalPartFormalPartParserRuleCall_0_0; }

		//RETURN_
		public RuleCall getRETURN_TerminalRuleCall_1() { return cRETURN_TerminalRuleCall_1; }

		//(opt_nullExclusion=OptNullExclusion subtypeMark=Name // TODO: check this rule
		//| anonymousAccessDefinition=AnonymousAccessDefinition)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//opt_nullExclusion=OptNullExclusion subtypeMark=Name
		public Group getGroup_2_0() { return cGroup_2_0; }

		//opt_nullExclusion=OptNullExclusion
		public Assignment getOpt_nullExclusionAssignment_2_0_0() { return cOpt_nullExclusionAssignment_2_0_0; }

		//OptNullExclusion
		public RuleCall getOpt_nullExclusionOptNullExclusionParserRuleCall_2_0_0_0() { return cOpt_nullExclusionOptNullExclusionParserRuleCall_2_0_0_0; }

		//subtypeMark=Name
		public Assignment getSubtypeMarkAssignment_2_0_1() { return cSubtypeMarkAssignment_2_0_1; }

		//Name
		public RuleCall getSubtypeMarkNameParserRuleCall_2_0_1_0() { return cSubtypeMarkNameParserRuleCall_2_0_1_0; }

		//anonymousAccessDefinition=AnonymousAccessDefinition
		public Assignment getAnonymousAccessDefinitionAssignment_2_1() { return cAnonymousAccessDefinitionAssignment_2_1; }

		//AnonymousAccessDefinition
		public RuleCall getAnonymousAccessDefinitionAnonymousAccessDefinitionParserRuleCall_2_1_0() { return cAnonymousAccessDefinitionAnonymousAccessDefinitionParserRuleCall_2_1_0; }
	}

	public class FormalPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FormalPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cParameterSpecificationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterSpecificationsParameterSpecificationParserRuleCall_1_0 = (RuleCall)cParameterSpecificationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cPVTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cParameterSpecificationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterSpecificationsParameterSpecificationParserRuleCall_2_1_0 = (RuleCall)cParameterSpecificationsAssignment_2_1.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//FormalPart:
		//	PG parameterSpecifications+=ParameterSpecification (PV parameterSpecifications+=ParameterSpecification)* PD;
		@Override public ParserRule getRule() { return rule; }

		//PG parameterSpecifications+=ParameterSpecification (PV parameterSpecifications+=ParameterSpecification)* PD
		public Group getGroup() { return cGroup; }

		//PG
		public RuleCall getPGTerminalRuleCall_0() { return cPGTerminalRuleCall_0; }

		//parameterSpecifications+=ParameterSpecification
		public Assignment getParameterSpecificationsAssignment_1() { return cParameterSpecificationsAssignment_1; }

		//ParameterSpecification
		public RuleCall getParameterSpecificationsParameterSpecificationParserRuleCall_1_0() { return cParameterSpecificationsParameterSpecificationParserRuleCall_1_0; }

		//(PV parameterSpecifications+=ParameterSpecification)*
		public Group getGroup_2() { return cGroup_2; }

		//PV
		public RuleCall getPVTerminalRuleCall_2_0() { return cPVTerminalRuleCall_2_0; }

		//parameterSpecifications+=ParameterSpecification
		public Assignment getParameterSpecificationsAssignment_2_1() { return cParameterSpecificationsAssignment_2_1; }

		//ParameterSpecification
		public RuleCall getParameterSpecificationsParameterSpecificationParserRuleCall_2_1_0() { return cParameterSpecificationsParameterSpecificationParserRuleCall_2_1_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_3() { return cPDTerminalRuleCall_3; }
	}

	public class ParameterSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ParameterSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefiningIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefiningIdentifiersDefiningIdentifierListParserRuleCall_0_0 = (RuleCall)cDefiningIdentifiersAssignment_0.eContents().get(0);
		private final RuleCall cDPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cModeAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cModeModeParserRuleCall_2_0_0_0 = (RuleCall)cModeAssignment_2_0_0.eContents().get(0);
		private final Assignment cOptNullExclusionAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cOptNullExclusionOptNullExclusionParserRuleCall_2_0_1_0 = (RuleCall)cOptNullExclusionAssignment_2_0_1.eContents().get(0);
		private final Assignment cSubtypeMarkAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cSubtypeMarkNameParserRuleCall_2_0_2_0 = (RuleCall)cSubtypeMarkAssignment_2_0_2.eContents().get(0);
		private final Assignment cAnonymousAccessDefinitionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cAnonymousAccessDefinitionAnonymousAccessDefinitionParserRuleCall_2_1_0 = (RuleCall)cAnonymousAccessDefinitionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cDPETerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cDefaultExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cDefaultExpressionAssignment_3_1.eContents().get(0);
		
		//ParameterSpecification:
		//	definingIdentifiers=DefiningIdentifierList DP (mode=Mode optNullExclusion=OptNullExclusion subtypeMark=Name
		//	| anonymousAccessDefinition=AnonymousAccessDefinition) (DPE defaultExpression=Expression)?;
		@Override public ParserRule getRule() { return rule; }

		//definingIdentifiers=DefiningIdentifierList DP (mode=Mode optNullExclusion=OptNullExclusion subtypeMark=Name |
		//anonymousAccessDefinition=AnonymousAccessDefinition) (DPE defaultExpression=Expression)?
		public Group getGroup() { return cGroup; }

		//definingIdentifiers=DefiningIdentifierList
		public Assignment getDefiningIdentifiersAssignment_0() { return cDefiningIdentifiersAssignment_0; }

		//DefiningIdentifierList
		public RuleCall getDefiningIdentifiersDefiningIdentifierListParserRuleCall_0_0() { return cDefiningIdentifiersDefiningIdentifierListParserRuleCall_0_0; }

		//DP
		public RuleCall getDPTerminalRuleCall_1() { return cDPTerminalRuleCall_1; }

		//(mode=Mode optNullExclusion=OptNullExclusion subtypeMark=Name | anonymousAccessDefinition=AnonymousAccessDefinition)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//mode=Mode optNullExclusion=OptNullExclusion subtypeMark=Name
		public Group getGroup_2_0() { return cGroup_2_0; }

		//mode=Mode
		public Assignment getModeAssignment_2_0_0() { return cModeAssignment_2_0_0; }

		//Mode
		public RuleCall getModeModeParserRuleCall_2_0_0_0() { return cModeModeParserRuleCall_2_0_0_0; }

		//optNullExclusion=OptNullExclusion
		public Assignment getOptNullExclusionAssignment_2_0_1() { return cOptNullExclusionAssignment_2_0_1; }

		//OptNullExclusion
		public RuleCall getOptNullExclusionOptNullExclusionParserRuleCall_2_0_1_0() { return cOptNullExclusionOptNullExclusionParserRuleCall_2_0_1_0; }

		//subtypeMark=Name
		public Assignment getSubtypeMarkAssignment_2_0_2() { return cSubtypeMarkAssignment_2_0_2; }

		//Name
		public RuleCall getSubtypeMarkNameParserRuleCall_2_0_2_0() { return cSubtypeMarkNameParserRuleCall_2_0_2_0; }

		//anonymousAccessDefinition=AnonymousAccessDefinition
		public Assignment getAnonymousAccessDefinitionAssignment_2_1() { return cAnonymousAccessDefinitionAssignment_2_1; }

		//AnonymousAccessDefinition
		public RuleCall getAnonymousAccessDefinitionAnonymousAccessDefinitionParserRuleCall_2_1_0() { return cAnonymousAccessDefinitionAnonymousAccessDefinitionParserRuleCall_2_1_0; }

		//(DPE defaultExpression=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//DPE
		public RuleCall getDPETerminalRuleCall_3_0() { return cDPETerminalRuleCall_3_0; }

		//defaultExpression=Expression
		public Assignment getDefaultExpressionAssignment_3_1() { return cDefaultExpressionAssignment_3_1; }

		//Expression
		public RuleCall getDefaultExpressionExpressionParserRuleCall_3_1_0() { return cDefaultExpressionExpressionParserRuleCall_3_1_0; }
	}

	public class ModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Mode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInIN_TerminalRuleCall_1_0 = (RuleCall)cInAssignment_1.eContents().get(0);
		private final Assignment cOutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutOUT_TerminalRuleCall_2_0 = (RuleCall)cOutAssignment_2.eContents().get(0);
		
		//Mode:
		//	{Mode} in?=IN_? out?=OUT_?;
		@Override public ParserRule getRule() { return rule; }

		//{Mode} in?=IN_? out?=OUT_?
		public Group getGroup() { return cGroup; }

		//{Mode}
		public Action getModeAction_0() { return cModeAction_0; }

		//in?=IN_?
		public Assignment getInAssignment_1() { return cInAssignment_1; }

		//IN_
		public RuleCall getInIN_TerminalRuleCall_1_0() { return cInIN_TerminalRuleCall_1_0; }

		//out?=OUT_?
		public Assignment getOutAssignment_2() { return cOutAssignment_2; }

		//OUT_
		public RuleCall getOutOUT_TerminalRuleCall_2_0() { return cOutOUT_TerminalRuleCall_2_0; }
	}

	public class IntegerTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.IntegerTypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignedIntegerTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModularTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Discrete_subtype_indication: TODO: To remove
		////      subtypeIndication=Subtype_indication
		////    ;
		//IntegerTypeDefinition:
		//	SignedIntegerTypeDefinition
		//	| ModularTypeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//SignedIntegerTypeDefinition | ModularTypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//SignedIntegerTypeDefinition
		public RuleCall getSignedIntegerTypeDefinitionParserRuleCall_0() { return cSignedIntegerTypeDefinitionParserRuleCall_0; }

		//ModularTypeDefinition
		public RuleCall getModularTypeDefinitionParserRuleCall_1() { return cModularTypeDefinitionParserRuleCall_1; }
	}

	public class SignedIntegerTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SignedIntegerTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRANGE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstSimpleExpressionParserRuleCall_1_0 = (RuleCall)cFirstAssignment_1.eContents().get(0);
		private final RuleCall cPPTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cLastAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLastSimpleExpressionParserRuleCall_3_0 = (RuleCall)cLastAssignment_3.eContents().get(0);
		
		//SignedIntegerTypeDefinition:
		//	RANGE_ first=SimpleExpression PP last=SimpleExpression;
		@Override public ParserRule getRule() { return rule; }

		//RANGE_ first=SimpleExpression PP last=SimpleExpression
		public Group getGroup() { return cGroup; }

		//RANGE_
		public RuleCall getRANGE_TerminalRuleCall_0() { return cRANGE_TerminalRuleCall_0; }

		//first=SimpleExpression
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }

		//SimpleExpression
		public RuleCall getFirstSimpleExpressionParserRuleCall_1_0() { return cFirstSimpleExpressionParserRuleCall_1_0; }

		//PP
		public RuleCall getPPTerminalRuleCall_2() { return cPPTerminalRuleCall_2; }

		//last=SimpleExpression
		public Assignment getLastAssignment_3() { return cLastAssignment_3; }

		//SimpleExpression
		public RuleCall getLastSimpleExpressionParserRuleCall_3_0() { return cLastSimpleExpressionParserRuleCall_3_0; }
	}

	public class ModularTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ModularTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMOD_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cStaticExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStaticExpressionExpressionParserRuleCall_1_0 = (RuleCall)cStaticExpressionAssignment_1.eContents().get(0);
		
		//ModularTypeDefinition:
		//	MOD_ staticExpression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//MOD_ staticExpression=Expression
		public Group getGroup() { return cGroup; }

		//MOD_
		public RuleCall getMOD_TerminalRuleCall_0() { return cMOD_TerminalRuleCall_0; }

		//staticExpression=Expression
		public Assignment getStaticExpressionAssignment_1() { return cStaticExpressionAssignment_1; }

		//Expression
		public RuleCall getStaticExpressionExpressionParserRuleCall_1_0() { return cStaticExpressionExpressionParserRuleCall_1_0; }
	}

	public class EnumerationTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.EnumerationTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cEnumerationliteralspecificationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnumerationliteralspecificationsEnumerationLiteralSpecificationParserRuleCall_1_0 = (RuleCall)cEnumerationliteralspecificationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cVTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cEnumerationliteralspecificationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEnumerationliteralspecificationsEnumerationLiteralSpecificationParserRuleCall_2_1_0 = (RuleCall)cEnumerationliteralspecificationsAssignment_2_1.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EnumerationTypeDefinition:
		//	PG enumerationliteralspecifications+=EnumerationLiteralSpecification (V
		//	enumerationliteralspecifications+=EnumerationLiteralSpecification)* PD;
		@Override public ParserRule getRule() { return rule; }

		//PG enumerationliteralspecifications+=EnumerationLiteralSpecification (V
		//enumerationliteralspecifications+=EnumerationLiteralSpecification)* PD
		public Group getGroup() { return cGroup; }

		//PG
		public RuleCall getPGTerminalRuleCall_0() { return cPGTerminalRuleCall_0; }

		//enumerationliteralspecifications+=EnumerationLiteralSpecification
		public Assignment getEnumerationliteralspecificationsAssignment_1() { return cEnumerationliteralspecificationsAssignment_1; }

		//EnumerationLiteralSpecification
		public RuleCall getEnumerationliteralspecificationsEnumerationLiteralSpecificationParserRuleCall_1_0() { return cEnumerationliteralspecificationsEnumerationLiteralSpecificationParserRuleCall_1_0; }

		//(V enumerationliteralspecifications+=EnumerationLiteralSpecification)*
		public Group getGroup_2() { return cGroup_2; }

		//V
		public RuleCall getVTerminalRuleCall_2_0() { return cVTerminalRuleCall_2_0; }

		//enumerationliteralspecifications+=EnumerationLiteralSpecification
		public Assignment getEnumerationliteralspecificationsAssignment_2_1() { return cEnumerationliteralspecificationsAssignment_2_1; }

		//EnumerationLiteralSpecification
		public RuleCall getEnumerationliteralspecificationsEnumerationLiteralSpecificationParserRuleCall_2_1_0() { return cEnumerationliteralspecificationsEnumerationLiteralSpecificationParserRuleCall_2_1_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_3() { return cPDTerminalRuleCall_3; }
	}

	public class EnumerationLiteralSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.EnumerationLiteralSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCHARACTER_LITERALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EnumerationLiteralSpecification:
		//	IDENTIFIER
		//	| CHARACTER_LITERAL;
		@Override public ParserRule getRule() { return rule; }

		//IDENTIFIER | CHARACTER_LITERAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }

		//CHARACTER_LITERAL
		public RuleCall getCHARACTER_LITERALTerminalRuleCall_1() { return cCHARACTER_LITERALTerminalRuleCall_1; }
	}

	public class RecordTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RecordTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cAbstractAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAbstractABSTRACT_TerminalRuleCall_0_0_0 = (RuleCall)cAbstractAssignment_0_0.eContents().get(0);
		private final Assignment cTaggedAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTaggedTAGGED_TerminalRuleCall_0_1_0 = (RuleCall)cTaggedAssignment_0_1.eContents().get(0);
		private final Assignment cLimitedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLimitedLIMITED_TerminalRuleCall_1_0 = (RuleCall)cLimitedAssignment_1.eContents().get(0);
		private final Assignment cRecordDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRecordDefinitionRecordDefinitionParserRuleCall_2_0 = (RuleCall)cRecordDefinitionAssignment_2.eContents().get(0);
		
		//RecordTypeDefinition:
		//	(abstract?=ABSTRACT_? tagged?=TAGGED_)? limited?=LIMITED_? recordDefinition=RecordDefinition;
		@Override public ParserRule getRule() { return rule; }

		//(abstract?=ABSTRACT_? tagged?=TAGGED_)? limited?=LIMITED_? recordDefinition=RecordDefinition
		public Group getGroup() { return cGroup; }

		//(abstract?=ABSTRACT_? tagged?=TAGGED_)?
		public Group getGroup_0() { return cGroup_0; }

		//abstract?=ABSTRACT_?
		public Assignment getAbstractAssignment_0_0() { return cAbstractAssignment_0_0; }

		//ABSTRACT_
		public RuleCall getAbstractABSTRACT_TerminalRuleCall_0_0_0() { return cAbstractABSTRACT_TerminalRuleCall_0_0_0; }

		//tagged?=TAGGED_
		public Assignment getTaggedAssignment_0_1() { return cTaggedAssignment_0_1; }

		//TAGGED_
		public RuleCall getTaggedTAGGED_TerminalRuleCall_0_1_0() { return cTaggedTAGGED_TerminalRuleCall_0_1_0; }

		//limited?=LIMITED_?
		public Assignment getLimitedAssignment_1() { return cLimitedAssignment_1; }

		//LIMITED_
		public RuleCall getLimitedLIMITED_TerminalRuleCall_1_0() { return cLimitedLIMITED_TerminalRuleCall_1_0; }

		//recordDefinition=RecordDefinition
		public Assignment getRecordDefinitionAssignment_2() { return cRecordDefinitionAssignment_2; }

		//RecordDefinition
		public RuleCall getRecordDefinitionRecordDefinitionParserRuleCall_2_0() { return cRecordDefinitionRecordDefinitionParserRuleCall_2_0; }
	}

	public class RecordDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RecordDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cRECORD_TerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cComponentListAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cComponentListComponentListParserRuleCall_0_1_0_0 = (RuleCall)cComponentListAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Assignment cNullAssignment_0_1_1_0 = (Assignment)cGroup_0_1_1.eContents().get(0);
		private final RuleCall cNullNULL_TerminalRuleCall_0_1_1_0_0 = (RuleCall)cNullAssignment_0_1_1_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_0_1_1_1 = (RuleCall)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cEND_TerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cRECORD_TerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNullAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNullNULL_TerminalRuleCall_1_0_0 = (RuleCall)cNullAssignment_1_0.eContents().get(0);
		private final RuleCall cRECORD_TerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//RecordDefinition:
		//	RECORD_ (componentList=ComponentList
		//	| null=NULL_ PV) END_ RECORD_
		//	| null=NULL_ RECORD_;
		@Override public ParserRule getRule() { return rule; }

		//RECORD_ (componentList=ComponentList | null=NULL_ PV) END_ RECORD_ | null=NULL_ RECORD_
		public Alternatives getAlternatives() { return cAlternatives; }

		//RECORD_ (componentList=ComponentList | null=NULL_ PV) END_ RECORD_
		public Group getGroup_0() { return cGroup_0; }

		//RECORD_
		public RuleCall getRECORD_TerminalRuleCall_0_0() { return cRECORD_TerminalRuleCall_0_0; }

		//(componentList=ComponentList | null=NULL_ PV)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//componentList=ComponentList
		public Assignment getComponentListAssignment_0_1_0() { return cComponentListAssignment_0_1_0; }

		//ComponentList
		public RuleCall getComponentListComponentListParserRuleCall_0_1_0_0() { return cComponentListComponentListParserRuleCall_0_1_0_0; }

		//null=NULL_ PV
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//null=NULL_
		public Assignment getNullAssignment_0_1_1_0() { return cNullAssignment_0_1_1_0; }

		//NULL_
		public RuleCall getNullNULL_TerminalRuleCall_0_1_1_0_0() { return cNullNULL_TerminalRuleCall_0_1_1_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_0_1_1_1() { return cPVTerminalRuleCall_0_1_1_1; }

		//END_
		public RuleCall getEND_TerminalRuleCall_0_2() { return cEND_TerminalRuleCall_0_2; }

		//RECORD_
		public RuleCall getRECORD_TerminalRuleCall_0_3() { return cRECORD_TerminalRuleCall_0_3; }

		//null=NULL_ RECORD_
		public Group getGroup_1() { return cGroup_1; }

		//null=NULL_
		public Assignment getNullAssignment_1_0() { return cNullAssignment_1_0; }

		//NULL_
		public RuleCall getNullNULL_TerminalRuleCall_1_0_0() { return cNullNULL_TerminalRuleCall_1_0_0; }

		//RECORD_
		public RuleCall getRECORD_TerminalRuleCall_1_1() { return cRECORD_TerminalRuleCall_1_1; }
	}

	public class ComponentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ComponentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cComponentItemsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cComponentItemsComponentItemParserRuleCall_0_0_0 = (RuleCall)cComponentItemsAssignment_0_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cOptVariantPartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptVariantPartOptVariantPartParserRuleCall_1_0 = (RuleCall)cOptVariantPartAssignment_1.eContents().get(0);
		
		//ComponentList:
		//	(componentItems+=ComponentItem PV)* optVariantPart=OptVariantPart // TODO: this is not strict enough, look at original def to see how we can make this strict enough OR validation
		//;
		@Override public ParserRule getRule() { return rule; }

		//(componentItems+=ComponentItem PV)* optVariantPart=OptVariantPart
		public Group getGroup() { return cGroup; }

		//(componentItems+=ComponentItem PV)*
		public Group getGroup_0() { return cGroup_0; }

		//componentItems+=ComponentItem
		public Assignment getComponentItemsAssignment_0_0() { return cComponentItemsAssignment_0_0; }

		//ComponentItem
		public RuleCall getComponentItemsComponentItemParserRuleCall_0_0_0() { return cComponentItemsComponentItemParserRuleCall_0_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_0_1() { return cPVTerminalRuleCall_0_1; }

		//optVariantPart=OptVariantPart
		public Assignment getOptVariantPartAssignment_1() { return cOptVariantPartAssignment_1; }

		//OptVariantPart
		public RuleCall getOptVariantPartOptVariantPartParserRuleCall_1_0() { return cOptVariantPartOptVariantPartParserRuleCall_1_0; }
	}

	public class OptVariantPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.OptVariantPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOptVariantPartAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cVariantPartAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVariantPartVariantPartParserRuleCall_1_0_0 = (RuleCall)cVariantPartAssignment_1_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//OptVariantPart:
		//	{OptVariantPart} (variantPart=VariantPart PV)?;
		@Override public ParserRule getRule() { return rule; }

		//{OptVariantPart} (variantPart=VariantPart PV)?
		public Group getGroup() { return cGroup; }

		//{OptVariantPart}
		public Action getOptVariantPartAction_0() { return cOptVariantPartAction_0; }

		//(variantPart=VariantPart PV)?
		public Group getGroup_1() { return cGroup_1; }

		//variantPart=VariantPart
		public Assignment getVariantPartAssignment_1_0() { return cVariantPartAssignment_1_0; }

		//VariantPart
		public RuleCall getVariantPartVariantPartParserRuleCall_1_0_0() { return cVariantPartVariantPartParserRuleCall_1_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_1_1() { return cPVTerminalRuleCall_1_1; }
	}

	public class ComponentItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ComponentItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAspectClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComponentItem:
		//	ComponentDeclaration
		//	| AspectClause // TODO: Check if it is really a RM's bug.
		//;
		@Override public ParserRule getRule() { return rule; }

		//ComponentDeclaration | AspectClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComponentDeclaration
		public RuleCall getComponentDeclarationParserRuleCall_0() { return cComponentDeclarationParserRuleCall_0; }

		//AspectClause
		public RuleCall getAspectClauseParserRuleCall_1() { return cAspectClauseParserRuleCall_1; }
	}

	public class ComponentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ComponentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefiningIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefiningIdentifiersDefiningIdentifierListParserRuleCall_0_0 = (RuleCall)cDefiningIdentifiersAssignment_0.eContents().get(0);
		private final RuleCall cDPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cComponentDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentDefinitionComponentDefinitionParserRuleCall_2_0 = (RuleCall)cComponentDefinitionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cDPETerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cDefaultExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cDefaultExpressionAssignment_3_1.eContents().get(0);
		
		//ComponentDeclaration:
		//	definingIdentifiers=DefiningIdentifierList DP componentDefinition=ComponentDefinition (DPE
		//	defaultExpression=Expression)?;
		@Override public ParserRule getRule() { return rule; }

		//definingIdentifiers=DefiningIdentifierList DP componentDefinition=ComponentDefinition (DPE
		//defaultExpression=Expression)?
		public Group getGroup() { return cGroup; }

		//definingIdentifiers=DefiningIdentifierList
		public Assignment getDefiningIdentifiersAssignment_0() { return cDefiningIdentifiersAssignment_0; }

		//DefiningIdentifierList
		public RuleCall getDefiningIdentifiersDefiningIdentifierListParserRuleCall_0_0() { return cDefiningIdentifiersDefiningIdentifierListParserRuleCall_0_0; }

		//DP
		public RuleCall getDPTerminalRuleCall_1() { return cDPTerminalRuleCall_1; }

		//componentDefinition=ComponentDefinition
		public Assignment getComponentDefinitionAssignment_2() { return cComponentDefinitionAssignment_2; }

		//ComponentDefinition
		public RuleCall getComponentDefinitionComponentDefinitionParserRuleCall_2_0() { return cComponentDefinitionComponentDefinitionParserRuleCall_2_0; }

		//(DPE defaultExpression=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//DPE
		public RuleCall getDPETerminalRuleCall_3_0() { return cDPETerminalRuleCall_3_0; }

		//defaultExpression=Expression
		public Assignment getDefaultExpressionAssignment_3_1() { return cDefaultExpressionAssignment_3_1; }

		//Expression
		public RuleCall getDefaultExpressionExpressionParserRuleCall_3_1_0() { return cDefaultExpressionExpressionParserRuleCall_3_1_0; }
	}

	public class DefiningIdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DefiningIdentifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cVTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//DefiningIdentifierList:
		//	name+=IDENTIFIER (V name+=IDENTIFIER)*;
		@Override public ParserRule getRule() { return rule; }

		//name+=IDENTIFIER (V name+=IDENTIFIER)*
		public Group getGroup() { return cGroup; }

		//name+=IDENTIFIER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0_0() { return cNameIDENTIFIERTerminalRuleCall_0_0; }

		//(V name+=IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }

		//V
		public RuleCall getVTerminalRuleCall_1_0() { return cVTerminalRuleCall_1_0; }

		//name+=IDENTIFIER
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_1_0; }
	}

	public class AspectClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AspectClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFOR_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePATHNAMEParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cUSE_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0_0 = (RuleCall)cExpressionAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cRECORD_TerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Assignment cModAssignment_3_1_1_0 = (Assignment)cGroup_3_1_1.eContents().get(0);
		private final RuleCall cModModClauseParserRuleCall_3_1_1_0_0 = (RuleCall)cModAssignment_3_1_1_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_3_1_1_1 = (RuleCall)cGroup_3_1_1.eContents().get(1);
		private final Group cGroup_3_1_2 = (Group)cGroup_3_1.eContents().get(2);
		private final Assignment cComponentClauseAssignment_3_1_2_0 = (Assignment)cGroup_3_1_2.eContents().get(0);
		private final RuleCall cComponentClauseComponentClauseParserRuleCall_3_1_2_0_0 = (RuleCall)cComponentClauseAssignment_3_1_2_0.eContents().get(0);
		private final RuleCall cPVTerminalRuleCall_3_1_2_1 = (RuleCall)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cEND_TerminalRuleCall_3_1_3 = (RuleCall)cGroup_3_1.eContents().get(3);
		private final RuleCall cRECORD_TerminalRuleCall_3_1_4 = (RuleCall)cGroup_3_1.eContents().get(4);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final RuleCall cAT_TerminalRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_2_1_0 = (RuleCall)cExpressionAssignment_3_2_1.eContents().get(0);
		
		//AspectClause:
		//	FOR_ name=PATHNAME USE_ (expression=Expression
		//	// TODO: Check that the following syntactic constraint is satisfied:
		//	//  Local_name "'" attributeDesignator = Attribute_designator USE_ expression=Expression
		//	//  Local_name USE_ (enumerationAggregate=Enumeration_aggregate 
		//	| RECORD_ (mod=ModClause PV)? (componentClause+=ComponentClause PV)*
		//	END_ RECORD_
		//	| AT_ expression=Expression
		//	// TODO: Check that name is Direct_name for AT_ expression alt                   
		//);
		@Override public ParserRule getRule() { return rule; }

		//FOR_ name=PATHNAME USE_ (expression=Expression // TODO: Check that the following syntactic constraint is satisfied:
		////  Local_name "'" attributeDesignator = Attribute_designator USE_ expression=Expression
		////  Local_name USE_ (enumerationAggregate=Enumeration_aggregate 
		//| RECORD_ (mod=ModClause PV)? (componentClause+=ComponentClause PV)* END_ RECORD_ | AT_ expression=Expression // TODO: Check that name is Direct_name for AT_ expression alt                   
		//)
		public Group getGroup() { return cGroup; }

		//FOR_
		public RuleCall getFOR_TerminalRuleCall_0() { return cFOR_TerminalRuleCall_0; }

		//name=PATHNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//PATHNAME
		public RuleCall getNamePATHNAMEParserRuleCall_1_0() { return cNamePATHNAMEParserRuleCall_1_0; }

		//USE_
		public RuleCall getUSE_TerminalRuleCall_2() { return cUSE_TerminalRuleCall_2; }

		//(expression=Expression // TODO: Check that the following syntactic constraint is satisfied:
		////  Local_name "'" attributeDesignator = Attribute_designator USE_ expression=Expression
		////  Local_name USE_ (enumerationAggregate=Enumeration_aggregate 
		//| RECORD_ (mod=ModClause PV)? (componentClause+=ComponentClause PV)* END_ RECORD_ | AT_ expression=Expression // TODO: Check that name is Direct_name for AT_ expression alt                   
		//)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_3_0() { return cExpressionAssignment_3_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0_0() { return cExpressionExpressionParserRuleCall_3_0_0; }

		//RECORD_ (mod=ModClause PV)? (componentClause+=ComponentClause PV)* END_ RECORD_
		public Group getGroup_3_1() { return cGroup_3_1; }

		//RECORD_
		public RuleCall getRECORD_TerminalRuleCall_3_1_0() { return cRECORD_TerminalRuleCall_3_1_0; }

		//(mod=ModClause PV)?
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//mod=ModClause
		public Assignment getModAssignment_3_1_1_0() { return cModAssignment_3_1_1_0; }

		//ModClause
		public RuleCall getModModClauseParserRuleCall_3_1_1_0_0() { return cModModClauseParserRuleCall_3_1_1_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_3_1_1_1() { return cPVTerminalRuleCall_3_1_1_1; }

		//(componentClause+=ComponentClause PV)*
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }

		//componentClause+=ComponentClause
		public Assignment getComponentClauseAssignment_3_1_2_0() { return cComponentClauseAssignment_3_1_2_0; }

		//ComponentClause
		public RuleCall getComponentClauseComponentClauseParserRuleCall_3_1_2_0_0() { return cComponentClauseComponentClauseParserRuleCall_3_1_2_0_0; }

		//PV
		public RuleCall getPVTerminalRuleCall_3_1_2_1() { return cPVTerminalRuleCall_3_1_2_1; }

		//END_
		public RuleCall getEND_TerminalRuleCall_3_1_3() { return cEND_TerminalRuleCall_3_1_3; }

		//RECORD_
		public RuleCall getRECORD_TerminalRuleCall_3_1_4() { return cRECORD_TerminalRuleCall_3_1_4; }

		//AT_ expression=Expression
		public Group getGroup_3_2() { return cGroup_3_2; }

		//AT_
		public RuleCall getAT_TerminalRuleCall_3_2_0() { return cAT_TerminalRuleCall_3_2_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_3_2_1() { return cExpressionAssignment_3_2_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_2_1_0() { return cExpressionExpressionParserRuleCall_3_2_1_0; }
	}

	public class ModClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ModClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAT_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cMOD_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cModAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModExpressionParserRuleCall_2_0 = (RuleCall)cModAssignment_2.eContents().get(0);
		
		//ModClause:
		//	AT_ MOD_ mod=Expression;
		@Override public ParserRule getRule() { return rule; }

		//AT_ MOD_ mod=Expression
		public Group getGroup() { return cGroup; }

		//AT_
		public RuleCall getAT_TerminalRuleCall_0() { return cAT_TerminalRuleCall_0; }

		//MOD_
		public RuleCall getMOD_TerminalRuleCall_1() { return cMOD_TerminalRuleCall_1; }

		//mod=Expression
		public Assignment getModAssignment_2() { return cModAssignment_2; }

		//Expression
		public RuleCall getModExpressionParserRuleCall_2_0() { return cModExpressionParserRuleCall_2_0; }
	}

	public class ComponentClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ComponentClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocalNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocalNamePATHIDENTIFIERParserRuleCall_0_0 = (RuleCall)cLocalNameAssignment_0.eContents().get(0);
		private final RuleCall cAT_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cPositionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPositionExpressionParserRuleCall_2_0 = (RuleCall)cPositionAssignment_2.eContents().get(0);
		private final RuleCall cRANGE_TerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cFirstBitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFirstBitSimpleExpressionParserRuleCall_4_0 = (RuleCall)cFirstBitAssignment_4.eContents().get(0);
		private final RuleCall cPPTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cLastBitAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLastBitSimpleExpressionParserRuleCall_6_0 = (RuleCall)cLastBitAssignment_6.eContents().get(0);
		
		//ComponentClause:
		//	localName=PATHIDENTIFIER AT_ position=Expression RANGE_ firstBit=SimpleExpression PP lastBit=SimpleExpression;
		@Override public ParserRule getRule() { return rule; }

		//localName=PATHIDENTIFIER AT_ position=Expression RANGE_ firstBit=SimpleExpression PP lastBit=SimpleExpression
		public Group getGroup() { return cGroup; }

		//localName=PATHIDENTIFIER
		public Assignment getLocalNameAssignment_0() { return cLocalNameAssignment_0; }

		//PATHIDENTIFIER
		public RuleCall getLocalNamePATHIDENTIFIERParserRuleCall_0_0() { return cLocalNamePATHIDENTIFIERParserRuleCall_0_0; }

		//AT_
		public RuleCall getAT_TerminalRuleCall_1() { return cAT_TerminalRuleCall_1; }

		//position=Expression
		public Assignment getPositionAssignment_2() { return cPositionAssignment_2; }

		//Expression
		public RuleCall getPositionExpressionParserRuleCall_2_0() { return cPositionExpressionParserRuleCall_2_0; }

		//RANGE_
		public RuleCall getRANGE_TerminalRuleCall_3() { return cRANGE_TerminalRuleCall_3; }

		//firstBit=SimpleExpression
		public Assignment getFirstBitAssignment_4() { return cFirstBitAssignment_4; }

		//SimpleExpression
		public RuleCall getFirstBitSimpleExpressionParserRuleCall_4_0() { return cFirstBitSimpleExpressionParserRuleCall_4_0; }

		//PP
		public RuleCall getPPTerminalRuleCall_5() { return cPPTerminalRuleCall_5; }

		//lastBit=SimpleExpression
		public Assignment getLastBitAssignment_6() { return cLastBitAssignment_6; }

		//SimpleExpression
		public RuleCall getLastBitSimpleExpressionParserRuleCall_6_0() { return cLastBitSimpleExpressionParserRuleCall_6_0; }
	}

	public class VariantPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.VariantPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCASE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameDIRECT_NAMEParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cIS_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cVariantsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariantsVariantParserRuleCall_3_0 = (RuleCall)cVariantsAssignment_3.eContents().get(0);
		private final RuleCall cEND_TerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cCASE_TerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//VariantPart:
		//	CASE_ name=DIRECT_NAME IS_
		//	variants+=Variant+
		//	END_ CASE_;
		@Override public ParserRule getRule() { return rule; }

		//CASE_ name=DIRECT_NAME IS_ variants+=Variant+ END_ CASE_
		public Group getGroup() { return cGroup; }

		//CASE_
		public RuleCall getCASE_TerminalRuleCall_0() { return cCASE_TerminalRuleCall_0; }

		//name=DIRECT_NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//DIRECT_NAME
		public RuleCall getNameDIRECT_NAMEParserRuleCall_1_0() { return cNameDIRECT_NAMEParserRuleCall_1_0; }

		//IS_
		public RuleCall getIS_TerminalRuleCall_2() { return cIS_TerminalRuleCall_2; }

		//variants+=Variant+
		public Assignment getVariantsAssignment_3() { return cVariantsAssignment_3; }

		//Variant
		public RuleCall getVariantsVariantParserRuleCall_3_0() { return cVariantsVariantParserRuleCall_3_0; }

		//END_
		public RuleCall getEND_TerminalRuleCall_4() { return cEND_TerminalRuleCall_4; }

		//CASE_
		public RuleCall getCASE_TerminalRuleCall_5() { return cCASE_TerminalRuleCall_5; }
	}

	public class VariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Variant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHEN_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cDiscreteChoiceListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDiscreteChoiceListDiscreteChoiceListParserRuleCall_1_0 = (RuleCall)cDiscreteChoiceListAssignment_1.eContents().get(0);
		private final RuleCall cFLECHETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cComponentListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentListComponentListParserRuleCall_3_0 = (RuleCall)cComponentListAssignment_3.eContents().get(0);
		
		//Variant:
		//	WHEN_ discreteChoiceList=DiscreteChoiceList FLECHE componentList=ComponentList;
		@Override public ParserRule getRule() { return rule; }

		//WHEN_ discreteChoiceList=DiscreteChoiceList FLECHE componentList=ComponentList
		public Group getGroup() { return cGroup; }

		//WHEN_
		public RuleCall getWHEN_TerminalRuleCall_0() { return cWHEN_TerminalRuleCall_0; }

		//discreteChoiceList=DiscreteChoiceList
		public Assignment getDiscreteChoiceListAssignment_1() { return cDiscreteChoiceListAssignment_1; }

		//DiscreteChoiceList
		public RuleCall getDiscreteChoiceListDiscreteChoiceListParserRuleCall_1_0() { return cDiscreteChoiceListDiscreteChoiceListParserRuleCall_1_0; }

		//FLECHE
		public RuleCall getFLECHETerminalRuleCall_2() { return cFLECHETerminalRuleCall_2; }

		//componentList=ComponentList
		public Assignment getComponentListAssignment_3() { return cComponentListAssignment_3; }

		//ComponentList
		public RuleCall getComponentListComponentListParserRuleCall_3_0() { return cComponentListComponentListParserRuleCall_3_0; }
	}

	public class DiscreteChoiceListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DiscreteChoiceList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDiscreteChoiceListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDiscreteChoiceListDiscreteChoiceParserRuleCall_0_0 = (RuleCall)cDiscreteChoiceListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cBVTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cDiscreteChoiceListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDiscreteChoiceListDiscreteChoiceParserRuleCall_1_1_0 = (RuleCall)cDiscreteChoiceListAssignment_1_1.eContents().get(0);
		
		//DiscreteChoiceList:
		//	discreteChoiceList+=DiscreteChoice (BV discreteChoiceList+=DiscreteChoice)*;
		@Override public ParserRule getRule() { return rule; }

		//discreteChoiceList+=DiscreteChoice (BV discreteChoiceList+=DiscreteChoice)*
		public Group getGroup() { return cGroup; }

		//discreteChoiceList+=DiscreteChoice
		public Assignment getDiscreteChoiceListAssignment_0() { return cDiscreteChoiceListAssignment_0; }

		//DiscreteChoice
		public RuleCall getDiscreteChoiceListDiscreteChoiceParserRuleCall_0_0() { return cDiscreteChoiceListDiscreteChoiceParserRuleCall_0_0; }

		//(BV discreteChoiceList+=DiscreteChoice)*
		public Group getGroup_1() { return cGroup_1; }

		//BV
		public RuleCall getBVTerminalRuleCall_1_0() { return cBVTerminalRuleCall_1_0; }

		//discreteChoiceList+=DiscreteChoice
		public Assignment getDiscreteChoiceListAssignment_1_1() { return cDiscreteChoiceListAssignment_1_1; }

		//DiscreteChoice
		public RuleCall getDiscreteChoiceListDiscreteChoiceParserRuleCall_1_1_0() { return cDiscreteChoiceListDiscreteChoiceParserRuleCall_1_1_0; }
	}

	public class RealTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RealTypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatingPointDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFixedPointDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RealTypeDefinition:
		//	FloatingPointDefinition
		//	| FixedPointDefinition;
		@Override public ParserRule getRule() { return rule; }

		//FloatingPointDefinition | FixedPointDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//FloatingPointDefinition
		public RuleCall getFloatingPointDefinitionParserRuleCall_0() { return cFloatingPointDefinitionParserRuleCall_0; }

		//FixedPointDefinition
		public RuleCall getFixedPointDefinitionParserRuleCall_1() { return cFixedPointDefinitionParserRuleCall_1; }
	}

	public class FloatingPointDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FloatingPointDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDIGITS_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cDigitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDigitsExpressionParserRuleCall_1_0 = (RuleCall)cDigitsAssignment_1.eContents().get(0);
		private final Assignment cRealRangeSpecificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRealRangeSpecificationRealRangeSpecificationParserRuleCall_2_0 = (RuleCall)cRealRangeSpecificationAssignment_2.eContents().get(0);
		
		//FloatingPointDefinition:
		//	DIGITS_ digits=Expression realRangeSpecification=RealRangeSpecification?;
		@Override public ParserRule getRule() { return rule; }

		//DIGITS_ digits=Expression realRangeSpecification=RealRangeSpecification?
		public Group getGroup() { return cGroup; }

		//DIGITS_
		public RuleCall getDIGITS_TerminalRuleCall_0() { return cDIGITS_TerminalRuleCall_0; }

		//digits=Expression
		public Assignment getDigitsAssignment_1() { return cDigitsAssignment_1; }

		//Expression
		public RuleCall getDigitsExpressionParserRuleCall_1_0() { return cDigitsExpressionParserRuleCall_1_0; }

		//realRangeSpecification=RealRangeSpecification?
		public Assignment getRealRangeSpecificationAssignment_2() { return cRealRangeSpecificationAssignment_2; }

		//RealRangeSpecification
		public RuleCall getRealRangeSpecificationRealRangeSpecificationParserRuleCall_2_0() { return cRealRangeSpecificationRealRangeSpecificationParserRuleCall_2_0; }
	}

	public class RealRangeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RealRangeSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRANGE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundSimpleExpressionParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final RuleCall cPPTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundSimpleExpressionParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		
		//RealRangeSpecification:
		//	RANGE_ lowerBound=SimpleExpression PP upperBound=SimpleExpression;
		@Override public ParserRule getRule() { return rule; }

		//RANGE_ lowerBound=SimpleExpression PP upperBound=SimpleExpression
		public Group getGroup() { return cGroup; }

		//RANGE_
		public RuleCall getRANGE_TerminalRuleCall_0() { return cRANGE_TerminalRuleCall_0; }

		//lowerBound=SimpleExpression
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//SimpleExpression
		public RuleCall getLowerBoundSimpleExpressionParserRuleCall_1_0() { return cLowerBoundSimpleExpressionParserRuleCall_1_0; }

		//PP
		public RuleCall getPPTerminalRuleCall_2() { return cPPTerminalRuleCall_2; }

		//upperBound=SimpleExpression
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//SimpleExpression
		public RuleCall getUpperBoundSimpleExpressionParserRuleCall_3_0() { return cUpperBoundSimpleExpressionParserRuleCall_3_0; }
	}

	public class FixedPointDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FixedPointDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDELTA_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cDeltaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeltaExpressionParserRuleCall_1_0 = (RuleCall)cDeltaAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRealRangeSpecificationAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cRealRangeSpecificationRealRangeSpecificationParserRuleCall_2_0_0 = (RuleCall)cRealRangeSpecificationAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final RuleCall cDIGITS_TerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Assignment cDigitsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDigitsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cDigitsAssignment_2_1_1.eContents().get(0);
		private final Assignment cRealRangeSpecificationAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cRealRangeSpecificationRealRangeSpecificationParserRuleCall_2_1_2_0 = (RuleCall)cRealRangeSpecificationAssignment_2_1_2.eContents().get(0);
		
		//// TODO: semantic rule to check: lowerBound_ and upperBound_ are static 
		//FixedPointDefinition:
		//	DELTA_ delta=Expression (realRangeSpecification=RealRangeSpecification
		//	| DIGITS_ digits=Expression realRangeSpecification=RealRangeSpecification?);
		@Override public ParserRule getRule() { return rule; }

		//DELTA_ delta=Expression (realRangeSpecification=RealRangeSpecification | DIGITS_ digits=Expression
		//realRangeSpecification=RealRangeSpecification?)
		public Group getGroup() { return cGroup; }

		//DELTA_
		public RuleCall getDELTA_TerminalRuleCall_0() { return cDELTA_TerminalRuleCall_0; }

		//delta=Expression
		public Assignment getDeltaAssignment_1() { return cDeltaAssignment_1; }

		//Expression
		public RuleCall getDeltaExpressionParserRuleCall_1_0() { return cDeltaExpressionParserRuleCall_1_0; }

		//(realRangeSpecification=RealRangeSpecification | DIGITS_ digits=Expression
		//realRangeSpecification=RealRangeSpecification?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//realRangeSpecification=RealRangeSpecification
		public Assignment getRealRangeSpecificationAssignment_2_0() { return cRealRangeSpecificationAssignment_2_0; }

		//RealRangeSpecification
		public RuleCall getRealRangeSpecificationRealRangeSpecificationParserRuleCall_2_0_0() { return cRealRangeSpecificationRealRangeSpecificationParserRuleCall_2_0_0; }

		//DIGITS_ digits=Expression realRangeSpecification=RealRangeSpecification?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//DIGITS_
		public RuleCall getDIGITS_TerminalRuleCall_2_1_0() { return cDIGITS_TerminalRuleCall_2_1_0; }

		//digits=Expression
		public Assignment getDigitsAssignment_2_1_1() { return cDigitsAssignment_2_1_1; }

		//Expression
		public RuleCall getDigitsExpressionParserRuleCall_2_1_1_0() { return cDigitsExpressionParserRuleCall_2_1_1_0; }

		//realRangeSpecification=RealRangeSpecification?
		public Assignment getRealRangeSpecificationAssignment_2_1_2() { return cRealRangeSpecificationAssignment_2_1_2; }

		//RealRangeSpecification
		public RuleCall getRealRangeSpecificationRealRangeSpecificationParserRuleCall_2_1_2_0() { return cRealRangeSpecificationRealRangeSpecificationParserRuleCall_2_1_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelationsRelationParserRuleCall_0_0 = (RuleCall)cRelationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cBooleanOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cBooleanOperatorBooleanOperatorParserRuleCall_1_0_0 = (RuleCall)cBooleanOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRelationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelationsRelationParserRuleCall_1_1_0 = (RuleCall)cRelationsAssignment_1_1.eContents().get(0);
		
		/////////////////////////////////////////////////////////////////////////////////
		////
		////                       Grammar module : EXPRESSIONS.XTEXT 
		////
		/////////////////////////////////////////////////////////////////////////////////
		//Expression:
		//	relations+=Relation (booleanOperator+=BooleanOperator relations+=Relation)*;
		@Override public ParserRule getRule() { return rule; }

		//relations+=Relation (booleanOperator+=BooleanOperator relations+=Relation)*
		public Group getGroup() { return cGroup; }

		//relations+=Relation
		public Assignment getRelationsAssignment_0() { return cRelationsAssignment_0; }

		//Relation
		public RuleCall getRelationsRelationParserRuleCall_0_0() { return cRelationsRelationParserRuleCall_0_0; }

		//(booleanOperator+=BooleanOperator relations+=Relation)*
		public Group getGroup_1() { return cGroup_1; }

		//booleanOperator+=BooleanOperator
		public Assignment getBooleanOperatorAssignment_1_0() { return cBooleanOperatorAssignment_1_0; }

		//BooleanOperator
		public RuleCall getBooleanOperatorBooleanOperatorParserRuleCall_1_0_0() { return cBooleanOperatorBooleanOperatorParserRuleCall_1_0_0; }

		//relations+=Relation
		public Assignment getRelationsAssignment_1_1() { return cRelationsAssignment_1_1; }

		//Relation
		public RuleCall getRelationsRelationParserRuleCall_1_1_0() { return cRelationsRelationParserRuleCall_1_1_0; }
	}

	public class BooleanOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXOR_TerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cAND_TerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cTHEN_TerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cOR_TerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cELSE_TerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//BooleanOperator:
		//	XOR_ | AND_ THEN_? | OR_ ELSE_?;
		@Override public ParserRule getRule() { return rule; }

		//XOR_ | AND_ THEN_? | OR_ ELSE_?
		public Alternatives getAlternatives() { return cAlternatives; }

		//XOR_
		public RuleCall getXOR_TerminalRuleCall_0() { return cXOR_TerminalRuleCall_0; }

		//AND_ THEN_?
		public Group getGroup_1() { return cGroup_1; }

		//AND_
		public RuleCall getAND_TerminalRuleCall_1_0() { return cAND_TerminalRuleCall_1_0; }

		//THEN_?
		public RuleCall getTHEN_TerminalRuleCall_1_1() { return cTHEN_TerminalRuleCall_1_1; }

		//OR_ ELSE_?
		public Group getGroup_2() { return cGroup_2; }

		//OR_
		public RuleCall getOR_TerminalRuleCall_2_0() { return cOR_TerminalRuleCall_2_0; }

		//ELSE_?
		public RuleCall getELSE_TerminalRuleCall_2_1() { return cELSE_TerminalRuleCall_2_1; }
	}

	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSimpleExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSimpleExpressionSimpleExpressionParserRuleCall_0_0 = (RuleCall)cSimpleExpressionAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cRelationalOperatorAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cRelationalOperatorRelationalOperatorParserRuleCall_1_0_0_0 = (RuleCall)cRelationalOperatorAssignment_1_0_0.eContents().get(0);
		private final Assignment cSubSimpleExpressionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cSubSimpleExpressionSimpleExpressionParserRuleCall_1_0_1_0 = (RuleCall)cSubSimpleExpressionAssignment_1_0_1.eContents().get(0);
		private final Assignment cMembershipAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cMembershipMembershipParserRuleCall_1_1_0 = (RuleCall)cMembershipAssignment_1_1.eContents().get(0);
		
		//Relation:
		//	simpleExpression=SimpleExpression (relationalOperator=RelationalOperator subSimpleExpression=SimpleExpression
		//	| membership=Membership)?;
		@Override public ParserRule getRule() { return rule; }

		//simpleExpression=SimpleExpression (relationalOperator=RelationalOperator subSimpleExpression=SimpleExpression |
		//membership=Membership)?
		public Group getGroup() { return cGroup; }

		//simpleExpression=SimpleExpression
		public Assignment getSimpleExpressionAssignment_0() { return cSimpleExpressionAssignment_0; }

		//SimpleExpression
		public RuleCall getSimpleExpressionSimpleExpressionParserRuleCall_0_0() { return cSimpleExpressionSimpleExpressionParserRuleCall_0_0; }

		//(relationalOperator=RelationalOperator subSimpleExpression=SimpleExpression | membership=Membership)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//relationalOperator=RelationalOperator subSimpleExpression=SimpleExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//relationalOperator=RelationalOperator
		public Assignment getRelationalOperatorAssignment_1_0_0() { return cRelationalOperatorAssignment_1_0_0; }

		//RelationalOperator
		public RuleCall getRelationalOperatorRelationalOperatorParserRuleCall_1_0_0_0() { return cRelationalOperatorRelationalOperatorParserRuleCall_1_0_0_0; }

		//subSimpleExpression=SimpleExpression
		public Assignment getSubSimpleExpressionAssignment_1_0_1() { return cSubSimpleExpressionAssignment_1_0_1; }

		//SimpleExpression
		public RuleCall getSubSimpleExpressionSimpleExpressionParserRuleCall_1_0_1_0() { return cSubSimpleExpressionSimpleExpressionParserRuleCall_1_0_1_0; }

		//membership=Membership
		public Assignment getMembershipAssignment_1_1() { return cMembershipAssignment_1_1; }

		//Membership
		public RuleCall getMembershipMembershipParserRuleCall_1_1_0() { return cMembershipMembershipParserRuleCall_1_1_0; }
	}

	public class MembershipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Membership");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNotNOT_TerminalRuleCall_0_0 = (RuleCall)cNotAssignment_0.eContents().get(0);
		private final RuleCall cIN_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cIntervalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntervalIntervalParserRuleCall_2_0 = (RuleCall)cIntervalAssignment_2.eContents().get(0);
		
		//Membership:
		//	not?=NOT_? IN_ interval=Interval;
		@Override public ParserRule getRule() { return rule; }

		//not?=NOT_? IN_ interval=Interval
		public Group getGroup() { return cGroup; }

		//not?=NOT_?
		public Assignment getNotAssignment_0() { return cNotAssignment_0; }

		//NOT_
		public RuleCall getNotNOT_TerminalRuleCall_0_0() { return cNotNOT_TerminalRuleCall_0_0; }

		//IN_
		public RuleCall getIN_TerminalRuleCall_1() { return cIN_TerminalRuleCall_1; }

		//interval=Interval
		public Assignment getIntervalAssignment_2() { return cIntervalAssignment_2; }

		//Interval
		public RuleCall getIntervalIntervalParserRuleCall_2_0() { return cIntervalIntervalParserRuleCall_2_0; }
	}

	public class IntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Interval");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Interval:
		//	=> Range | Name;
		@Override public ParserRule getRule() { return rule; }

		//=> Range | Name
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> Range
		public RuleCall getRangeParserRuleCall_0() { return cRangeParserRuleCall_0; }

		//Name
		public RuleCall getNameParserRuleCall_1() { return cNameParserRuleCall_1; }
	}

	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SimpleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaryAddingOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaryAddingOperatorUnaryAddingOperatorParserRuleCall_0_0 = (RuleCall)cUnaryAddingOperatorAssignment_0.eContents().get(0);
		private final Assignment cTermsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermsTermParserRuleCall_1_0 = (RuleCall)cTermsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cBinaryAddingOperatorsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cBinaryAddingOperatorsBinaryAddingOperatorParserRuleCall_2_0_0 = (RuleCall)cBinaryAddingOperatorsAssignment_2_0.eContents().get(0);
		private final Assignment cTermsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTermsTermParserRuleCall_2_1_0 = (RuleCall)cTermsAssignment_2_1.eContents().get(0);
		
		//SimpleExpression:
		//	unaryAddingOperator=UnaryAddingOperator?
		//	terms+=Term (binaryAddingOperators+=BinaryAddingOperator terms+=Term)*;
		@Override public ParserRule getRule() { return rule; }

		//unaryAddingOperator=UnaryAddingOperator? terms+=Term (binaryAddingOperators+=BinaryAddingOperator terms+=Term)*
		public Group getGroup() { return cGroup; }

		//unaryAddingOperator=UnaryAddingOperator?
		public Assignment getUnaryAddingOperatorAssignment_0() { return cUnaryAddingOperatorAssignment_0; }

		//UnaryAddingOperator
		public RuleCall getUnaryAddingOperatorUnaryAddingOperatorParserRuleCall_0_0() { return cUnaryAddingOperatorUnaryAddingOperatorParserRuleCall_0_0; }

		//terms+=Term
		public Assignment getTermsAssignment_1() { return cTermsAssignment_1; }

		//Term
		public RuleCall getTermsTermParserRuleCall_1_0() { return cTermsTermParserRuleCall_1_0; }

		//(binaryAddingOperators+=BinaryAddingOperator terms+=Term)*
		public Group getGroup_2() { return cGroup_2; }

		//binaryAddingOperators+=BinaryAddingOperator
		public Assignment getBinaryAddingOperatorsAssignment_2_0() { return cBinaryAddingOperatorsAssignment_2_0; }

		//BinaryAddingOperator
		public RuleCall getBinaryAddingOperatorsBinaryAddingOperatorParserRuleCall_2_0_0() { return cBinaryAddingOperatorsBinaryAddingOperatorParserRuleCall_2_0_0; }

		//terms+=Term
		public Assignment getTermsAssignment_2_1() { return cTermsAssignment_2_1; }

		//Term
		public RuleCall getTermsTermParserRuleCall_2_1_0() { return cTermsTermParserRuleCall_2_1_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFactorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFactorsFactorParserRuleCall_0_0 = (RuleCall)cFactorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cMultiplyingOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cMultiplyingOperatorsMultiplyingOperatorParserRuleCall_1_0_0 = (RuleCall)cMultiplyingOperatorsAssignment_1_0.eContents().get(0);
		private final Assignment cFactorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFactorsFactorParserRuleCall_1_1_0 = (RuleCall)cFactorsAssignment_1_1.eContents().get(0);
		
		//Term:
		//	factors+=Factor (multiplyingOperators+=MultiplyingOperator factors+=Factor)*;
		@Override public ParserRule getRule() { return rule; }

		//factors+=Factor (multiplyingOperators+=MultiplyingOperator factors+=Factor)*
		public Group getGroup() { return cGroup; }

		//factors+=Factor
		public Assignment getFactorsAssignment_0() { return cFactorsAssignment_0; }

		//Factor
		public RuleCall getFactorsFactorParserRuleCall_0_0() { return cFactorsFactorParserRuleCall_0_0; }

		//(multiplyingOperators+=MultiplyingOperator factors+=Factor)*
		public Group getGroup_1() { return cGroup_1; }

		//multiplyingOperators+=MultiplyingOperator
		public Assignment getMultiplyingOperatorsAssignment_1_0() { return cMultiplyingOperatorsAssignment_1_0; }

		//MultiplyingOperator
		public RuleCall getMultiplyingOperatorsMultiplyingOperatorParserRuleCall_1_0_0() { return cMultiplyingOperatorsMultiplyingOperatorParserRuleCall_1_0_0; }

		//factors+=Factor
		public Assignment getFactorsAssignment_1_1() { return cFactorsAssignment_1_1; }

		//Factor
		public RuleCall getFactorsFactorParserRuleCall_1_1_0() { return cFactorsFactorParserRuleCall_1_1_0; }
	}

	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPrimaryAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPrimaryPrimaryParserRuleCall_0_0_0 = (RuleCall)cPrimaryAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cETOI2TerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Assignment cExponentAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExponentPrimaryParserRuleCall_0_1_1_0 = (RuleCall)cExponentAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cAbsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAbsABS_TerminalRuleCall_1_0_0 = (RuleCall)cAbsAssignment_1_0.eContents().get(0);
		private final Assignment cPrimaryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryPrimaryParserRuleCall_1_1_0 = (RuleCall)cPrimaryAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNotAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNotNOT_TerminalRuleCall_2_0_0 = (RuleCall)cNotAssignment_2_0.eContents().get(0);
		private final Assignment cPrimaryAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrimaryPrimaryParserRuleCall_2_1_0 = (RuleCall)cPrimaryAssignment_2_1.eContents().get(0);
		
		//Factor:
		//	primary=Primary (ETOI2 exponent=Primary)?
		//	| abs?=ABS_ primary=Primary
		//	| not?=NOT_ primary=Primary;
		@Override public ParserRule getRule() { return rule; }

		//primary=Primary (ETOI2 exponent=Primary)? | abs?=ABS_ primary=Primary | not?=NOT_ primary=Primary
		public Alternatives getAlternatives() { return cAlternatives; }

		//primary=Primary (ETOI2 exponent=Primary)?
		public Group getGroup_0() { return cGroup_0; }

		//primary=Primary
		public Assignment getPrimaryAssignment_0_0() { return cPrimaryAssignment_0_0; }

		//Primary
		public RuleCall getPrimaryPrimaryParserRuleCall_0_0_0() { return cPrimaryPrimaryParserRuleCall_0_0_0; }

		//(ETOI2 exponent=Primary)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//ETOI2
		public RuleCall getETOI2TerminalRuleCall_0_1_0() { return cETOI2TerminalRuleCall_0_1_0; }

		//exponent=Primary
		public Assignment getExponentAssignment_0_1_1() { return cExponentAssignment_0_1_1; }

		//Primary
		public RuleCall getExponentPrimaryParserRuleCall_0_1_1_0() { return cExponentPrimaryParserRuleCall_0_1_1_0; }

		//abs?=ABS_ primary=Primary
		public Group getGroup_1() { return cGroup_1; }

		//abs?=ABS_
		public Assignment getAbsAssignment_1_0() { return cAbsAssignment_1_0; }

		//ABS_
		public RuleCall getAbsABS_TerminalRuleCall_1_0_0() { return cAbsABS_TerminalRuleCall_1_0_0; }

		//primary=Primary
		public Assignment getPrimaryAssignment_1_1() { return cPrimaryAssignment_1_1; }

		//Primary
		public RuleCall getPrimaryPrimaryParserRuleCall_1_1_0() { return cPrimaryPrimaryParserRuleCall_1_1_0; }

		//not?=NOT_ primary=Primary
		public Group getGroup_2() { return cGroup_2; }

		//not?=NOT_
		public Assignment getNotAssignment_2_0() { return cNotAssignment_2_0; }

		//NOT_
		public RuleCall getNotNOT_TerminalRuleCall_2_0_0() { return cNotNOT_TerminalRuleCall_2_0_0; }

		//primary=Primary
		public Assignment getPrimaryAssignment_2_1() { return cPrimaryAssignment_2_1; }

		//Primary
		public RuleCall getPrimaryPrimaryParserRuleCall_2_1_0() { return cPrimaryPrimaryParserRuleCall_2_1_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNullParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParenthesizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cQualifiedNameParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAllocatorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Primary:
		//	NumericLiteral
		//	| Null
		//	| StringLiteral
		//	| ParenthesizedExpression
		//	| QualifiedName
		//	| Allocator;
		@Override public ParserRule getRule() { return rule; }

		//NumericLiteral | Null | StringLiteral | ParenthesizedExpression | QualifiedName | Allocator
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericLiteral
		public RuleCall getNumericLiteralParserRuleCall_0() { return cNumericLiteralParserRuleCall_0; }

		//Null
		public RuleCall getNullParserRuleCall_1() { return cNullParserRuleCall_1; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_3() { return cParenthesizedExpressionParserRuleCall_3; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_4() { return cQualifiedNameParserRuleCall_4; }

		//Allocator
		public RuleCall getAllocatorParserRuleCall_5() { return cAllocatorParserRuleCall_5; }
	}

	public class NumericLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NumericLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNUMERIC_LITERALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumericLiteral:
		//	value=NUMERIC_LITERAL;
		@Override public ParserRule getRule() { return rule; }

		//value=NUMERIC_LITERAL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//NUMERIC_LITERAL
		public RuleCall getValueNUMERIC_LITERALTerminalRuleCall_0() { return cValueNUMERIC_LITERALTerminalRuleCall_0; }
	}

	public class NullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Null");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNULL_TerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Null:
		//	value=NULL_;
		@Override public ParserRule getRule() { return rule; }

		//value=NULL_
		public Assignment getValueAssignment() { return cValueAssignment; }

		//NULL_
		public RuleCall getValueNULL_TerminalRuleCall_0() { return cValueNULL_TerminalRuleCall_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRING_LITERALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING_LITERAL;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING_LITERAL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING_LITERAL
		public RuleCall getValueSTRING_LITERALTerminalRuleCall_0() { return cValueSTRING_LITERALTerminalRuleCall_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifierQualifierParserRuleCall_1_0 = (RuleCall)cQualifierAssignment_1.eContents().get(0);
		
		//QualifiedName:
		//	name=Name qualifier=Qualifier?;
		@Override public ParserRule getRule() { return rule; }

		//name=Name qualifier=Qualifier?
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//qualifier=Qualifier?
		public Assignment getQualifierAssignment_1() { return cQualifierAssignment_1; }

		//Qualifier
		public RuleCall getQualifierQualifierParserRuleCall_1_0() { return cQualifierQualifierParserRuleCall_1_0; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ParenthesizedExpression");
		private final RuleCall cAggregateParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// TODO: OPERATOR_SYMBOL is never followed by a Qualifier
		//ParenthesizedExpression:
		//	Aggregate;
		@Override public ParserRule getRule() { return rule; }

		//Aggregate
		public RuleCall getAggregateParserRuleCall() { return cAggregateParserRuleCall; }
	}

	public class QualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Qualifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQUOTETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAggregateParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Qualifier:
		//	QUOTE Aggregate // TODO: Semantic rule: Check Name is a subtype_mark 
		//;
		@Override public ParserRule getRule() { return rule; }

		//QUOTE Aggregate
		public Group getGroup() { return cGroup; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_0() { return cQUOTETerminalRuleCall_0; }

		//Aggregate
		public RuleCall getAggregateParserRuleCall_1() { return cAggregateParserRuleCall_1; }
	}

	public class AllocatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Allocator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEW_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeNameNameParserRuleCall_1_0 = (RuleCall)cTypeNameAssignment_1.eContents().get(0);
		private final Assignment cQualifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQualifierQualifierParserRuleCall_2_0 = (RuleCall)cQualifierAssignment_2.eContents().get(0);
		
		//Allocator:
		//	NEW_ typeName=Name qualifier=Qualifier? // TODO : Semantic Rule : Subtype_indication is never followed by qualifier.       
		//;
		@Override public ParserRule getRule() { return rule; }

		//NEW_ typeName=Name qualifier=Qualifier?
		public Group getGroup() { return cGroup; }

		//NEW_
		public RuleCall getNEW_TerminalRuleCall_0() { return cNEW_TerminalRuleCall_0; }

		//typeName=Name
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }

		//Name
		public RuleCall getTypeNameNameParserRuleCall_1_0() { return cTypeNameNameParserRuleCall_1_0; }

		//qualifier=Qualifier?
		public Assignment getQualifierAssignment_2() { return cQualifierAssignment_2; }

		//Qualifier
		public RuleCall getQualifierQualifierParserRuleCall_2_0() { return cQualifierQualifierParserRuleCall_2_0; }
	}

	public class SubtypeIndicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SubtypeIndication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpt_nullExclusionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpt_nullExclusionOptNullExclusionParserRuleCall_0_0 = (RuleCall)cOpt_nullExclusionAssignment_0.eContents().get(0);
		private final Assignment cSubtypeMarkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubtypeMarkPATHIDENTIFIERParserRuleCall_1_0 = (RuleCall)cSubtypeMarkAssignment_1.eContents().get(0);
		private final Assignment cOpt_constraintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpt_constraintOptConstraintParserRuleCall_2_0 = (RuleCall)cOpt_constraintAssignment_2.eContents().get(0);
		
		//SubtypeIndication:
		//	opt_nullExclusion=OptNullExclusion subtypeMark=PATHIDENTIFIER opt_constraint=OptConstraint // TODO: Check semantic rule : 'NOT NULL' only for access type, Name. 
		//;
		@Override public ParserRule getRule() { return rule; }

		//opt_nullExclusion=OptNullExclusion subtypeMark=PATHIDENTIFIER opt_constraint=OptConstraint
		public Group getGroup() { return cGroup; }

		//opt_nullExclusion=OptNullExclusion
		public Assignment getOpt_nullExclusionAssignment_0() { return cOpt_nullExclusionAssignment_0; }

		//OptNullExclusion
		public RuleCall getOpt_nullExclusionOptNullExclusionParserRuleCall_0_0() { return cOpt_nullExclusionOptNullExclusionParserRuleCall_0_0; }

		//subtypeMark=PATHIDENTIFIER
		public Assignment getSubtypeMarkAssignment_1() { return cSubtypeMarkAssignment_1; }

		//PATHIDENTIFIER
		public RuleCall getSubtypeMarkPATHIDENTIFIERParserRuleCall_1_0() { return cSubtypeMarkPATHIDENTIFIERParserRuleCall_1_0; }

		//opt_constraint=OptConstraint
		public Assignment getOpt_constraintAssignment_2() { return cOpt_constraintAssignment_2; }

		//OptConstraint
		public RuleCall getOpt_constraintOptConstraintParserRuleCall_2_0() { return cOpt_constraintOptConstraintParserRuleCall_2_0; }
	}

	public class OptNullExclusionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.OptNullExclusion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOptNullExclusionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNot_nullAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNot_nullNullExclusionParserRuleCall_1_0 = (RuleCall)cNot_nullAssignment_1.eContents().get(0);
		
		//OptNullExclusion:
		//	{OptNullExclusion} not_null=NullExclusion?;
		@Override public ParserRule getRule() { return rule; }

		//{OptNullExclusion} not_null=NullExclusion?
		public Group getGroup() { return cGroup; }

		//{OptNullExclusion}
		public Action getOptNullExclusionAction_0() { return cOptNullExclusionAction_0; }

		//not_null=NullExclusion?
		public Assignment getNot_nullAssignment_1() { return cNot_nullAssignment_1; }

		//NullExclusion
		public RuleCall getNot_nullNullExclusionParserRuleCall_1_0() { return cNot_nullNullExclusionParserRuleCall_1_0; }
	}

	public class NullExclusionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NullExclusion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNOT_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNULL_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NullExclusion:
		//	NOT_ NULL_;
		@Override public ParserRule getRule() { return rule; }

		//NOT_ NULL_
		public Group getGroup() { return cGroup; }

		//NOT_
		public RuleCall getNOT_TerminalRuleCall_0() { return cNOT_TerminalRuleCall_0; }

		//NULL_
		public RuleCall getNULL_TerminalRuleCall_1() { return cNULL_TerminalRuleCall_1; }
	}

	public class OptConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.OptConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOptConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOptConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOptConstraintAlternatives_1_0 = (Alternatives)cOptConstraintAssignment_1.eContents().get(0);
		private final RuleCall cOptConstraintCompositeConstraintParserRuleCall_1_0_0 = (RuleCall)cOptConstraintAlternatives_1_0.eContents().get(0);
		private final RuleCall cOptConstraintScalarConstraintParserRuleCall_1_0_1 = (RuleCall)cOptConstraintAlternatives_1_0.eContents().get(1);
		
		//OptConstraint:
		//	{OptConstraint} optConstraint=(CompositeConstraint
		//	| ScalarConstraint)?;
		@Override public ParserRule getRule() { return rule; }

		//{OptConstraint} optConstraint=(CompositeConstraint | ScalarConstraint)?
		public Group getGroup() { return cGroup; }

		//{OptConstraint}
		public Action getOptConstraintAction_0() { return cOptConstraintAction_0; }

		//optConstraint=(CompositeConstraint | ScalarConstraint)?
		public Assignment getOptConstraintAssignment_1() { return cOptConstraintAssignment_1; }

		//(CompositeConstraint | ScalarConstraint)
		public Alternatives getOptConstraintAlternatives_1_0() { return cOptConstraintAlternatives_1_0; }

		//CompositeConstraint
		public RuleCall getOptConstraintCompositeConstraintParserRuleCall_1_0_0() { return cOptConstraintCompositeConstraintParserRuleCall_1_0_0; }

		//ScalarConstraint
		public RuleCall getOptConstraintScalarConstraintParserRuleCall_1_0_1() { return cOptConstraintScalarConstraintParserRuleCall_1_0_1; }
	}

	public class ScalarConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ScalarConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRangeConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDigitsConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDeltaConstraintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ScalarConstraint:
		//	RangeConstraint
		//	| DigitsConstraint
		//	| DeltaConstraint;
		@Override public ParserRule getRule() { return rule; }

		//RangeConstraint | DigitsConstraint | DeltaConstraint
		public Alternatives getAlternatives() { return cAlternatives; }

		//RangeConstraint
		public RuleCall getRangeConstraintParserRuleCall_0() { return cRangeConstraintParserRuleCall_0; }

		//DigitsConstraint
		public RuleCall getDigitsConstraintParserRuleCall_1() { return cDigitsConstraintParserRuleCall_1; }

		//DeltaConstraint
		public RuleCall getDeltaConstraintParserRuleCall_2() { return cDeltaConstraintParserRuleCall_2; }
	}

	public class DigitsConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DigitsConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDIGITS_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cDigitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDigitsSimpleExpressionParserRuleCall_1_0 = (RuleCall)cDigitsAssignment_1.eContents().get(0);
		private final Assignment cRangeConstraintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeConstraintRangeConstraintParserRuleCall_2_0 = (RuleCall)cRangeConstraintAssignment_2.eContents().get(0);
		
		//DigitsConstraint:
		//	DIGITS_ digits=SimpleExpression rangeConstraint=RangeConstraint?;
		@Override public ParserRule getRule() { return rule; }

		//DIGITS_ digits=SimpleExpression rangeConstraint=RangeConstraint?
		public Group getGroup() { return cGroup; }

		//DIGITS_
		public RuleCall getDIGITS_TerminalRuleCall_0() { return cDIGITS_TerminalRuleCall_0; }

		//digits=SimpleExpression
		public Assignment getDigitsAssignment_1() { return cDigitsAssignment_1; }

		//SimpleExpression
		public RuleCall getDigitsSimpleExpressionParserRuleCall_1_0() { return cDigitsSimpleExpressionParserRuleCall_1_0; }

		//rangeConstraint=RangeConstraint?
		public Assignment getRangeConstraintAssignment_2() { return cRangeConstraintAssignment_2; }

		//RangeConstraint
		public RuleCall getRangeConstraintRangeConstraintParserRuleCall_2_0() { return cRangeConstraintRangeConstraintParserRuleCall_2_0; }
	}

	public class DeltaConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DeltaConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDELTA_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cDeltaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeltaSimpleExpressionParserRuleCall_1_0 = (RuleCall)cDeltaAssignment_1.eContents().get(0);
		private final Assignment cRangeConstraintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeConstraintRangeConstraintParserRuleCall_2_0 = (RuleCall)cRangeConstraintAssignment_2.eContents().get(0);
		
		//DeltaConstraint:
		//	DELTA_ delta=SimpleExpression rangeConstraint=RangeConstraint?;
		@Override public ParserRule getRule() { return rule; }

		//DELTA_ delta=SimpleExpression rangeConstraint=RangeConstraint?
		public Group getGroup() { return cGroup; }

		//DELTA_
		public RuleCall getDELTA_TerminalRuleCall_0() { return cDELTA_TerminalRuleCall_0; }

		//delta=SimpleExpression
		public Assignment getDeltaAssignment_1() { return cDeltaAssignment_1; }

		//SimpleExpression
		public RuleCall getDeltaSimpleExpressionParserRuleCall_1_0() { return cDeltaSimpleExpressionParserRuleCall_1_0; }

		//rangeConstraint=RangeConstraint?
		public Assignment getRangeConstraintAssignment_2() { return cRangeConstraintAssignment_2; }

		//RangeConstraint
		public RuleCall getRangeConstraintRangeConstraintParserRuleCall_2_0() { return cRangeConstraintRangeConstraintParserRuleCall_2_0; }
	}

	public class RangeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RangeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRANGE_TerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRangeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//RangeConstraint:
		//	RANGE_ Range;
		@Override public ParserRule getRule() { return rule; }

		//RANGE_ Range
		public Group getGroup() { return cGroup; }

		//RANGE_
		public RuleCall getRANGE_TerminalRuleCall_0() { return cRANGE_TerminalRuleCall_0; }

		//Range
		public RuleCall getRangeParserRuleCall_1() { return cRangeParserRuleCall_1; }
	}

	public class CompositeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.CompositeConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDiscriminantConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndexConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// TODO: Check that it is composed either of Discriminant associations, 
		////       either of Discrete ranges 
		////       NB: the latter designates range of indexes in arrays.
		//CompositeConstraint:
		//	=> DiscriminantConstraint
		//	| IndexConstraint;
		@Override public ParserRule getRule() { return rule; }

		//=> DiscriminantConstraint | IndexConstraint
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> DiscriminantConstraint
		public RuleCall getDiscriminantConstraintParserRuleCall_0() { return cDiscriminantConstraintParserRuleCall_0; }

		//IndexConstraint
		public RuleCall getIndexConstraintParserRuleCall_1() { return cIndexConstraintParserRuleCall_1; }
	}

	public class DiscriminantConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DiscriminantConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cDiscriminantAssociationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDiscriminantAssociationDiscriminantAssociationParserRuleCall_1_0 = (RuleCall)cDiscriminantAssociationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cVTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cDiscriminantAssociationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDiscriminantAssociationDiscriminantAssociationParserRuleCall_2_1_0 = (RuleCall)cDiscriminantAssociationAssignment_2_1.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//DiscriminantConstraint:
		//	PG discriminantAssociation+=DiscriminantAssociation (V discriminantAssociation+=DiscriminantAssociation)* PD;
		@Override public ParserRule getRule() { return rule; }

		//PG discriminantAssociation+=DiscriminantAssociation (V discriminantAssociation+=DiscriminantAssociation)* PD
		public Group getGroup() { return cGroup; }

		//PG
		public RuleCall getPGTerminalRuleCall_0() { return cPGTerminalRuleCall_0; }

		//discriminantAssociation+=DiscriminantAssociation
		public Assignment getDiscriminantAssociationAssignment_1() { return cDiscriminantAssociationAssignment_1; }

		//DiscriminantAssociation
		public RuleCall getDiscriminantAssociationDiscriminantAssociationParserRuleCall_1_0() { return cDiscriminantAssociationDiscriminantAssociationParserRuleCall_1_0; }

		//(V discriminantAssociation+=DiscriminantAssociation)*
		public Group getGroup_2() { return cGroup_2; }

		//V
		public RuleCall getVTerminalRuleCall_2_0() { return cVTerminalRuleCall_2_0; }

		//discriminantAssociation+=DiscriminantAssociation
		public Assignment getDiscriminantAssociationAssignment_2_1() { return cDiscriminantAssociationAssignment_2_1; }

		//DiscriminantAssociation
		public RuleCall getDiscriminantAssociationDiscriminantAssociationParserRuleCall_2_1_0() { return cDiscriminantAssociationDiscriminantAssociationParserRuleCall_2_1_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_3() { return cPDTerminalRuleCall_3; }
	}

	public class IndexConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.IndexConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cDiscreteRangeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDiscreteRangeDiscreteRangeParserRuleCall_1_0 = (RuleCall)cDiscreteRangeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cVTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cDiscreteRangeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDiscreteRangeDiscreteRangeParserRuleCall_2_1_0 = (RuleCall)cDiscreteRangeAssignment_2_1.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//IndexConstraint:
		//	PG discreteRange+=DiscreteRange (V discreteRange+=DiscreteRange)* PD;
		@Override public ParserRule getRule() { return rule; }

		//PG discreteRange+=DiscreteRange (V discreteRange+=DiscreteRange)* PD
		public Group getGroup() { return cGroup; }

		//PG
		public RuleCall getPGTerminalRuleCall_0() { return cPGTerminalRuleCall_0; }

		//discreteRange+=DiscreteRange
		public Assignment getDiscreteRangeAssignment_1() { return cDiscreteRangeAssignment_1; }

		//DiscreteRange
		public RuleCall getDiscreteRangeDiscreteRangeParserRuleCall_1_0() { return cDiscreteRangeDiscreteRangeParserRuleCall_1_0; }

		//(V discreteRange+=DiscreteRange)*
		public Group getGroup_2() { return cGroup_2; }

		//V
		public RuleCall getVTerminalRuleCall_2_0() { return cVTerminalRuleCall_2_0; }

		//discreteRange+=DiscreteRange
		public Assignment getDiscreteRangeAssignment_2_1() { return cDiscreteRangeAssignment_2_1; }

		//DiscreteRange
		public RuleCall getDiscreteRangeDiscreteRangeParserRuleCall_2_1_0() { return cDiscreteRangeDiscreteRangeParserRuleCall_2_1_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_3() { return cPDTerminalRuleCall_3; }
	}

	public class DiscriminantAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DiscriminantAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDiscriminantSelectorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDiscriminantSelectorsDiscriminantSelectorsParserRuleCall_0_0 = (RuleCall)cDiscriminantSelectorsAssignment_0.eContents().get(0);
		private final Assignment cActualParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActualParameterExpressionParserRuleCall_1_0 = (RuleCall)cActualParameterAssignment_1.eContents().get(0);
		
		//DiscriminantAssociation:
		//	discriminantSelectors=DiscriminantSelectors? actualParameter=Expression;
		@Override public ParserRule getRule() { return rule; }

		//discriminantSelectors=DiscriminantSelectors? actualParameter=Expression
		public Group getGroup() { return cGroup; }

		//discriminantSelectors=DiscriminantSelectors?
		public Assignment getDiscriminantSelectorsAssignment_0() { return cDiscriminantSelectorsAssignment_0; }

		//DiscriminantSelectors
		public RuleCall getDiscriminantSelectorsDiscriminantSelectorsParserRuleCall_0_0() { return cDiscriminantSelectorsDiscriminantSelectorsParserRuleCall_0_0; }

		//actualParameter=Expression
		public Assignment getActualParameterAssignment_1() { return cActualParameterAssignment_1; }

		//Expression
		public RuleCall getActualParameterExpressionParserRuleCall_1_0() { return cActualParameterExpressionParserRuleCall_1_0; }
	}

	public class DiscriminantSelectorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DiscriminantSelectors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDiscriminantSelectorNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDiscriminantSelectorNameSelectorNameParserRuleCall_0_0 = (RuleCall)cDiscriminantSelectorNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cBVTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cDiscriminantSelectorNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDiscriminantSelectorNameSelectorNameParserRuleCall_1_1_0 = (RuleCall)cDiscriminantSelectorNameAssignment_1_1.eContents().get(0);
		private final RuleCall cFLECHETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DiscriminantSelectors:
		//	discriminantSelectorName+=SelectorName (BV discriminantSelectorName+=SelectorName)* FLECHE;
		@Override public ParserRule getRule() { return rule; }

		//discriminantSelectorName+=SelectorName (BV discriminantSelectorName+=SelectorName)* FLECHE
		public Group getGroup() { return cGroup; }

		//discriminantSelectorName+=SelectorName
		public Assignment getDiscriminantSelectorNameAssignment_0() { return cDiscriminantSelectorNameAssignment_0; }

		//SelectorName
		public RuleCall getDiscriminantSelectorNameSelectorNameParserRuleCall_0_0() { return cDiscriminantSelectorNameSelectorNameParserRuleCall_0_0; }

		//(BV discriminantSelectorName+=SelectorName)*
		public Group getGroup_1() { return cGroup_1; }

		//BV
		public RuleCall getBVTerminalRuleCall_1_0() { return cBVTerminalRuleCall_1_0; }

		//discriminantSelectorName+=SelectorName
		public Assignment getDiscriminantSelectorNameAssignment_1_1() { return cDiscriminantSelectorNameAssignment_1_1; }

		//SelectorName
		public RuleCall getDiscriminantSelectorNameSelectorNameParserRuleCall_1_1_0() { return cDiscriminantSelectorNameSelectorNameParserRuleCall_1_1_0; }

		//FLECHE
		public RuleCall getFLECHETerminalRuleCall_2() { return cFLECHETerminalRuleCall_2; }
	}

	public class DiscreteRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DiscreteRange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubtypeIndicationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DiscreteRange:
		//	=> Range
		//	| SubtypeIndication;
		@Override public ParserRule getRule() { return rule; }

		//=> Range | SubtypeIndication
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> Range
		public RuleCall getRangeParserRuleCall_0() { return cRangeParserRuleCall_0; }

		//SubtypeIndication
		public RuleCall getSubtypeIndicationParserRuleCall_1() { return cSubtypeIndicationParserRuleCall_1; }
	}

	public class ComponentChoiceListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ComponentChoiceList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cComponentSelectorNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cComponentSelectorNameSelectorNameParserRuleCall_0_0_0 = (RuleCall)cComponentSelectorNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cBVTerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Assignment cComponentSelectorNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cComponentSelectorNameSelectorNameParserRuleCall_0_1_1_0 = (RuleCall)cComponentSelectorNameAssignment_0_1_1.eContents().get(0);
		private final Assignment cOthersAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOthersOTHERS_TerminalRuleCall_1_0 = (RuleCall)cOthersAssignment_1.eContents().get(0);
		
		//// TODO: Check the following syntactic rule 
		////       (because this syntactic rule is unified with record aggregate)
		////       NULL_ RECORD_ is not allowed for an array aggregate
		////Component_association_list: {Record_component_association_list}
		////          (componentAssociation += Component_association (V componentAssociation += Component_association)*
		////        | nullRecord?=NULL_ RECORD_)
		////        ;
		//// TODO: Check the following syntactic rule :
		////       positional and named associations are not mixed
		////       Other syntactic rule to check : "<>" must be associated with a non empty
		////       componentChoiceList. 
		////Component_association:{Component_association}
		////         (=> componentsChoiceList=Component_choice_list FLECHE)? 
		////         (expression = Expression | box?=BOIT)
		////        ;
		//// TODO: Unified with Array aggregate
		////       (i.e : Selector_name has been replaced by Dscrete_choice in Component_choice_list).
		////       To balance this, check the following syntactic rule :
		////       Discrete_range is equivalent to a Selector_name only for a record aggregate
		//ComponentChoiceList:
		//	componentSelectorName+=SelectorName (BV componentSelectorName+=SelectorName)*
		//	| others?=OTHERS_;
		@Override public ParserRule getRule() { return rule; }

		//componentSelectorName+=SelectorName (BV componentSelectorName+=SelectorName)* | others?=OTHERS_
		public Alternatives getAlternatives() { return cAlternatives; }

		//componentSelectorName+=SelectorName (BV componentSelectorName+=SelectorName)*
		public Group getGroup_0() { return cGroup_0; }

		//componentSelectorName+=SelectorName
		public Assignment getComponentSelectorNameAssignment_0_0() { return cComponentSelectorNameAssignment_0_0; }

		//SelectorName
		public RuleCall getComponentSelectorNameSelectorNameParserRuleCall_0_0_0() { return cComponentSelectorNameSelectorNameParserRuleCall_0_0_0; }

		//(BV componentSelectorName+=SelectorName)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//BV
		public RuleCall getBVTerminalRuleCall_0_1_0() { return cBVTerminalRuleCall_0_1_0; }

		//componentSelectorName+=SelectorName
		public Assignment getComponentSelectorNameAssignment_0_1_1() { return cComponentSelectorNameAssignment_0_1_1; }

		//SelectorName
		public RuleCall getComponentSelectorNameSelectorNameParserRuleCall_0_1_1_0() { return cComponentSelectorNameSelectorNameParserRuleCall_0_1_1_0; }

		//others?=OTHERS_
		public Assignment getOthersAssignment_1() { return cOthersAssignment_1; }

		//OTHERS_
		public RuleCall getOthersOTHERS_TerminalRuleCall_1_0() { return cOthersOTHERS_TerminalRuleCall_1_0; }
	}

	public class DiscreteChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DiscreteChoice");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSubtypeIndicationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDiscreteChoiceAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cOTHERS_TerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//DiscreteChoice:
		//	=> Range
		//	| => Expression // TODO: Could reduced to a name that is a subtype_indication
		//	| SubtypeIndication
		//	| {DiscreteChoice} OTHERS_;
		@Override public ParserRule getRule() { return rule; }

		//=> Range | => Expression // TODO: Could reduced to a name that is a subtype_indication
		//| SubtypeIndication | {DiscreteChoice} OTHERS_
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> Range
		public RuleCall getRangeParserRuleCall_0() { return cRangeParserRuleCall_0; }

		//=> Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//SubtypeIndication
		public RuleCall getSubtypeIndicationParserRuleCall_2() { return cSubtypeIndicationParserRuleCall_2; }

		//{DiscreteChoice} OTHERS_
		public Group getGroup_3() { return cGroup_3; }

		//{DiscreteChoice}
		public Action getDiscreteChoiceAction_3_0() { return cDiscreteChoiceAction_3_0; }

		//OTHERS_
		public RuleCall getOTHERS_TerminalRuleCall_3_1() { return cOTHERS_TerminalRuleCall_3_1; }
	}

	public class AggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Aggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cArrayAggregateParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cRecordAggregateParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cExtensionAggregateParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cPDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// TODO : Because array aggregate rules are unified with record aggregate rules
		////        check that an array aggregate is not preceded by Ancestor_part WITH_ 
		//Aggregate:
		//	PG (=> ArrayAggregate
		//	| => RecordAggregate
		//	| ExtensionAggregate) PD;
		@Override public ParserRule getRule() { return rule; }

		//PG (=> ArrayAggregate | => RecordAggregate | ExtensionAggregate) PD
		public Group getGroup() { return cGroup; }

		//PG
		public RuleCall getPGTerminalRuleCall_0() { return cPGTerminalRuleCall_0; }

		//(=> ArrayAggregate | => RecordAggregate | ExtensionAggregate)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ArrayAggregate
		public RuleCall getArrayAggregateParserRuleCall_1_0() { return cArrayAggregateParserRuleCall_1_0; }

		//=> RecordAggregate
		public RuleCall getRecordAggregateParserRuleCall_1_1() { return cRecordAggregateParserRuleCall_1_1; }

		//ExtensionAggregate
		public RuleCall getExtensionAggregateParserRuleCall_1_2() { return cExtensionAggregateParserRuleCall_1_2; }

		//PD
		public RuleCall getPDTerminalRuleCall_2() { return cPDTerminalRuleCall_2; }
	}

	public class RecordAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RecordAggregate");
		private final RuleCall cRecordComponentAssociationListParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RecordAggregate:
		//	RecordComponentAssociationList;
		@Override public ParserRule getRule() { return rule; }

		//RecordComponentAssociationList
		public RuleCall getRecordComponentAssociationListParserRuleCall() { return cRecordComponentAssociationListParserRuleCall; }
	}

	public class RecordComponentAssociationListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RecordComponentAssociationList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRecordComponentAssociationAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRecordComponentAssociationRecordComponentAssociationParserRuleCall_0_0_0 = (RuleCall)cRecordComponentAssociationAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cVTerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Assignment cRecordComponentAssociationAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cRecordComponentAssociationRecordComponentAssociationParserRuleCall_0_1_1_0 = (RuleCall)cRecordComponentAssociationAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNullRecordAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNullRecordNULL_TerminalRuleCall_1_0_0 = (RuleCall)cNullRecordAssignment_1_0.eContents().get(0);
		private final RuleCall cRECORD_TerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//RecordComponentAssociationList:
		//	recordComponentAssociation+=RecordComponentAssociation (V recordComponentAssociation+=RecordComponentAssociation)*
		//	| nullRecord?=NULL_ RECORD_;
		@Override public ParserRule getRule() { return rule; }

		//recordComponentAssociation+=RecordComponentAssociation (V recordComponentAssociation+=RecordComponentAssociation)* |
		//nullRecord?=NULL_ RECORD_
		public Alternatives getAlternatives() { return cAlternatives; }

		//recordComponentAssociation+=RecordComponentAssociation (V recordComponentAssociation+=RecordComponentAssociation)*
		public Group getGroup_0() { return cGroup_0; }

		//recordComponentAssociation+=RecordComponentAssociation
		public Assignment getRecordComponentAssociationAssignment_0_0() { return cRecordComponentAssociationAssignment_0_0; }

		//RecordComponentAssociation
		public RuleCall getRecordComponentAssociationRecordComponentAssociationParserRuleCall_0_0_0() { return cRecordComponentAssociationRecordComponentAssociationParserRuleCall_0_0_0; }

		//(V recordComponentAssociation+=RecordComponentAssociation)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//V
		public RuleCall getVTerminalRuleCall_0_1_0() { return cVTerminalRuleCall_0_1_0; }

		//recordComponentAssociation+=RecordComponentAssociation
		public Assignment getRecordComponentAssociationAssignment_0_1_1() { return cRecordComponentAssociationAssignment_0_1_1; }

		//RecordComponentAssociation
		public RuleCall getRecordComponentAssociationRecordComponentAssociationParserRuleCall_0_1_1_0() { return cRecordComponentAssociationRecordComponentAssociationParserRuleCall_0_1_1_0; }

		//nullRecord?=NULL_ RECORD_
		public Group getGroup_1() { return cGroup_1; }

		//nullRecord?=NULL_
		public Assignment getNullRecordAssignment_1_0() { return cNullRecordAssignment_1_0; }

		//NULL_
		public RuleCall getNullRecordNULL_TerminalRuleCall_1_0_0() { return cNullRecordNULL_TerminalRuleCall_1_0_0; }

		//RECORD_
		public RuleCall getRECORD_TerminalRuleCall_1_1() { return cRECORD_TerminalRuleCall_1_1; }
	}

	public class RecordComponentAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RecordComponentAssociation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInitializedComponentsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUninitializedComponentsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RecordComponentAssociation:
		//	=> InitializedComponents // TODO: Here is an ambiguity with Positional_array_aggregate for singleton '( value )'
		//	| UninitializedComponents;
		@Override public ParserRule getRule() { return rule; }

		//=> InitializedComponents // TODO: Here is an ambiguity with Positional_array_aggregate for singleton '( value )'
		//| UninitializedComponents
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> InitializedComponents
		public RuleCall getInitializedComponentsParserRuleCall_0() { return cInitializedComponentsParserRuleCall_0; }

		//UninitializedComponents
		public RuleCall getUninitializedComponentsParserRuleCall_1() { return cUninitializedComponentsParserRuleCall_1; }
	}

	public class InitializedComponentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.InitializedComponents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cComponentChoiceListAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cComponentChoiceListComponentChoiceListParserRuleCall_0_0_0 = (RuleCall)cComponentChoiceListAssignment_0_0.eContents().get(0);
		private final RuleCall cFLECHETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//// TODO: So, disambiguate by type checking thanks to the inferred type.
		//InitializedComponents:
		//	(componentChoiceList+=ComponentChoiceList FLECHE)? value=Expression;
		@Override public ParserRule getRule() { return rule; }

		//(componentChoiceList+=ComponentChoiceList FLECHE)? value=Expression
		public Group getGroup() { return cGroup; }

		//(componentChoiceList+=ComponentChoiceList FLECHE)?
		public Group getGroup_0() { return cGroup_0; }

		//componentChoiceList+=ComponentChoiceList
		public Assignment getComponentChoiceListAssignment_0_0() { return cComponentChoiceListAssignment_0_0; }

		//ComponentChoiceList
		public RuleCall getComponentChoiceListComponentChoiceListParserRuleCall_0_0_0() { return cComponentChoiceListComponentChoiceListParserRuleCall_0_0_0; }

		//FLECHE
		public RuleCall getFLECHETerminalRuleCall_0_1() { return cFLECHETerminalRuleCall_0_1; }

		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
	}

	public class UninitializedComponentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.UninitializedComponents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentChoiceListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComponentChoiceListComponentChoiceListParserRuleCall_0_0 = (RuleCall)cComponentChoiceListAssignment_0.eContents().get(0);
		private final RuleCall cFLECHETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cBoxAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBoxBOITTerminalRuleCall_2_0 = (RuleCall)cBoxAssignment_2.eContents().get(0);
		
		//UninitializedComponents:
		//	componentChoiceList+=ComponentChoiceList FLECHE box?=BOIT;
		@Override public ParserRule getRule() { return rule; }

		//componentChoiceList+=ComponentChoiceList FLECHE box?=BOIT
		public Group getGroup() { return cGroup; }

		//componentChoiceList+=ComponentChoiceList
		public Assignment getComponentChoiceListAssignment_0() { return cComponentChoiceListAssignment_0; }

		//ComponentChoiceList
		public RuleCall getComponentChoiceListComponentChoiceListParserRuleCall_0_0() { return cComponentChoiceListComponentChoiceListParserRuleCall_0_0; }

		//FLECHE
		public RuleCall getFLECHETerminalRuleCall_1() { return cFLECHETerminalRuleCall_1; }

		//box?=BOIT
		public Assignment getBoxAssignment_2() { return cBoxAssignment_2; }

		//BOIT
		public RuleCall getBoxBOITTerminalRuleCall_2_0() { return cBoxBOITTerminalRuleCall_2_0; }
	}

	public class ExtensionAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ExtensionAggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAncestorPartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAncestorPartAncestorPartParserRuleCall_0_0 = (RuleCall)cAncestorPartAssignment_0.eContents().get(0);
		private final RuleCall cWITH_TerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRecordComponentAssociationListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRecordComponentAssociationListRecordComponentAssociationListParserRuleCall_2_0 = (RuleCall)cRecordComponentAssociationListAssignment_2.eContents().get(0);
		
		//ExtensionAggregate:
		//	ancestorPart=AncestorPart WITH_ recordComponentAssociationList=RecordComponentAssociationList;
		@Override public ParserRule getRule() { return rule; }

		//ancestorPart=AncestorPart WITH_ recordComponentAssociationList=RecordComponentAssociationList
		public Group getGroup() { return cGroup; }

		//ancestorPart=AncestorPart
		public Assignment getAncestorPartAssignment_0() { return cAncestorPartAssignment_0; }

		//AncestorPart
		public RuleCall getAncestorPartAncestorPartParserRuleCall_0_0() { return cAncestorPartAncestorPartParserRuleCall_0_0; }

		//WITH_
		public RuleCall getWITH_TerminalRuleCall_1() { return cWITH_TerminalRuleCall_1; }

		//recordComponentAssociationList=RecordComponentAssociationList
		public Assignment getRecordComponentAssociationListAssignment_2() { return cRecordComponentAssociationListAssignment_2; }

		//RecordComponentAssociationList
		public RuleCall getRecordComponentAssociationListRecordComponentAssociationListParserRuleCall_2_0() { return cRecordComponentAssociationListRecordComponentAssociationListParserRuleCall_2_0; }
	}

	public class ArrayAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ArrayAggregate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPositionalArrayAggregateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamedArrayAggregateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ArrayAggregate:
		//	=> PositionalArrayAggregate
		//	| NamedArrayAggregate;
		@Override public ParserRule getRule() { return rule; }

		//=> PositionalArrayAggregate | NamedArrayAggregate
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> PositionalArrayAggregate
		public RuleCall getPositionalArrayAggregateParserRuleCall_0() { return cPositionalArrayAggregateParserRuleCall_0; }

		//NamedArrayAggregate
		public RuleCall getNamedArrayAggregateParserRuleCall_1() { return cNamedArrayAggregateParserRuleCall_1; }
	}

	public class PositionalArrayAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PositionalArrayAggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitialValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInitialValuesExpressionParserRuleCall_0_0 = (RuleCall)cInitialValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cVTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cInitialValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInitialValuesExpressionParserRuleCall_1_1_0 = (RuleCall)cInitialValuesAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cVTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cOTHERS_TerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cFLECHETerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_2_3 = (Alternatives)cGroup_2.eContents().get(3);
		private final Assignment cOthersValueAssignment_2_3_0 = (Assignment)cAlternatives_2_3.eContents().get(0);
		private final RuleCall cOthersValueExpressionParserRuleCall_2_3_0_0 = (RuleCall)cOthersValueAssignment_2_3_0.eContents().get(0);
		private final Assignment cOthersBoxAssignment_2_3_1 = (Assignment)cAlternatives_2_3.eContents().get(1);
		private final RuleCall cOthersBoxBOITTerminalRuleCall_2_3_1_0 = (RuleCall)cOthersBoxAssignment_2_3_1.eContents().get(0);
		
		//PositionalArrayAggregate:
		//	initialValues+=Expression (V initialValues+=Expression)+ (V OTHERS_ FLECHE (othersValue=Expression |
		//	othersBox?=BOIT))? // So, disambiguate by type checking thanks to the inferred type.
		//;
		@Override public ParserRule getRule() { return rule; }

		//initialValues+=Expression (V initialValues+=Expression)+ (V OTHERS_ FLECHE (othersValue=Expression | othersBox?=BOIT))?
		public Group getGroup() { return cGroup; }

		//initialValues+=Expression
		public Assignment getInitialValuesAssignment_0() { return cInitialValuesAssignment_0; }

		//Expression
		public RuleCall getInitialValuesExpressionParserRuleCall_0_0() { return cInitialValuesExpressionParserRuleCall_0_0; }

		//(V initialValues+=Expression)+
		public Group getGroup_1() { return cGroup_1; }

		//V
		public RuleCall getVTerminalRuleCall_1_0() { return cVTerminalRuleCall_1_0; }

		//initialValues+=Expression
		public Assignment getInitialValuesAssignment_1_1() { return cInitialValuesAssignment_1_1; }

		//Expression
		public RuleCall getInitialValuesExpressionParserRuleCall_1_1_0() { return cInitialValuesExpressionParserRuleCall_1_1_0; }

		//(V OTHERS_ FLECHE (othersValue=Expression | othersBox?=BOIT))?
		public Group getGroup_2() { return cGroup_2; }

		//V
		public RuleCall getVTerminalRuleCall_2_0() { return cVTerminalRuleCall_2_0; }

		//OTHERS_
		public RuleCall getOTHERS_TerminalRuleCall_2_1() { return cOTHERS_TerminalRuleCall_2_1; }

		//FLECHE
		public RuleCall getFLECHETerminalRuleCall_2_2() { return cFLECHETerminalRuleCall_2_2; }

		//(othersValue=Expression | othersBox?=BOIT)
		public Alternatives getAlternatives_2_3() { return cAlternatives_2_3; }

		//othersValue=Expression
		public Assignment getOthersValueAssignment_2_3_0() { return cOthersValueAssignment_2_3_0; }

		//Expression
		public RuleCall getOthersValueExpressionParserRuleCall_2_3_0_0() { return cOthersValueExpressionParserRuleCall_2_3_0_0; }

		//othersBox?=BOIT
		public Assignment getOthersBoxAssignment_2_3_1() { return cOthersBoxAssignment_2_3_1; }

		//BOIT
		public RuleCall getOthersBoxBOITTerminalRuleCall_2_3_1_0() { return cOthersBoxBOITTerminalRuleCall_2_3_1_0; }
	}

	public class NamedArrayAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NamedArrayAggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArrayComponentAssociationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArrayComponentAssociationArrayComponentAssociationParserRuleCall_0_0 = (RuleCall)cArrayComponentAssociationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cVTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cArrayComponentAssociationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArrayComponentAssociationArrayComponentAssociationParserRuleCall_1_1_0 = (RuleCall)cArrayComponentAssociationAssignment_1_1.eContents().get(0);
		
		//NamedArrayAggregate:
		//	arrayComponentAssociation+=ArrayComponentAssociation (V arrayComponentAssociation+=ArrayComponentAssociation)* // TODO: Here is an ambiguity with Record_component_association_list
		//;
		@Override public ParserRule getRule() { return rule; }

		//arrayComponentAssociation+=ArrayComponentAssociation (V arrayComponentAssociation+=ArrayComponentAssociation)*
		public Group getGroup() { return cGroup; }

		//arrayComponentAssociation+=ArrayComponentAssociation
		public Assignment getArrayComponentAssociationAssignment_0() { return cArrayComponentAssociationAssignment_0; }

		//ArrayComponentAssociation
		public RuleCall getArrayComponentAssociationArrayComponentAssociationParserRuleCall_0_0() { return cArrayComponentAssociationArrayComponentAssociationParserRuleCall_0_0; }

		//(V arrayComponentAssociation+=ArrayComponentAssociation)*
		public Group getGroup_1() { return cGroup_1; }

		//V
		public RuleCall getVTerminalRuleCall_1_0() { return cVTerminalRuleCall_1_0; }

		//arrayComponentAssociation+=ArrayComponentAssociation
		public Assignment getArrayComponentAssociationAssignment_1_1() { return cArrayComponentAssociationAssignment_1_1; }

		//ArrayComponentAssociation
		public RuleCall getArrayComponentAssociationArrayComponentAssociationParserRuleCall_1_1_0() { return cArrayComponentAssociationArrayComponentAssociationParserRuleCall_1_1_0; }
	}

	public class ArrayComponentAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ArrayComponentAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDiscreteChoiceListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDiscreteChoiceListDiscreteChoiceListParserRuleCall_0_0 = (RuleCall)cDiscreteChoiceListAssignment_0.eContents().get(0);
		private final RuleCall cFLECHETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Assignment cBoxAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBoxBOITTerminalRuleCall_2_1_0 = (RuleCall)cBoxAssignment_2_1.eContents().get(0);
		
		//ArrayComponentAssociation:
		//	discreteChoiceList=DiscreteChoiceList FLECHE (expression=Expression | box?=BOIT);
		@Override public ParserRule getRule() { return rule; }

		//discreteChoiceList=DiscreteChoiceList FLECHE (expression=Expression | box?=BOIT)
		public Group getGroup() { return cGroup; }

		//discreteChoiceList=DiscreteChoiceList
		public Assignment getDiscreteChoiceListAssignment_0() { return cDiscreteChoiceListAssignment_0; }

		//DiscreteChoiceList
		public RuleCall getDiscreteChoiceListDiscreteChoiceListParserRuleCall_0_0() { return cDiscreteChoiceListDiscreteChoiceListParserRuleCall_0_0; }

		//FLECHE
		public RuleCall getFLECHETerminalRuleCall_1() { return cFLECHETerminalRuleCall_1; }

		//(expression=Expression | box?=BOIT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0_0() { return cExpressionExpressionParserRuleCall_2_0_0; }

		//box?=BOIT
		public Assignment getBoxAssignment_2_1() { return cBoxAssignment_2_1; }

		//BOIT
		public RuleCall getBoxBOITTerminalRuleCall_2_1_0() { return cBoxBOITTerminalRuleCall_2_1_0; }
	}

	public class AncestorPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AncestorPart");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AncestorPart:
		//	Expression // TODO: Expression could be a the name of a subtype
		//	//       check this semantic rule.
		//	// | Name TODO: Remove this rule
		//;
		@Override public ParserRule getRule() { return rule; }

		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class PATHIDENTIFIERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PATHIDENTIFIER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cPTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PATHIDENTIFIER:
		//	(IDENTIFIER P)* IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }

		//(IDENTIFIER P)* IDENTIFIER
		public Group getGroup() { return cGroup; }

		//(IDENTIFIER P)*
		public Group getGroup_0() { return cGroup_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_0() { return cIDENTIFIERTerminalRuleCall_0_0; }

		//P
		public RuleCall getPTerminalRuleCall_0_1() { return cPTerminalRuleCall_0_1; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
	}

	public class PATHNAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PATHNAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cPTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cDIRECT_NAMEParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PATHNAME:
		//	(IDENTIFIER P)* DIRECT_NAME;
		@Override public ParserRule getRule() { return rule; }

		//(IDENTIFIER P)* DIRECT_NAME
		public Group getGroup() { return cGroup; }

		//(IDENTIFIER P)*
		public Group getGroup_0() { return cGroup_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_0() { return cIDENTIFIERTerminalRuleCall_0_0; }

		//P
		public RuleCall getPTerminalRuleCall_0_1() { return cPTerminalRuleCall_0_1; }

		//DIRECT_NAME
		public RuleCall getDIRECT_NAMEParserRuleCall_1() { return cDIRECT_NAMEParserRuleCall_1; }
	}

	public class DIRECT_NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DIRECT_NAME");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOPERATOR_SYMBOLTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DIRECT_NAME:
		//	IDENTIFIER
		//	| OPERATOR_SYMBOL;
		@Override public ParserRule getRule() { return rule; }

		//IDENTIFIER | OPERATOR_SYMBOL
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }

		//OPERATOR_SYMBOL
		public RuleCall getOPERATOR_SYMBOLTerminalRuleCall_1() { return cOPERATOR_SYMBOLTerminalRuleCall_1; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSelectorNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPrimaryNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrimaryNamePrimaryNameParserRuleCall_1_0 = (RuleCall)cPrimaryNameAssignment_1.eContents().get(0);
		
		//Name:
		//	name=SelectorName primaryName=PrimaryName?;
		@Override public ParserRule getRule() { return rule; }

		//name=SelectorName primaryName=PrimaryName?
		public Group getGroup() { return cGroup; }

		//name=SelectorName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//SelectorName
		public RuleCall getNameSelectorNameParserRuleCall_0_0() { return cNameSelectorNameParserRuleCall_0_0; }

		//primaryName=PrimaryName?
		public Assignment getPrimaryNameAssignment_1() { return cPrimaryNameAssignment_1; }

		//PrimaryName
		public RuleCall getPrimaryNamePrimaryNameParserRuleCall_1_0() { return cPrimaryNamePrimaryNameParserRuleCall_1_0; }
	}

	public class SelectorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SelectorName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCHARACTER_LITERALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOPERATOR_SYMBOLTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SelectorName:
		//	IDENTIFIER
		//	| CHARACTER_LITERAL
		//	| OPERATOR_SYMBOL;
		@Override public ParserRule getRule() { return rule; }

		//IDENTIFIER | CHARACTER_LITERAL | OPERATOR_SYMBOL
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }

		//CHARACTER_LITERAL
		public RuleCall getCHARACTER_LITERALTerminalRuleCall_1() { return cCHARACTER_LITERALTerminalRuleCall_1; }

		//OPERATOR_SYMBOL
		public RuleCall getOPERATOR_SYMBOLTerminalRuleCall_2() { return cOPERATOR_SYMBOLTerminalRuleCall_2; }
	}

	public class PrimaryNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PrimaryName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cPGTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cParameterAssociationAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cParameterAssociationParameterAssociationParserRuleCall_1_0_1_0 = (RuleCall)cParameterAssociationAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final RuleCall cVTerminalRuleCall_1_0_2_0 = (RuleCall)cGroup_1_0_2.eContents().get(0);
		private final Assignment cParameterAssociationAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cParameterAssociationParameterAssociationParserRuleCall_1_0_2_1_0 = (RuleCall)cParameterAssociationAssignment_1_0_2_1.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_1_0_3 = (RuleCall)cGroup_1_0.eContents().get(3);
		private final Assignment cPrimaryNameAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cPrimaryNamePrimaryNameParserRuleCall_1_0_4_0 = (RuleCall)cPrimaryNameAssignment_1_0_4.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cPTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final RuleCall cALL_TerminalRuleCall_1_1_1_0 = (RuleCall)cAlternatives_1_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final RuleCall cQUOTETerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cAttributeDesignatorAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cAttributeDesignatorAttributeDesignatorParserRuleCall_1_2_1_0 = (RuleCall)cAttributeDesignatorAssignment_1_2_1.eContents().get(0);
		
		//PrimaryName:
		//	{PrimaryName} (PG parameterAssociation+=ParameterAssociation (V parameterAssociation+=ParameterAssociation)* PD
		//	primaryName=PrimaryName?
		//	| P (ALL_ | name=Name) | QUOTE attributeDesignator=AttributeDesignator);
		@Override public ParserRule getRule() { return rule; }

		//{PrimaryName} (PG parameterAssociation+=ParameterAssociation (V parameterAssociation+=ParameterAssociation)* PD
		//primaryName=PrimaryName? | P (ALL_ | name=Name) | QUOTE attributeDesignator=AttributeDesignator)
		public Group getGroup() { return cGroup; }

		//{PrimaryName}
		public Action getPrimaryNameAction_0() { return cPrimaryNameAction_0; }

		//(PG parameterAssociation+=ParameterAssociation (V parameterAssociation+=ParameterAssociation)* PD
		//primaryName=PrimaryName? | P (ALL_ | name=Name) | QUOTE attributeDesignator=AttributeDesignator)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//PG parameterAssociation+=ParameterAssociation (V parameterAssociation+=ParameterAssociation)* PD
		//primaryName=PrimaryName?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//PG
		public RuleCall getPGTerminalRuleCall_1_0_0() { return cPGTerminalRuleCall_1_0_0; }

		//parameterAssociation+=ParameterAssociation
		public Assignment getParameterAssociationAssignment_1_0_1() { return cParameterAssociationAssignment_1_0_1; }

		//ParameterAssociation
		public RuleCall getParameterAssociationParameterAssociationParserRuleCall_1_0_1_0() { return cParameterAssociationParameterAssociationParserRuleCall_1_0_1_0; }

		//(V parameterAssociation+=ParameterAssociation)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//V
		public RuleCall getVTerminalRuleCall_1_0_2_0() { return cVTerminalRuleCall_1_0_2_0; }

		//parameterAssociation+=ParameterAssociation
		public Assignment getParameterAssociationAssignment_1_0_2_1() { return cParameterAssociationAssignment_1_0_2_1; }

		//ParameterAssociation
		public RuleCall getParameterAssociationParameterAssociationParserRuleCall_1_0_2_1_0() { return cParameterAssociationParameterAssociationParserRuleCall_1_0_2_1_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_1_0_3() { return cPDTerminalRuleCall_1_0_3; }

		//primaryName=PrimaryName?
		public Assignment getPrimaryNameAssignment_1_0_4() { return cPrimaryNameAssignment_1_0_4; }

		//PrimaryName
		public RuleCall getPrimaryNamePrimaryNameParserRuleCall_1_0_4_0() { return cPrimaryNamePrimaryNameParserRuleCall_1_0_4_0; }

		//P (ALL_ | name=Name)
		public Group getGroup_1_1() { return cGroup_1_1; }

		//P
		public RuleCall getPTerminalRuleCall_1_1_0() { return cPTerminalRuleCall_1_1_0; }

		//(ALL_ | name=Name)
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//ALL_
		public RuleCall getALL_TerminalRuleCall_1_1_1_0() { return cALL_TerminalRuleCall_1_1_1_0; }

		//name=Name
		public Assignment getNameAssignment_1_1_1_1() { return cNameAssignment_1_1_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_1_1_1_0() { return cNameNameParserRuleCall_1_1_1_1_0; }

		//QUOTE attributeDesignator=AttributeDesignator
		public Group getGroup_1_2() { return cGroup_1_2; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_1_2_0() { return cQUOTETerminalRuleCall_1_2_0; }

		//attributeDesignator=AttributeDesignator
		public Assignment getAttributeDesignatorAssignment_1_2_1() { return cAttributeDesignatorAssignment_1_2_1; }

		//AttributeDesignator
		public RuleCall getAttributeDesignatorAttributeDesignatorParserRuleCall_1_2_1_0() { return cAttributeDesignatorAttributeDesignatorParserRuleCall_1_2_1_0; }
	}

	public class ParameterAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ParameterAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSelectorNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSelectorNameSelectorNameParserRuleCall_0_0_0 = (RuleCall)cSelectorNameAssignment_0_0.eContents().get(0);
		private final RuleCall cFLECHETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cParameterEffectiveValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterEffectiveValueParameterEffectiveValueParserRuleCall_1_0 = (RuleCall)cParameterEffectiveValueAssignment_1.eContents().get(0);
		
		//ParameterAssociation:
		//	(selectorName=SelectorName FLECHE)? parameterEffectiveValue=ParameterEffectiveValue;
		@Override public ParserRule getRule() { return rule; }

		//(selectorName=SelectorName FLECHE)? parameterEffectiveValue=ParameterEffectiveValue
		public Group getGroup() { return cGroup; }

		//(selectorName=SelectorName FLECHE)?
		public Group getGroup_0() { return cGroup_0; }

		//selectorName=SelectorName
		public Assignment getSelectorNameAssignment_0_0() { return cSelectorNameAssignment_0_0; }

		//SelectorName
		public RuleCall getSelectorNameSelectorNameParserRuleCall_0_0_0() { return cSelectorNameSelectorNameParserRuleCall_0_0_0; }

		//FLECHE
		public RuleCall getFLECHETerminalRuleCall_0_1() { return cFLECHETerminalRuleCall_0_1; }

		//parameterEffectiveValue=ParameterEffectiveValue
		public Assignment getParameterEffectiveValueAssignment_1() { return cParameterEffectiveValueAssignment_1; }

		//ParameterEffectiveValue
		public RuleCall getParameterEffectiveValueParameterEffectiveValueParserRuleCall_1_0() { return cParameterEffectiveValueParameterEffectiveValueParserRuleCall_1_0; }
	}

	public class ParameterEffectiveValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ParameterEffectiveValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParameterEffectiveValue:
		//	=> Range // Note : Discrete_range - Subtype_indication  
		//	| Expression // TODO: check Could be a Name that is a Subtype_indication.
		//	//       then, It must be checked by a semantic rule.
		//	//                           | => subtypeIndication = Subtype_indication	            // TODO: To delete very probably given what is said just above.           	                          
		//;
		@Override public ParserRule getRule() { return rule; }

		//=> Range // Note : Discrete_range - Subtype_indication  
		//| Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> Range
		public RuleCall getRangeParserRuleCall_0() { return cRangeParserRuleCall_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}

	public class AttributeDesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AttributeDesignator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeDesignatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cStaticExpressionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cStaticExpressionParenthesizedExpressionParserRuleCall_1_0_1_0 = (RuleCall)cStaticExpressionAssignment_1_0_1.eContents().get(0);
		private final RuleCall cACCESS_TerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cDELTA_TerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cDIGITS_TerminalRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		
		//AttributeDesignator:
		//	{AttributeDesignator} (IDENTIFIER staticExpression=ParenthesizedExpression?
		//	| ACCESS_
		//	| DELTA_
		//	| DIGITS_);
		@Override public ParserRule getRule() { return rule; }

		//{AttributeDesignator} (IDENTIFIER staticExpression=ParenthesizedExpression? | ACCESS_ | DELTA_ | DIGITS_)
		public Group getGroup() { return cGroup; }

		//{AttributeDesignator}
		public Action getAttributeDesignatorAction_0() { return cAttributeDesignatorAction_0; }

		//(IDENTIFIER staticExpression=ParenthesizedExpression? | ACCESS_ | DELTA_ | DIGITS_)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//IDENTIFIER staticExpression=ParenthesizedExpression?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_0_0() { return cIDENTIFIERTerminalRuleCall_1_0_0; }

		//staticExpression=ParenthesizedExpression?
		public Assignment getStaticExpressionAssignment_1_0_1() { return cStaticExpressionAssignment_1_0_1; }

		//ParenthesizedExpression
		public RuleCall getStaticExpressionParenthesizedExpressionParserRuleCall_1_0_1_0() { return cStaticExpressionParenthesizedExpressionParserRuleCall_1_0_1_0; }

		//ACCESS_
		public RuleCall getACCESS_TerminalRuleCall_1_1() { return cACCESS_TerminalRuleCall_1_1; }

		//DELTA_
		public RuleCall getDELTA_TerminalRuleCall_1_2() { return cDELTA_TerminalRuleCall_1_2; }

		//DIGITS_
		public RuleCall getDIGITS_TerminalRuleCall_1_3() { return cDIGITS_TerminalRuleCall_1_3; }
	}

	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.Range");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExplicitRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Range:
		//	=> EntityRange
		//	| ExplicitRange;
		@Override public ParserRule getRule() { return rule; }

		//=> EntityRange | ExplicitRange
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> EntityRange
		public RuleCall getEntityRangeParserRuleCall_0() { return cEntityRangeParserRuleCall_0; }

		//ExplicitRange
		public RuleCall getExplicitRangeParserRuleCall_1() { return cExplicitRangeParserRuleCall_1; }
	}

	public class EntityRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.EntityRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRANGE_TerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cPGTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cIndexAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIndexExpressionParserRuleCall_3_1_0 = (RuleCall)cIndexAssignment_3_1.eContents().get(0);
		private final RuleCall cPDTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//EntityRange:
		//	name=Name QUOTE RANGE_ (PG index=Expression PD)?;
		@Override public ParserRule getRule() { return rule; }

		//name=Name QUOTE RANGE_ (PG index=Expression PD)?
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_1() { return cQUOTETerminalRuleCall_1; }

		//RANGE_
		public RuleCall getRANGE_TerminalRuleCall_2() { return cRANGE_TerminalRuleCall_2; }

		//(PG index=Expression PD)?
		public Group getGroup_3() { return cGroup_3; }

		//PG
		public RuleCall getPGTerminalRuleCall_3_0() { return cPGTerminalRuleCall_3_0; }

		//index=Expression
		public Assignment getIndexAssignment_3_1() { return cIndexAssignment_3_1; }

		//Expression
		public RuleCall getIndexExpressionParserRuleCall_3_1_0() { return cIndexExpressionParserRuleCall_3_1_0; }

		//PD
		public RuleCall getPDTerminalRuleCall_3_2() { return cPDTerminalRuleCall_3_2; }
	}

	public class ExplicitRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ExplicitRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstSimpleExpressionParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final RuleCall cPPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cLastAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLastSimpleExpressionParserRuleCall_2_0 = (RuleCall)cLastAssignment_2.eContents().get(0);
		
		//ExplicitRange:
		//	first=SimpleExpression PP last=SimpleExpression;
		@Override public ParserRule getRule() { return rule; }

		//first=SimpleExpression PP last=SimpleExpression
		public Group getGroup() { return cGroup; }

		//first=SimpleExpression
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }

		//SimpleExpression
		public RuleCall getFirstSimpleExpressionParserRuleCall_0_0() { return cFirstSimpleExpressionParserRuleCall_0_0; }

		//PP
		public RuleCall getPPTerminalRuleCall_1() { return cPPTerminalRuleCall_1; }

		//last=SimpleExpression
		public Assignment getLastAssignment_2() { return cLastAssignment_2; }

		//SimpleExpression
		public RuleCall getLastSimpleExpressionParserRuleCall_2_0() { return cLastSimpleExpressionParserRuleCall_2_0; }
	}

	public class BinaryAddingOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.BinaryAddingOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPLUSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMOINSTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cET_COMTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BinaryAddingOperator:
		//	PLUS
		//	| MOINS
		//	| ET_COM;
		@Override public ParserRule getRule() { return rule; }

		//PLUS | MOINS | ET_COM
		public Alternatives getAlternatives() { return cAlternatives; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0() { return cPLUSTerminalRuleCall_0; }

		//MOINS
		public RuleCall getMOINSTerminalRuleCall_1() { return cMOINSTerminalRuleCall_1; }

		//ET_COM
		public RuleCall getET_COMTerminalRuleCall_2() { return cET_COMTerminalRuleCall_2; }
	}

	public class UnaryAddingOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.UnaryAddingOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPLUSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMOINSTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryAddingOperator:
		//	PLUS
		//	| MOINS;
		@Override public ParserRule getRule() { return rule; }

		//PLUS | MOINS
		public Alternatives getAlternatives() { return cAlternatives; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0() { return cPLUSTerminalRuleCall_0; }

		//MOINS
		public RuleCall getMOINSTerminalRuleCall_1() { return cMOINSTerminalRuleCall_1; }
	}

	public class MultiplyingOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.MultiplyingOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cETOITerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSLASHTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMOD_TerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cREM_TerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//MultiplyingOperator:
		//	ETOI
		//	| SLASH
		//	| MOD_
		//	| REM_;
		@Override public ParserRule getRule() { return rule; }

		//ETOI | SLASH | MOD_ | REM_
		public Alternatives getAlternatives() { return cAlternatives; }

		//ETOI
		public RuleCall getETOITerminalRuleCall_0() { return cETOITerminalRuleCall_0; }

		//SLASH
		public RuleCall getSLASHTerminalRuleCall_1() { return cSLASHTerminalRuleCall_1; }

		//MOD_
		public RuleCall getMOD_TerminalRuleCall_2() { return cMOD_TerminalRuleCall_2; }

		//REM_
		public RuleCall getREM_TerminalRuleCall_3() { return cREM_TerminalRuleCall_3; }
	}

	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDIFFTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINFTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cINFETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSUPTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSUPETerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//RelationalOperator:
		//	EG
		//	| DIFF
		//	| INF
		//	| INFE
		//	| SUP
		//	| SUPE;
		@Override public ParserRule getRule() { return rule; }

		//EG | DIFF | INF | INFE | SUP | SUPE
		public Alternatives getAlternatives() { return cAlternatives; }

		//EG
		public RuleCall getEGTerminalRuleCall_0() { return cEGTerminalRuleCall_0; }

		//DIFF
		public RuleCall getDIFFTerminalRuleCall_1() { return cDIFFTerminalRuleCall_1; }

		//INF
		public RuleCall getINFTerminalRuleCall_2() { return cINFTerminalRuleCall_2; }

		//INFE
		public RuleCall getINFETerminalRuleCall_3() { return cINFETerminalRuleCall_3; }

		//SUP
		public RuleCall getSUPTerminalRuleCall_4() { return cSUPTerminalRuleCall_4; }

		//SUPE
		public RuleCall getSUPETerminalRuleCall_5() { return cSUPETerminalRuleCall_5; }
	}
	
	
	private final CompilationElements pCompilation;
	private final CompilationUnitElements pCompilationUnit;
	private final UnitElements pUnit;
	private final ContextClauseElements pContextClause;
	private final ContextItemElements pContextItem;
	private final WithClauseElements pWithClause;
	private final UseClauseElements pUseClause;
	private final UsePackageClauseElements pUsePackageClause;
	private final UseTypeClauseElements pUseTypeClause;
	private final LibraryUnitDeclarationElements pLibraryUnitDeclaration;
	private final LibraryUnitSpecificationElements pLibraryUnitSpecification;
	private final PackageDeclarationElements pPackageDeclaration;
	private final PackageDefinitionElements pPackageDefinition;
	private final RenamingElements pRenaming;
	private final GenericDeclarationElements pGenericDeclaration;
	private final GenericInstantiationElements pGenericInstantiation;
	private final PackageSpecificationElements pPackageSpecification;
	private final SubprogramBodyElements pSubprogramBody;
	private final DeclarativeBlockElements pDeclarativeBlock;
	private final BasicDeclarativeItemElements pBasicDeclarativeItem;
	private final BasicDeclarationElements pBasicDeclaration;
	private final TaskDeclarationElements pTaskDeclaration;
	private final TypeDeclarationElements pTypeDeclaration;
	private final NewTypeDeclarationElements pNewTypeDeclaration;
	private final FullTypeDeclarationElements pFullTypeDeclaration;
	private final FullDataTypeDeclarationElements pFullDataTypeDeclaration;
	private final IncompleteTypeDeclarationElements pIncompleteTypeDeclaration;
	private final PrivateTypeDeclarationElements pPrivateTypeDeclaration;
	private final PrivateExtensionDeclarationElements pPrivateExtensionDeclaration;
	private final TaskItemElements pTaskItem;
	private final EntryDeclarationElements pEntryDeclaration;
	private final OverridingIndicatorElements pOverridingIndicator;
	private final ProtectedTypeDeclarationElements pProtectedTypeDeclaration;
	private final ProtectedDefinitionElements pProtectedDefinition;
	private final ProtectedElementDeclarationElements pProtectedElementDeclaration;
	private final ProtectedOperationDeclarationElements pProtectedOperationDeclaration;
	private final SubprogramDeclarationElements pSubprogramDeclaration;
	private final SubprogramSpecificationElements pSubprogramSpecification;
	private final ProcedureSpecificationElements pProcedureSpecification;
	private final FunctionSpecificationElements pFunctionSpecification;
	private final HandledSequenceOfStatementsElements pHandledSequenceOfStatements;
	private final ExceptionChoiceElements pExceptionChoice;
	private final ExceptionHandlerElements pExceptionHandler;
	private final DeclarativeItemElements pDeclarativeItem;
	private final BodyElements pBody;
	private final ProperBodyElements pProperBody;
	private final LabelElements pLabel;
	private final SequenceOfStatementsElements pSequenceOfStatements;
	private final LabelisableStatementElements pLabelisableStatement;
	private final StatementElements pStatement;
	private final SimpleStatementElements pSimpleStatement;
	private final CompoundStatementElements pCompoundStatement;
	private final NullStatementElements pNullStatement;
	private final LibrarySpecificationElements pLibrarySpecification;
	private final GenericItemsElements pGenericItems;
	private final GenericItemElements pGenericItem;
	private final GenericFormalParameterDeclarationElements pGenericFormalParameterDeclaration;
	private final FormalObjectDeclarationElements pFormalObjectDeclaration;
	private final FormalTypeDeclarationElements pFormalTypeDeclaration;
	private final FormalTypeDefinitionElements pFormalTypeDefinition;
	private final FormalDiscreteTypeDefinitionElements pFormalDiscreteTypeDefinition;
	private final FormalSignedIntegerTypeDefinitionElements pFormalSignedIntegerTypeDefinition;
	private final FormalModularTypeDefinitionElements pFormalModularTypeDefinition;
	private final FormalFloatingPointDefinitionElements pFormalFloatingPointDefinition;
	private final FormalOrdinaryFixedPointDefinitionElements pFormalOrdinaryFixedPointDefinition;
	private final FormalDecimalFixedPointDefinitionElements pFormalDecimalFixedPointDefinition;
	private final FormalPrivateTypeDefinitionElements pFormalPrivateTypeDefinition;
	private final FormalDerivedTypeDefinitionElements pFormalDerivedTypeDefinition;
	private final FormalSubprogramDeclarationElements pFormalSubprogramDeclaration;
	private final SubprogramDefaultElements pSubprogramDefault;
	private final FormalPackageDeclarationElements pFormalPackageDeclaration;
	private final FormalPackageActualPartElements pFormalPackageActualPart;
	private final FormalPackageAssociationElements pFormalPackageAssociation;
	private final ExceptionDeclarationElements pExceptionDeclaration;
	private final ObjectDeclarationElements pObjectDeclaration;
	private final DataInstanceDeclarationElements pDataInstanceDeclaration;
	private final SingleProtectedDeclarationElements pSingleProtectedDeclaration;
	private final PragmaElements pPragma;
	private final PragmaArgumentAssociationElements pPragmaArgumentAssociation;
	private final SubtypeDeclarationElements pSubtypeDeclaration;
	private final NumberDeclarationElements pNumberDeclaration;
	private final AssignmentStatementElements pAssignmentStatement;
	private final IfStatementElements pIfStatement;
	private final CaseStatementElements pCaseStatement;
	private final CaseStatementAlternativeElements pCaseStatementAlternative;
	private final LoopStatementElements pLoopStatement;
	private final IterationSchemeElements pIterationScheme;
	private final LoopParameterSpecificationElements pLoopParameterSpecification;
	private final BlockStatementElements pBlockStatement;
	private final ExitStatementElements pExitStatement;
	private final GotoStatementElements pGotoStatement;
	private final ProcedureOrEntryCallStatementElements pProcedureOrEntryCallStatement;
	private final SimpleReturnStatementElements pSimpleReturnStatement;
	private final ExtendedReturnStatementElements pExtendedReturnStatement;
	private final ReturnSubtypeIndicationElements pReturnSubtypeIndication;
	private final PackageBodyElements pPackageBody;
	private final TaskDefinitionElements pTaskDefinition;
	private final TaskBodyElements pTaskBody;
	private final ProtectedBodyElements pProtectedBody;
	private final ProtectedOperationItemElements pProtectedOperationItem;
	private final AcceptStatementElements pAcceptStatement;
	private final EntryIndexElements pEntryIndex;
	private final EntryBodyElements pEntryBody;
	private final EntryBodyFormalPartElements pEntryBodyFormalPart;
	private final EntryBarrierElements pEntryBarrier;
	private final EntryIndexSpecificationElements pEntryIndexSpecification;
	private final RequeueStatementElements pRequeueStatement;
	private final DelayStatementElements pDelayStatement;
	private final SelectStatementElements pSelectStatement;
	private final SelectiveAcceptElements pSelectiveAccept;
	private final GuardedAlternativeElements pGuardedAlternative;
	private final GuardElements pGuard;
	private final SelectAlternativeElements pSelectAlternative;
	private final AcceptAlternativeElements pAcceptAlternative;
	private final DelayAlternativeElements pDelayAlternative;
	private final TimedEntryCallElements pTimedEntryCall;
	private final EntryCallAlternativeElements pEntryCallAlternative;
	private final ConditionalEntryCallElements pConditionalEntryCall;
	private final AsynchronousSelectElements pAsynchronousSelect;
	private final TriggeringAlternativeElements pTriggeringAlternative;
	private final TriggeringStatementElements pTriggeringStatement;
	private final AbortablePartElements pAbortablePart;
	private final AbortStatementElements pAbortStatement;
	private final TaskNamesElements pTaskNames;
	private final BodyStubElements pBodyStub;
	private final PackageBodyStubElements pPackageBodyStub;
	private final TaskBodyStubElements pTaskBodyStub;
	private final ProtectedBodyStubElements pProtectedBodyStub;
	private final SeparateSubunitElements pSeparateSubunit;
	private final RaiseStatementElements pRaiseStatement;
	private final GenericActualPartElements pGenericActualPart;
	private final GenericAssociationElements pGenericAssociation;
	private final ExplicitGenericActualParameterElements pExplicitGenericActualParameter;
	private final TypeDefinitionElements pTypeDefinition;
	private final DiscriminantPartElements pDiscriminantPart;
	private final UnknownDiscriminantPartElements pUnknownDiscriminantPart;
	private final KnownDiscriminantPartElements pKnownDiscriminantPart;
	private final DiscriminantSpecificationElements pDiscriminantSpecification;
	private final InterfaceListElements pInterfaceList;
	private final InterfaceTypeDefinitionElements pInterfaceTypeDefinition;
	private final DerivedTypeDefinitionElements pDerivedTypeDefinition;
	private final RecordExtensionPartElements pRecordExtensionPart;
	private final AccessTypeDefinitionElements pAccessTypeDefinition;
	private final AccessSpecificationElements pAccessSpecification;
	private final AccessToSubprogramDefinitionElements pAccessToSubprogramDefinition;
	private final AccessToDataDefinitionElements pAccessToDataDefinition;
	private final GeneralAccessModifierElements pGeneralAccessModifier;
	private final ArrayTypeDefinitionElements pArrayTypeDefinition;
	private final ArrayIndexesElements pArrayIndexes;
	private final UnconstrainedIndexesElements pUnconstrainedIndexes;
	private final ConstrainedIndexesElements pConstrainedIndexes;
	private final DiscreteSubtypeDefinitionElements pDiscreteSubtypeDefinition;
	private final ComponentDefinitionElements pComponentDefinition;
	private final AnonymousAccessDefinitionElements pAnonymousAccessDefinition;
	private final NotNullAccessDefinitionElements pNotNullAccessDefinition;
	private final AccessToDataInstanceElements pAccessToDataInstance;
	private final ParameterAndResultProfileElements pParameterAndResultProfile;
	private final FormalPartElements pFormalPart;
	private final ParameterSpecificationElements pParameterSpecification;
	private final ModeElements pMode;
	private final IntegerTypeDefinitionElements pIntegerTypeDefinition;
	private final SignedIntegerTypeDefinitionElements pSignedIntegerTypeDefinition;
	private final ModularTypeDefinitionElements pModularTypeDefinition;
	private final EnumerationTypeDefinitionElements pEnumerationTypeDefinition;
	private final EnumerationLiteralSpecificationElements pEnumerationLiteralSpecification;
	private final RecordTypeDefinitionElements pRecordTypeDefinition;
	private final RecordDefinitionElements pRecordDefinition;
	private final ComponentListElements pComponentList;
	private final OptVariantPartElements pOptVariantPart;
	private final ComponentItemElements pComponentItem;
	private final ComponentDeclarationElements pComponentDeclaration;
	private final DefiningIdentifierListElements pDefiningIdentifierList;
	private final AspectClauseElements pAspectClause;
	private final ModClauseElements pModClause;
	private final ComponentClauseElements pComponentClause;
	private final VariantPartElements pVariantPart;
	private final VariantElements pVariant;
	private final DiscreteChoiceListElements pDiscreteChoiceList;
	private final RealTypeDefinitionElements pRealTypeDefinition;
	private final FloatingPointDefinitionElements pFloatingPointDefinition;
	private final RealRangeSpecificationElements pRealRangeSpecification;
	private final FixedPointDefinitionElements pFixedPointDefinition;
	private final ExpressionElements pExpression;
	private final BooleanOperatorElements pBooleanOperator;
	private final RelationElements pRelation;
	private final MembershipElements pMembership;
	private final IntervalElements pInterval;
	private final SimpleExpressionElements pSimpleExpression;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final PrimaryElements pPrimary;
	private final NumericLiteralElements pNumericLiteral;
	private final NullElements pNull;
	private final StringLiteralElements pStringLiteral;
	private final QualifiedNameElements pQualifiedName;
	private final ParenthesizedExpressionElements pParenthesizedExpression;
	private final QualifierElements pQualifier;
	private final AllocatorElements pAllocator;
	private final SubtypeIndicationElements pSubtypeIndication;
	private final OptNullExclusionElements pOptNullExclusion;
	private final NullExclusionElements pNullExclusion;
	private final OptConstraintElements pOptConstraint;
	private final ScalarConstraintElements pScalarConstraint;
	private final DigitsConstraintElements pDigitsConstraint;
	private final DeltaConstraintElements pDeltaConstraint;
	private final RangeConstraintElements pRangeConstraint;
	private final CompositeConstraintElements pCompositeConstraint;
	private final DiscriminantConstraintElements pDiscriminantConstraint;
	private final IndexConstraintElements pIndexConstraint;
	private final DiscriminantAssociationElements pDiscriminantAssociation;
	private final DiscriminantSelectorsElements pDiscriminantSelectors;
	private final DiscreteRangeElements pDiscreteRange;
	private final ComponentChoiceListElements pComponentChoiceList;
	private final DiscreteChoiceElements pDiscreteChoice;
	private final AggregateElements pAggregate;
	private final RecordAggregateElements pRecordAggregate;
	private final RecordComponentAssociationListElements pRecordComponentAssociationList;
	private final RecordComponentAssociationElements pRecordComponentAssociation;
	private final InitializedComponentsElements pInitializedComponents;
	private final UninitializedComponentsElements pUninitializedComponents;
	private final ExtensionAggregateElements pExtensionAggregate;
	private final ArrayAggregateElements pArrayAggregate;
	private final PositionalArrayAggregateElements pPositionalArrayAggregate;
	private final NamedArrayAggregateElements pNamedArrayAggregate;
	private final ArrayComponentAssociationElements pArrayComponentAssociation;
	private final AncestorPartElements pAncestorPart;
	private final PATHIDENTIFIERElements pPATHIDENTIFIER;
	private final PATHNAMEElements pPATHNAME;
	private final DIRECT_NAMEElements pDIRECT_NAME;
	private final NameElements pName;
	private final SelectorNameElements pSelectorName;
	private final PrimaryNameElements pPrimaryName;
	private final ParameterAssociationElements pParameterAssociation;
	private final ParameterEffectiveValueElements pParameterEffectiveValue;
	private final AttributeDesignatorElements pAttributeDesignator;
	private final RangeElements pRange;
	private final EntityRangeElements pEntityRange;
	private final ExplicitRangeElements pExplicitRange;
	private final BinaryAddingOperatorElements pBinaryAddingOperator;
	private final UnaryAddingOperatorElements pUnaryAddingOperator;
	private final MultiplyingOperatorElements pMultiplyingOperator;
	private final RelationalOperatorElements pRelationalOperator;
	private final TerminalRule tABORT_;
	private final TerminalRule tABS_;
	private final TerminalRule tABSTRACT_;
	private final TerminalRule tACCEPT_;
	private final TerminalRule tACCESS_;
	private final TerminalRule tALIASED_;
	private final TerminalRule tALL_;
	private final TerminalRule tAND_;
	private final TerminalRule tARRAY_;
	private final TerminalRule tAT_;
	private final TerminalRule tBEGIN_;
	private final TerminalRule tBODY_;
	private final TerminalRule tCASE_;
	private final TerminalRule tCONSTANT_;
	private final TerminalRule tDECLARE_;
	private final TerminalRule tDELAY_;
	private final TerminalRule tDELTA_;
	private final TerminalRule tDIGITS_;
	private final TerminalRule tDO_;
	private final TerminalRule tELSE_;
	private final TerminalRule tELSIF_;
	private final TerminalRule tEND_;
	private final TerminalRule tENTRY_;
	private final TerminalRule tEXCEPTION_;
	private final TerminalRule tEXIT_;
	private final TerminalRule tFOR_;
	private final TerminalRule tFUNCTION_;
	private final TerminalRule tGENERIC_;
	private final TerminalRule tGOTO_;
	private final TerminalRule tIF_;
	private final TerminalRule tIN_;
	private final TerminalRule tINTERFACE_;
	private final TerminalRule tIS_;
	private final TerminalRule tLIMITED_;
	private final TerminalRule tLOOP_;
	private final TerminalRule tMOD_;
	private final TerminalRule tNEW_;
	private final TerminalRule tNOT_;
	private final TerminalRule tNULL_;
	private final TerminalRule tOF_;
	private final TerminalRule tOR_;
	private final TerminalRule tOTHERS_;
	private final TerminalRule tOUT_;
	private final TerminalRule tOVERRIDING_;
	private final TerminalRule tPACKAGE_;
	private final TerminalRule tPRAGMA_;
	private final TerminalRule tPRIVATE_;
	private final TerminalRule tPROCEDURE_;
	private final TerminalRule tPROTECTED_;
	private final TerminalRule tRAISE_;
	private final TerminalRule tRANGE_;
	private final TerminalRule tRECORD_;
	private final TerminalRule tREM_;
	private final TerminalRule tRENAMES_;
	private final TerminalRule tREQUEUE_;
	private final TerminalRule tRETURN_;
	private final TerminalRule tREVERSE_;
	private final TerminalRule tSELECT_;
	private final TerminalRule tSEPARATE_;
	private final TerminalRule tSUBTYPE_;
	private final TerminalRule tSYNCHRONIZED_;
	private final TerminalRule tTAGGED_;
	private final TerminalRule tTASK_;
	private final TerminalRule tTERMINATE_;
	private final TerminalRule tTHEN_;
	private final TerminalRule tTYPE_;
	private final TerminalRule tUNTIL_;
	private final TerminalRule tUSE_;
	private final TerminalRule tWHEN_;
	private final TerminalRule tWHILE_;
	private final TerminalRule tWITH_;
	private final TerminalRule tXOR_;
	private final TerminalRule tNUMERIC_LITERAL;
	private final TerminalRule tDECIMAL_LITERAL;
	private final TerminalRule tNUMERAL;
	private final TerminalRule tWS;
	private final TerminalRule tIDENTIFIER;
	private final TerminalRule tIDENTIFIER_START;
	private final TerminalRule tLETTER_UPPERCASE;
	private final TerminalRule tLETTER_LOWERCASE;
	private final TerminalRule tLETTER_TITLECASE;
	private final TerminalRule tLETTER_MODIFIER;
	private final TerminalRule tLETTER_OTHER;
	private final TerminalRule tNUMBER_LETTER;
	private final TerminalRule tIDENTIFIER_EXTEND;
	private final TerminalRule tNUMBER_DECIMAL;
	private final TerminalRule tMARKSPACING_COMBINING;
	private final TerminalRule tOTHER_FORMAT;
	private final TerminalRule tMARKNON_SPACING;
	private final TerminalRule tPUNCTUATION_CONNECTOR;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tDIGIT;
	private final TerminalRule tBASED_LITERAL;
	private final TerminalRule tBASE;
	private final TerminalRule tBASED_NUMERAL;
	private final TerminalRule tEXTENDED_DIGIT;
	private final TerminalRule tCHARACTER_LITERAL;
	private final TerminalRule tGRAPHIC_CHARACTER;
	private final TerminalRule tOPERATOR_SYMBOL;
	private final TerminalRule tSTRING_LITERAL;
	private final TerminalRule tSTRING_ELEMENT;
	private final TerminalRule tNONQUOTATION_MARKGRAPHIC_CHARACTER;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tNONEND_OFLINE_CHARACTER;
	private final TerminalRule tPV;
	private final TerminalRule tDP;
	private final TerminalRule tP;
	private final TerminalRule tV;
	private final TerminalRule tPG;
	private final TerminalRule tPD;
	private final TerminalRule tET_COM;
	private final TerminalRule tPLUS;
	private final TerminalRule tMOINS;
	private final TerminalRule tETOI;
	private final TerminalRule tETOI2;
	private final TerminalRule tSLASH;
	private final TerminalRule tQUOTE;
	private final TerminalRule tFLECHE;
	private final TerminalRule tBV;
	private final TerminalRule tDPE;
	private final TerminalRule tPP;
	private final TerminalRule tBOIT;
	private final TerminalRule tEG;
	private final TerminalRule tDIFF;
	private final TerminalRule tINF;
	private final TerminalRule tINFE;
	private final TerminalRule tSUP;
	private final TerminalRule tSUPE;
	private final TerminalRule tCHG;
	private final TerminalRule tCHD;
	
	private final Grammar grammar;

	@Inject
	public AdbGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pCompilation = new CompilationElements();
		this.pCompilationUnit = new CompilationUnitElements();
		this.pUnit = new UnitElements();
		this.pContextClause = new ContextClauseElements();
		this.pContextItem = new ContextItemElements();
		this.pWithClause = new WithClauseElements();
		this.pUseClause = new UseClauseElements();
		this.pUsePackageClause = new UsePackageClauseElements();
		this.pUseTypeClause = new UseTypeClauseElements();
		this.pLibraryUnitDeclaration = new LibraryUnitDeclarationElements();
		this.pLibraryUnitSpecification = new LibraryUnitSpecificationElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pPackageDefinition = new PackageDefinitionElements();
		this.pRenaming = new RenamingElements();
		this.pGenericDeclaration = new GenericDeclarationElements();
		this.pGenericInstantiation = new GenericInstantiationElements();
		this.pPackageSpecification = new PackageSpecificationElements();
		this.pSubprogramBody = new SubprogramBodyElements();
		this.pDeclarativeBlock = new DeclarativeBlockElements();
		this.pBasicDeclarativeItem = new BasicDeclarativeItemElements();
		this.pBasicDeclaration = new BasicDeclarationElements();
		this.pTaskDeclaration = new TaskDeclarationElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.pNewTypeDeclaration = new NewTypeDeclarationElements();
		this.pFullTypeDeclaration = new FullTypeDeclarationElements();
		this.pFullDataTypeDeclaration = new FullDataTypeDeclarationElements();
		this.pIncompleteTypeDeclaration = new IncompleteTypeDeclarationElements();
		this.pPrivateTypeDeclaration = new PrivateTypeDeclarationElements();
		this.pPrivateExtensionDeclaration = new PrivateExtensionDeclarationElements();
		this.pTaskItem = new TaskItemElements();
		this.pEntryDeclaration = new EntryDeclarationElements();
		this.pOverridingIndicator = new OverridingIndicatorElements();
		this.pProtectedTypeDeclaration = new ProtectedTypeDeclarationElements();
		this.pProtectedDefinition = new ProtectedDefinitionElements();
		this.pProtectedElementDeclaration = new ProtectedElementDeclarationElements();
		this.pProtectedOperationDeclaration = new ProtectedOperationDeclarationElements();
		this.pSubprogramDeclaration = new SubprogramDeclarationElements();
		this.pSubprogramSpecification = new SubprogramSpecificationElements();
		this.pProcedureSpecification = new ProcedureSpecificationElements();
		this.pFunctionSpecification = new FunctionSpecificationElements();
		this.pHandledSequenceOfStatements = new HandledSequenceOfStatementsElements();
		this.pExceptionChoice = new ExceptionChoiceElements();
		this.pExceptionHandler = new ExceptionHandlerElements();
		this.pDeclarativeItem = new DeclarativeItemElements();
		this.pBody = new BodyElements();
		this.pProperBody = new ProperBodyElements();
		this.pLabel = new LabelElements();
		this.pSequenceOfStatements = new SequenceOfStatementsElements();
		this.pLabelisableStatement = new LabelisableStatementElements();
		this.pStatement = new StatementElements();
		this.pSimpleStatement = new SimpleStatementElements();
		this.pCompoundStatement = new CompoundStatementElements();
		this.pNullStatement = new NullStatementElements();
		this.pLibrarySpecification = new LibrarySpecificationElements();
		this.pGenericItems = new GenericItemsElements();
		this.pGenericItem = new GenericItemElements();
		this.pGenericFormalParameterDeclaration = new GenericFormalParameterDeclarationElements();
		this.pFormalObjectDeclaration = new FormalObjectDeclarationElements();
		this.pFormalTypeDeclaration = new FormalTypeDeclarationElements();
		this.pFormalTypeDefinition = new FormalTypeDefinitionElements();
		this.pFormalDiscreteTypeDefinition = new FormalDiscreteTypeDefinitionElements();
		this.pFormalSignedIntegerTypeDefinition = new FormalSignedIntegerTypeDefinitionElements();
		this.pFormalModularTypeDefinition = new FormalModularTypeDefinitionElements();
		this.pFormalFloatingPointDefinition = new FormalFloatingPointDefinitionElements();
		this.pFormalOrdinaryFixedPointDefinition = new FormalOrdinaryFixedPointDefinitionElements();
		this.pFormalDecimalFixedPointDefinition = new FormalDecimalFixedPointDefinitionElements();
		this.pFormalPrivateTypeDefinition = new FormalPrivateTypeDefinitionElements();
		this.pFormalDerivedTypeDefinition = new FormalDerivedTypeDefinitionElements();
		this.pFormalSubprogramDeclaration = new FormalSubprogramDeclarationElements();
		this.pSubprogramDefault = new SubprogramDefaultElements();
		this.pFormalPackageDeclaration = new FormalPackageDeclarationElements();
		this.pFormalPackageActualPart = new FormalPackageActualPartElements();
		this.pFormalPackageAssociation = new FormalPackageAssociationElements();
		this.pExceptionDeclaration = new ExceptionDeclarationElements();
		this.pObjectDeclaration = new ObjectDeclarationElements();
		this.pDataInstanceDeclaration = new DataInstanceDeclarationElements();
		this.pSingleProtectedDeclaration = new SingleProtectedDeclarationElements();
		this.pPragma = new PragmaElements();
		this.pPragmaArgumentAssociation = new PragmaArgumentAssociationElements();
		this.pSubtypeDeclaration = new SubtypeDeclarationElements();
		this.pNumberDeclaration = new NumberDeclarationElements();
		this.pAssignmentStatement = new AssignmentStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pCaseStatement = new CaseStatementElements();
		this.pCaseStatementAlternative = new CaseStatementAlternativeElements();
		this.pLoopStatement = new LoopStatementElements();
		this.pIterationScheme = new IterationSchemeElements();
		this.pLoopParameterSpecification = new LoopParameterSpecificationElements();
		this.pBlockStatement = new BlockStatementElements();
		this.pExitStatement = new ExitStatementElements();
		this.pGotoStatement = new GotoStatementElements();
		this.pProcedureOrEntryCallStatement = new ProcedureOrEntryCallStatementElements();
		this.pSimpleReturnStatement = new SimpleReturnStatementElements();
		this.pExtendedReturnStatement = new ExtendedReturnStatementElements();
		this.pReturnSubtypeIndication = new ReturnSubtypeIndicationElements();
		this.pPackageBody = new PackageBodyElements();
		this.pTaskDefinition = new TaskDefinitionElements();
		this.pTaskBody = new TaskBodyElements();
		this.pProtectedBody = new ProtectedBodyElements();
		this.pProtectedOperationItem = new ProtectedOperationItemElements();
		this.pAcceptStatement = new AcceptStatementElements();
		this.pEntryIndex = new EntryIndexElements();
		this.pEntryBody = new EntryBodyElements();
		this.pEntryBodyFormalPart = new EntryBodyFormalPartElements();
		this.pEntryBarrier = new EntryBarrierElements();
		this.pEntryIndexSpecification = new EntryIndexSpecificationElements();
		this.pRequeueStatement = new RequeueStatementElements();
		this.pDelayStatement = new DelayStatementElements();
		this.pSelectStatement = new SelectStatementElements();
		this.pSelectiveAccept = new SelectiveAcceptElements();
		this.pGuardedAlternative = new GuardedAlternativeElements();
		this.pGuard = new GuardElements();
		this.pSelectAlternative = new SelectAlternativeElements();
		this.pAcceptAlternative = new AcceptAlternativeElements();
		this.pDelayAlternative = new DelayAlternativeElements();
		this.pTimedEntryCall = new TimedEntryCallElements();
		this.pEntryCallAlternative = new EntryCallAlternativeElements();
		this.pConditionalEntryCall = new ConditionalEntryCallElements();
		this.pAsynchronousSelect = new AsynchronousSelectElements();
		this.pTriggeringAlternative = new TriggeringAlternativeElements();
		this.pTriggeringStatement = new TriggeringStatementElements();
		this.pAbortablePart = new AbortablePartElements();
		this.pAbortStatement = new AbortStatementElements();
		this.pTaskNames = new TaskNamesElements();
		this.pBodyStub = new BodyStubElements();
		this.pPackageBodyStub = new PackageBodyStubElements();
		this.pTaskBodyStub = new TaskBodyStubElements();
		this.pProtectedBodyStub = new ProtectedBodyStubElements();
		this.pSeparateSubunit = new SeparateSubunitElements();
		this.pRaiseStatement = new RaiseStatementElements();
		this.pGenericActualPart = new GenericActualPartElements();
		this.pGenericAssociation = new GenericAssociationElements();
		this.pExplicitGenericActualParameter = new ExplicitGenericActualParameterElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pDiscriminantPart = new DiscriminantPartElements();
		this.pUnknownDiscriminantPart = new UnknownDiscriminantPartElements();
		this.pKnownDiscriminantPart = new KnownDiscriminantPartElements();
		this.pDiscriminantSpecification = new DiscriminantSpecificationElements();
		this.pInterfaceList = new InterfaceListElements();
		this.pInterfaceTypeDefinition = new InterfaceTypeDefinitionElements();
		this.pDerivedTypeDefinition = new DerivedTypeDefinitionElements();
		this.pRecordExtensionPart = new RecordExtensionPartElements();
		this.pAccessTypeDefinition = new AccessTypeDefinitionElements();
		this.pAccessSpecification = new AccessSpecificationElements();
		this.pAccessToSubprogramDefinition = new AccessToSubprogramDefinitionElements();
		this.pAccessToDataDefinition = new AccessToDataDefinitionElements();
		this.pGeneralAccessModifier = new GeneralAccessModifierElements();
		this.pArrayTypeDefinition = new ArrayTypeDefinitionElements();
		this.pArrayIndexes = new ArrayIndexesElements();
		this.pUnconstrainedIndexes = new UnconstrainedIndexesElements();
		this.pConstrainedIndexes = new ConstrainedIndexesElements();
		this.pDiscreteSubtypeDefinition = new DiscreteSubtypeDefinitionElements();
		this.pComponentDefinition = new ComponentDefinitionElements();
		this.pAnonymousAccessDefinition = new AnonymousAccessDefinitionElements();
		this.pNotNullAccessDefinition = new NotNullAccessDefinitionElements();
		this.pAccessToDataInstance = new AccessToDataInstanceElements();
		this.pParameterAndResultProfile = new ParameterAndResultProfileElements();
		this.pFormalPart = new FormalPartElements();
		this.pParameterSpecification = new ParameterSpecificationElements();
		this.pMode = new ModeElements();
		this.pIntegerTypeDefinition = new IntegerTypeDefinitionElements();
		this.pSignedIntegerTypeDefinition = new SignedIntegerTypeDefinitionElements();
		this.pModularTypeDefinition = new ModularTypeDefinitionElements();
		this.pEnumerationTypeDefinition = new EnumerationTypeDefinitionElements();
		this.pEnumerationLiteralSpecification = new EnumerationLiteralSpecificationElements();
		this.pRecordTypeDefinition = new RecordTypeDefinitionElements();
		this.pRecordDefinition = new RecordDefinitionElements();
		this.pComponentList = new ComponentListElements();
		this.pOptVariantPart = new OptVariantPartElements();
		this.pComponentItem = new ComponentItemElements();
		this.pComponentDeclaration = new ComponentDeclarationElements();
		this.pDefiningIdentifierList = new DefiningIdentifierListElements();
		this.pAspectClause = new AspectClauseElements();
		this.pModClause = new ModClauseElements();
		this.pComponentClause = new ComponentClauseElements();
		this.pVariantPart = new VariantPartElements();
		this.pVariant = new VariantElements();
		this.pDiscreteChoiceList = new DiscreteChoiceListElements();
		this.pRealTypeDefinition = new RealTypeDefinitionElements();
		this.pFloatingPointDefinition = new FloatingPointDefinitionElements();
		this.pRealRangeSpecification = new RealRangeSpecificationElements();
		this.pFixedPointDefinition = new FixedPointDefinitionElements();
		this.pExpression = new ExpressionElements();
		this.pBooleanOperator = new BooleanOperatorElements();
		this.pRelation = new RelationElements();
		this.pMembership = new MembershipElements();
		this.pInterval = new IntervalElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pPrimary = new PrimaryElements();
		this.pNumericLiteral = new NumericLiteralElements();
		this.pNull = new NullElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pParenthesizedExpression = new ParenthesizedExpressionElements();
		this.pQualifier = new QualifierElements();
		this.pAllocator = new AllocatorElements();
		this.pSubtypeIndication = new SubtypeIndicationElements();
		this.pOptNullExclusion = new OptNullExclusionElements();
		this.pNullExclusion = new NullExclusionElements();
		this.pOptConstraint = new OptConstraintElements();
		this.pScalarConstraint = new ScalarConstraintElements();
		this.pDigitsConstraint = new DigitsConstraintElements();
		this.pDeltaConstraint = new DeltaConstraintElements();
		this.pRangeConstraint = new RangeConstraintElements();
		this.pCompositeConstraint = new CompositeConstraintElements();
		this.pDiscriminantConstraint = new DiscriminantConstraintElements();
		this.pIndexConstraint = new IndexConstraintElements();
		this.pDiscriminantAssociation = new DiscriminantAssociationElements();
		this.pDiscriminantSelectors = new DiscriminantSelectorsElements();
		this.pDiscreteRange = new DiscreteRangeElements();
		this.pComponentChoiceList = new ComponentChoiceListElements();
		this.pDiscreteChoice = new DiscreteChoiceElements();
		this.pAggregate = new AggregateElements();
		this.pRecordAggregate = new RecordAggregateElements();
		this.pRecordComponentAssociationList = new RecordComponentAssociationListElements();
		this.pRecordComponentAssociation = new RecordComponentAssociationElements();
		this.pInitializedComponents = new InitializedComponentsElements();
		this.pUninitializedComponents = new UninitializedComponentsElements();
		this.pExtensionAggregate = new ExtensionAggregateElements();
		this.pArrayAggregate = new ArrayAggregateElements();
		this.pPositionalArrayAggregate = new PositionalArrayAggregateElements();
		this.pNamedArrayAggregate = new NamedArrayAggregateElements();
		this.pArrayComponentAssociation = new ArrayComponentAssociationElements();
		this.pAncestorPart = new AncestorPartElements();
		this.pPATHIDENTIFIER = new PATHIDENTIFIERElements();
		this.pPATHNAME = new PATHNAMEElements();
		this.pDIRECT_NAME = new DIRECT_NAMEElements();
		this.pName = new NameElements();
		this.pSelectorName = new SelectorNameElements();
		this.pPrimaryName = new PrimaryNameElements();
		this.pParameterAssociation = new ParameterAssociationElements();
		this.pParameterEffectiveValue = new ParameterEffectiveValueElements();
		this.pAttributeDesignator = new AttributeDesignatorElements();
		this.pRange = new RangeElements();
		this.pEntityRange = new EntityRangeElements();
		this.pExplicitRange = new ExplicitRangeElements();
		this.pBinaryAddingOperator = new BinaryAddingOperatorElements();
		this.pUnaryAddingOperator = new UnaryAddingOperatorElements();
		this.pMultiplyingOperator = new MultiplyingOperatorElements();
		this.pRelationalOperator = new RelationalOperatorElements();
		this.tABORT_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ABORT_");
		this.tABS_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ABS_");
		this.tABSTRACT_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ABSTRACT_");
		this.tACCEPT_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ACCEPT_");
		this.tACCESS_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ACCESS_");
		this.tALIASED_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ALIASED_");
		this.tALL_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ALL_");
		this.tAND_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AND_");
		this.tARRAY_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ARRAY_");
		this.tAT_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.AT_");
		this.tBEGIN_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.BEGIN_");
		this.tBODY_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.BODY_");
		this.tCASE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.CASE_");
		this.tCONSTANT_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.CONSTANT_");
		this.tDECLARE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DECLARE_");
		this.tDELAY_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DELAY_");
		this.tDELTA_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DELTA_");
		this.tDIGITS_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DIGITS_");
		this.tDO_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DO_");
		this.tELSE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ELSE_");
		this.tELSIF_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ELSIF_");
		this.tEND_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.END_");
		this.tENTRY_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ENTRY_");
		this.tEXCEPTION_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.EXCEPTION_");
		this.tEXIT_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.EXIT_");
		this.tFOR_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FOR_");
		this.tFUNCTION_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FUNCTION_");
		this.tGENERIC_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.GENERIC_");
		this.tGOTO_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.GOTO_");
		this.tIF_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.IF_");
		this.tIN_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.IN_");
		this.tINTERFACE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.INTERFACE_");
		this.tIS_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.IS_");
		this.tLIMITED_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.LIMITED_");
		this.tLOOP_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.LOOP_");
		this.tMOD_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.MOD_");
		this.tNEW_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NEW_");
		this.tNOT_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NOT_");
		this.tNULL_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NULL_");
		this.tOF_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.OF_");
		this.tOR_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.OR_");
		this.tOTHERS_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.OTHERS_");
		this.tOUT_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.OUT_");
		this.tOVERRIDING_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.OVERRIDING_");
		this.tPACKAGE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PACKAGE_");
		this.tPRAGMA_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PRAGMA_");
		this.tPRIVATE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PRIVATE_");
		this.tPROCEDURE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PROCEDURE_");
		this.tPROTECTED_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PROTECTED_");
		this.tRAISE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RAISE_");
		this.tRANGE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RANGE_");
		this.tRECORD_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RECORD_");
		this.tREM_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.REM_");
		this.tRENAMES_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RENAMES_");
		this.tREQUEUE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.REQUEUE_");
		this.tRETURN_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.RETURN_");
		this.tREVERSE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.REVERSE_");
		this.tSELECT_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SELECT_");
		this.tSEPARATE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SEPARATE_");
		this.tSUBTYPE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SUBTYPE_");
		this.tSYNCHRONIZED_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SYNCHRONIZED_");
		this.tTAGGED_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.TAGGED_");
		this.tTASK_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.TASK_");
		this.tTERMINATE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.TERMINATE_");
		this.tTHEN_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.THEN_");
		this.tTYPE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.TYPE_");
		this.tUNTIL_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.UNTIL_");
		this.tUSE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.USE_");
		this.tWHEN_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.WHEN_");
		this.tWHILE_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.WHILE_");
		this.tWITH_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.WITH_");
		this.tXOR_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.XOR_");
		this.tNUMERIC_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NUMERIC_LITERAL");
		this.tDECIMAL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DECIMAL_LITERAL");
		this.tNUMERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NUMERAL");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.WS");
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.IDENTIFIER");
		this.tIDENTIFIER_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.IDENTIFIER_START");
		this.tLETTER_UPPERCASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.LETTER_UPPERCASE");
		this.tLETTER_LOWERCASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.LETTER_LOWERCASE");
		this.tLETTER_TITLECASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.LETTER_TITLECASE");
		this.tLETTER_MODIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.LETTER_MODIFIER");
		this.tLETTER_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.LETTER_OTHER");
		this.tNUMBER_LETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NUMBER_LETTER");
		this.tIDENTIFIER_EXTEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.IDENTIFIER_EXTEND");
		this.tNUMBER_DECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NUMBER_DECIMAL");
		this.tMARKSPACING_COMBINING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.MARKSPACING_COMBINING");
		this.tOTHER_FORMAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.OTHER_FORMAT");
		this.tMARKNON_SPACING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.MARKNON_SPACING");
		this.tPUNCTUATION_CONNECTOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PUNCTUATION_CONNECTOR");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.EXPONENT");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DIGIT");
		this.tBASED_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.BASED_LITERAL");
		this.tBASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.BASE");
		this.tBASED_NUMERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.BASED_NUMERAL");
		this.tEXTENDED_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.EXTENDED_DIGIT");
		this.tCHARACTER_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.CHARACTER_LITERAL");
		this.tGRAPHIC_CHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.GRAPHIC_CHARACTER");
		this.tOPERATOR_SYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.OPERATOR_SYMBOL");
		this.tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.STRING_LITERAL");
		this.tSTRING_ELEMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.STRING_ELEMENT");
		this.tNONQUOTATION_MARKGRAPHIC_CHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NONQUOTATION_MARKGRAPHIC_CHARACTER");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SL_COMMENT");
		this.tNONEND_OFLINE_CHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.NONEND_OFLINE_CHARACTER");
		this.tPV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PV");
		this.tDP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DP");
		this.tP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.P");
		this.tV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.V");
		this.tPG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PG");
		this.tPD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PD");
		this.tET_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ET_COM");
		this.tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PLUS");
		this.tMOINS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.MOINS");
		this.tETOI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ETOI");
		this.tETOI2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.ETOI2");
		this.tSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SLASH");
		this.tQUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.QUOTE");
		this.tFLECHE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.FLECHE");
		this.tBV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.BV");
		this.tDPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DPE");
		this.tPP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.PP");
		this.tBOIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.BOIT");
		this.tEG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.EG");
		this.tDIFF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.DIFF");
		this.tINF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.INF");
		this.tINFE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.INFE");
		this.tSUP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SUP");
		this.tSUPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.SUPE");
		this.tCHG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.CHG");
		this.tCHD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ada2005.Adb.CHD");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.ada2005.Adb".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Compilation:
	//	compilationUnits+=CompilationUnit*;
	public CompilationElements getCompilationAccess() {
		return pCompilation;
	}
	
	public ParserRule getCompilationRule() {
		return getCompilationAccess().getRule();
	}

	//CompilationUnit:
	//	contextClause=ContextClause unit=Unit PV (=> pragmas+=Pragma PV)*;
	public CompilationUnitElements getCompilationUnitAccess() {
		return pCompilationUnit;
	}
	
	public ParserRule getCompilationUnitRule() {
		return getCompilationUnitAccess().getRule();
	}

	//Unit:
	//	=> SubprogramBody
	//	| => LibraryUnitDeclaration // TODO: Cutting Subunit, Package_body alternative for ads
	//	| PackageBody
	//	| SeparateSubunit // TODO: Cutting Library_unit_declaration for adb
	//;
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}

	//// Context clause
	//ContextClause:
	//	{ContextClause} (contextItems+=ContextItem PV)*;
	public ContextClauseElements getContextClauseAccess() {
		return pContextClause;
	}
	
	public ParserRule getContextClauseRule() {
		return getContextClauseAccess().getRule();
	}

	//ContextItem:
	//	WithClause
	//	| UseClause
	//	| Pragma;
	public ContextItemElements getContextItemAccess() {
		return pContextItem;
	}
	
	public ParserRule getContextItemRule() {
		return getContextItemAccess().getRule();
	}

	//WithClause:
	//	limited?=LIMITED_? private?=PRIVATE_? WITH_ importURI+=[LibraryUnitDeclaration|PATHIDENTIFIER] (V
	//	importURI+=[LibraryUnitDeclaration|PATHIDENTIFIER])*;
	public WithClauseElements getWithClauseAccess() {
		return pWithClause;
	}
	
	public ParserRule getWithClauseRule() {
		return getWithClauseAccess().getRule();
	}

	//// TODO: check if Name should be Defining_program_unit_name, because
	//// it seems XXX.XXX.XXX.XXX is the sole notation possible 
	//UseClause:
	//	UsePackageClause
	//	| UseTypeClause;
	public UseClauseElements getUseClauseAccess() {
		return pUseClause;
	}
	
	public ParserRule getUseClauseRule() {
		return getUseClauseAccess().getRule();
	}

	//UsePackageClause:
	//	USE_ importedNamespace+=[LibraryUnitDeclaration|PATHIDENTIFIER] (V
	//	importedNamespace+=[LibraryUnitDeclaration|PATHIDENTIFIER])*;
	public UsePackageClauseElements getUsePackageClauseAccess() {
		return pUsePackageClause;
	}
	
	public ParserRule getUsePackageClauseRule() {
		return getUsePackageClauseAccess().getRule();
	}

	//// TODO: check if Name should be Defining_program_unit_name, because
	//// it seems XXX.XXX.XXX.XXX is the sole notation possible
	//// TODO: check importedNamespace refers to LibraryUnitDeclaration's names.
	//UseTypeClause:
	//	USE_ TYPE_ typesNames+=PATHIDENTIFIER (V useTypeRefs+=PATHIDENTIFIER)*;
	public UseTypeClauseElements getUseTypeClauseAccess() {
		return pUseTypeClause;
	}
	
	public ParserRule getUseTypeClauseRule() {
		return getUseTypeClauseAccess().getRule();
	}

	//// TODO: check if Name should be Defining_program_unit_name (or something adapted), because
	//// it seems XXX.XXX.XXX.XXX is the sole notation possible
	//LibraryUnitDeclaration:
	//	private?=PRIVATE_?
	//	libraryUnitSpecification=LibraryUnitSpecification;
	public LibraryUnitDeclarationElements getLibraryUnitDeclarationAccess() {
		return pLibraryUnitDeclaration;
	}
	
	public ParserRule getLibraryUnitDeclarationRule() {
		return getLibraryUnitDeclarationAccess().getRule();
	}

	//LibraryUnitSpecification:
	//	PackageDeclaration
	//	| GenericInstantiation
	//	| SubprogramSpecification
	//	| GenericDeclaration;
	public LibraryUnitSpecificationElements getLibraryUnitSpecificationAccess() {
		return pLibraryUnitSpecification;
	}
	
	public ParserRule getLibraryUnitSpecificationRule() {
		return getLibraryUnitSpecificationAccess().getRule();
	}

	//PackageDeclaration:
	//	PackageDefinition | Renaming;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//PackageDefinition:
	//	PACKAGE_ name=PATHIDENTIFIER IS_ packageSpecification=PackageSpecification;
	public PackageDefinitionElements getPackageDefinitionAccess() {
		return pPackageDefinition;
	}
	
	public ParserRule getPackageDefinitionRule() {
		return getPackageDefinitionAccess().getRule();
	}

	//Renaming:
	//	PACKAGE_ name=PATHIDENTIFIER RENAMES_ renamed=PATHIDENTIFIER;
	public RenamingElements getRenamingAccess() {
		return pRenaming;
	}
	
	public ParserRule getRenamingRule() {
		return getRenamingAccess().getRule();
	}

	//GenericDeclaration:
	//	GENERIC_
	//	genericItems=GenericItems
	//	librarySpecification=LibrarySpecification;
	public GenericDeclarationElements getGenericDeclarationAccess() {
		return pGenericDeclaration;
	}
	
	public ParserRule getGenericDeclarationRule() {
		return getGenericDeclarationAccess().getRule();
	}

	//GenericInstantiation:
	//	(PACKAGE_ name=PATHIDENTIFIER IS_ NEW_ genericName=PATHIDENTIFIER
	//	| overriding=OverridingIndicator? PROCEDURE_ name=PATHIDENTIFIER IS_ NEW_ genericName=PATHIDENTIFIER
	//	| overriding=OverridingIndicator? FUNCTION_ name=PATHNAME IS_ NEW_ genericName=PATHNAME)
	//	genericActualPart=GenericActualPart? // NOTE: Changed genericName = Name by Simple_name  
	//	// TODO : semantic check: 
	//	// if actual parameter Expression = Name, check it is either a :
	//	//        | Variable_name
	//	//        | Subprogram_name
	//	//        | Entry_name
	//	//        | Subtype_mark
	//	//        | Package_instance_name 
	//;
	public GenericInstantiationElements getGenericInstantiationAccess() {
		return pGenericInstantiation;
	}
	
	public ParserRule getGenericInstantiationRule() {
		return getGenericInstantiationAccess().getRule();
	}

	//PackageSpecification:
	//	{PackageSpecification} (publicBasicDeclarativeItems+=BasicDeclarativeItem PV)* (PRIVATE_
	//	(privateBasicDeclarativeItems+=BasicDeclarativeItem PV)*)?
	//	END_ endname=PATHIDENTIFIER? // TODO (by the initial author) validate same as Name 
	//;
	public PackageSpecificationElements getPackageSpecificationAccess() {
		return pPackageSpecification;
	}
	
	public ParserRule getPackageSpecificationRule() {
		return getPackageSpecificationAccess().getRule();
	}

	//SubprogramBody:
	//	subprogramSpecification=SubprogramSpecification IS_ (declarativeItems+=DeclarativeItem PV)*
	//	BEGIN_
	//	handledSequenceOfStatements=HandledSequenceOfStatements
	//	END_ endname=PATHNAME?;
	public SubprogramBodyElements getSubprogramBodyAccess() {
		return pSubprogramBody;
	}
	
	public ParserRule getSubprogramBodyRule() {
		return getSubprogramBodyAccess().getRule();
	}

	//// NB: Added just for meta-model handling (not for syntax)
	//DeclarativeBlock:
	//	SubprogramBody
	//	| PackageBody
	//	| EntryBody
	//	| TaskBody
	//	| BlockStatement;
	public DeclarativeBlockElements getDeclarativeBlockAccess() {
		return pDeclarativeBlock;
	}
	
	public ParserRule getDeclarativeBlockRule() {
		return getDeclarativeBlockAccess().getRule();
	}

	//BasicDeclarativeItem:
	//	BasicDeclaration
	//	| AspectClause
	//	| UseClause
	//	| Pragma;
	public BasicDeclarativeItemElements getBasicDeclarativeItemAccess() {
		return pBasicDeclarativeItem;
	}
	
	public ParserRule getBasicDeclarativeItemRule() {
		return getBasicDeclarativeItemAccess().getRule();
	}

	//BasicDeclaration:
	//	GenericDeclaration
	//	| => ObjectDeclaration
	//	| => SubprogramDeclaration
	//	| => PackageDeclaration
	//	| => NumberDeclaration
	//	| => ExceptionDeclaration
	//	| GenericInstantiation
	//	| TaskDeclaration
	//	| TypeDeclaration;
	public BasicDeclarationElements getBasicDeclarationAccess() {
		return pBasicDeclaration;
	}
	
	public ParserRule getBasicDeclarationRule() {
		return getBasicDeclarationAccess().getRule();
	}

	//TaskDeclaration:
	//	TASK_ (TYPE_ name=IDENTIFIER knownDiscriminantPart=KnownDiscriminantPart? | name=IDENTIFIER) (IS_ (NEW_
	//	interfaceList=InterfaceList WITH_)?
	//	taskDefinition=TaskDefinition END_ endid=[TaskDeclaration|IDENTIFIER]?)?;
	public TaskDeclarationElements getTaskDeclarationAccess() {
		return pTaskDeclaration;
	}
	
	public ParserRule getTaskDeclarationRule() {
		return getTaskDeclarationAccess().getRule();
	}

	//TypeDeclaration:
	//	NewTypeDeclaration | SubtypeDeclaration;
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}

	//NewTypeDeclaration:
	//	=> FullTypeDeclaration
	//	| => IncompleteTypeDeclaration
	//	| PrivateTypeDeclaration // TODO: Check it is in a public section of package only.
	//	| => PrivateExtensionDeclaration // TODO: Check it is in a public section of package only.
	//;
	public NewTypeDeclarationElements getNewTypeDeclarationAccess() {
		return pNewTypeDeclaration;
	}
	
	public ParserRule getNewTypeDeclarationRule() {
		return getNewTypeDeclarationAccess().getRule();
	}

	//FullTypeDeclaration:
	//	FullDataTypeDeclaration
	//	| ProtectedTypeDeclaration;
	public FullTypeDeclarationElements getFullTypeDeclarationAccess() {
		return pFullTypeDeclaration;
	}
	
	public ParserRule getFullTypeDeclarationRule() {
		return getFullTypeDeclarationAccess().getRule();
	}

	//FullDataTypeDeclaration:
	//	TYPE_ name=IDENTIFIER knownDiscriminantPart=KnownDiscriminantPart? IS_ typeDefinition=TypeDefinition;
	public FullDataTypeDeclarationElements getFullDataTypeDeclarationAccess() {
		return pFullDataTypeDeclaration;
	}
	
	public ParserRule getFullDataTypeDeclarationRule() {
		return getFullDataTypeDeclarationAccess().getRule();
	}

	//IncompleteTypeDeclaration:
	//	TYPE_ name=IDENTIFIER discriminantPart=DiscriminantPart? (tagged?=IS_ TAGGED_)?;
	public IncompleteTypeDeclarationElements getIncompleteTypeDeclarationAccess() {
		return pIncompleteTypeDeclaration;
	}
	
	public ParserRule getIncompleteTypeDeclarationRule() {
		return getIncompleteTypeDeclarationAccess().getRule();
	}

	//PrivateTypeDeclaration:
	//	TYPE_ name=IDENTIFIER discriminantPart=DiscriminantPart? IS_ (abstract?=ABSTRACT_? tagged?=TAGGED_)?
	//	limited?=LIMITED_? PRIVATE_;
	public PrivateTypeDeclarationElements getPrivateTypeDeclarationAccess() {
		return pPrivateTypeDeclaration;
	}
	
	public ParserRule getPrivateTypeDeclarationRule() {
		return getPrivateTypeDeclarationAccess().getRule();
	}

	//PrivateExtensionDeclaration:
	//	TYPE_ name=IDENTIFIER discriminantPart=DiscriminantPart? IS_
	//	abstract?=ABSTRACT_? (limited?=LIMITED_ | synchronized?=SYNCHRONIZED_)?
	//	NEW_ ancestorSubtypeIndication=SubtypeIndication (AND_ interfaceList=InterfaceList)? WITH_ PRIVATE_;
	public PrivateExtensionDeclarationElements getPrivateExtensionDeclarationAccess() {
		return pPrivateExtensionDeclaration;
	}
	
	public ParserRule getPrivateExtensionDeclarationRule() {
		return getPrivateExtensionDeclarationAccess().getRule();
	}

	//TaskItem:
	//	EntryDeclaration
	//	| AspectClause;
	public TaskItemElements getTaskItemAccess() {
		return pTaskItem;
	}
	
	public ParserRule getTaskItemRule() {
		return getTaskItemAccess().getRule();
	}

	//EntryDeclaration:
	//	overriding=OverridingIndicator? ENTRY_ name=IDENTIFIER (PG discreteSubtypeDefinition=DiscreteSubtypeDefinition PD)?
	//	formalPart=FormalPart?;
	public EntryDeclarationElements getEntryDeclarationAccess() {
		return pEntryDeclaration;
	}
	
	public ParserRule getEntryDeclarationRule() {
		return getEntryDeclarationAccess().getRule();
	}

	//OverridingIndicator:
	//	{OverridingIndicator} not?=NOT_? OVERRIDING_;
	public OverridingIndicatorElements getOverridingIndicatorAccess() {
		return pOverridingIndicator;
	}
	
	public ParserRule getOverridingIndicatorRule() {
		return getOverridingIndicatorAccess().getRule();
	}

	//ProtectedTypeDeclaration:
	//	PROTECTED_ TYPE_ name=IDENTIFIER knownDiscriminantPart=KnownDiscriminantPart? IS_ (NEW_ interfaceList=InterfaceList
	//	WITH_)? protectedDefinition=ProtectedDefinition;
	public ProtectedTypeDeclarationElements getProtectedTypeDeclarationAccess() {
		return pProtectedTypeDeclaration;
	}
	
	public ParserRule getProtectedTypeDeclarationRule() {
		return getProtectedTypeDeclarationAccess().getRule();
	}

	//ProtectedDefinition:
	//	{ProtectedDefinition} protectedOperationDeclaration+=ProtectedOperationDeclaration* (PRIVATE_
	//	protectedOperationDeclaration+=ProtectedElementDeclaration*)?
	//	END_ IDENTIFIER?;
	public ProtectedDefinitionElements getProtectedDefinitionAccess() {
		return pProtectedDefinition;
	}
	
	public ParserRule getProtectedDefinitionRule() {
		return getProtectedDefinitionAccess().getRule();
	}

	//ProtectedElementDeclaration:
	//	ProtectedOperationDeclaration
	//	| ComponentDeclaration;
	public ProtectedElementDeclarationElements getProtectedElementDeclarationAccess() {
		return pProtectedElementDeclaration;
	}
	
	public ParserRule getProtectedElementDeclarationRule() {
		return getProtectedElementDeclarationAccess().getRule();
	}

	//ProtectedOperationDeclaration:
	//	SubprogramDeclaration
	//	| EntryDeclaration
	//	| AspectClause;
	public ProtectedOperationDeclarationElements getProtectedOperationDeclarationAccess() {
		return pProtectedOperationDeclaration;
	}
	
	public ParserRule getProtectedOperationDeclarationRule() {
		return getProtectedOperationDeclarationAccess().getRule();
	}

	//SubprogramDeclaration:
	//	subprogramSpecification=SubprogramSpecification (IS_ abstract?=ABSTRACT_
	//	| RENAMES_ renamedName=PATHNAME
	//	//| (IS_ body=Subprogram_body)                 // TODO: Check if it is part of the syntax. I think no because it is redundant with an other rule and abusively included in Library_unit_declaration derivations.  
	//	| IS_ null?=NULL_)? // TODO: Check that "is null" is applied on a procedure only. 
	//;
	public SubprogramDeclarationElements getSubprogramDeclarationAccess() {
		return pSubprogramDeclaration;
	}
	
	public ParserRule getSubprogramDeclarationRule() {
		return getSubprogramDeclarationAccess().getRule();
	}

	//SubprogramSpecification:
	//	ProcedureSpecification
	//	| FunctionSpecification;
	public SubprogramSpecificationElements getSubprogramSpecificationAccess() {
		return pSubprogramSpecification;
	}
	
	public ParserRule getSubprogramSpecificationRule() {
		return getSubprogramSpecificationAccess().getRule();
	}

	//ProcedureSpecification:
	//	overridingIndicator=OverridingIndicator? PROCEDURE_ name=IDENTIFIER formalPart=FormalPart?;
	public ProcedureSpecificationElements getProcedureSpecificationAccess() {
		return pProcedureSpecification;
	}
	
	public ParserRule getProcedureSpecificationRule() {
		return getProcedureSpecificationAccess().getRule();
	}

	//FunctionSpecification:
	//	overridingIndicator=OverridingIndicator? FUNCTION_ name=DIRECT_NAME
	//	parameterAndResultProfile=ParameterAndResultProfile;
	public FunctionSpecificationElements getFunctionSpecificationAccess() {
		return pFunctionSpecification;
	}
	
	public ParserRule getFunctionSpecificationRule() {
		return getFunctionSpecificationAccess().getRule();
	}

	//HandledSequenceOfStatements:
	//	SequenceOfStatements (EXCEPTION_ exceptionHandler+=ExceptionHandler+)?;
	public HandledSequenceOfStatementsElements getHandledSequenceOfStatementsAccess() {
		return pHandledSequenceOfStatements;
	}
	
	public ParserRule getHandledSequenceOfStatementsRule() {
		return getHandledSequenceOfStatementsAccess().getRule();
	}

	//ExceptionChoice:
	//	name=Name
	//	| others?=OTHERS_;
	public ExceptionChoiceElements getExceptionChoiceAccess() {
		return pExceptionChoice;
	}
	
	public ParserRule getExceptionChoiceRule() {
		return getExceptionChoiceAccess().getRule();
	}

	//ExceptionHandler:
	//	WHEN_ (name=IDENTIFIER DP)? exceptionChoice+=ExceptionChoice (BV exceptionChoice+=ExceptionChoice)* FLECHE
	//	sequenceOfStatements=SequenceOfStatements;
	public ExceptionHandlerElements getExceptionHandlerAccess() {
		return pExceptionHandler;
	}
	
	public ParserRule getExceptionHandlerRule() {
		return getExceptionHandlerAccess().getRule();
	}

	//DeclarativeItem:
	//	=> Body
	//	| => BasicDeclarativeItem;
	public DeclarativeItemElements getDeclarativeItemAccess() {
		return pDeclarativeItem;
	}
	
	public ParserRule getDeclarativeItemRule() {
		return getDeclarativeItemAccess().getRule();
	}

	//Body:
	//	=> ProperBody
	//	| BodyStub;
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}

	//ProperBody:
	//	SubprogramBody
	//	| PackageBody
	//	| TaskBody
	//	| ProtectedBody;
	public ProperBodyElements getProperBodyAccess() {
		return pProperBody;
	}
	
	public ParserRule getProperBodyRule() {
		return getProperBodyAccess().getRule();
	}

	//Label:
	//	CHG identifier=IDENTIFIER CHD;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//SequenceOfStatements:
	//	(statements+=LabelisableStatement PV)+;
	public SequenceOfStatementsElements getSequenceOfStatementsAccess() {
		return pSequenceOfStatements;
	}
	
	public ParserRule getSequenceOfStatementsRule() {
		return getSequenceOfStatementsAccess().getRule();
	}

	//LabelisableStatement:
	//	labels+=Label*
	//	statement=Statement;
	public LabelisableStatementElements getLabelisableStatementAccess() {
		return pLabelisableStatement;
	}
	
	public ParserRule getLabelisableStatementRule() {
		return getLabelisableStatementAccess().getRule();
	}

	//Statement:
	//	SimpleStatement
	//	| CompoundStatement
	//	| Pragma;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//SimpleStatement:
	//	GotoStatement
	//	| => AssignmentStatement
	//	| SimpleReturnStatement
	//	| RequeueStatement
	//	| NullStatement
	//	| AbortStatement
	//	//       | Code_statement // TODO: to remove code
	//	| ExitStatement
	//	| => ProcedureOrEntryCallStatement // TODO: Semantic rule : check that it could be a pure qualified expression. Then, it is a code_statement  
	//	| DelayStatement
	//	| RaiseStatement;
	public SimpleStatementElements getSimpleStatementAccess() {
		return pSimpleStatement;
	}
	
	public ParserRule getSimpleStatementRule() {
		return getSimpleStatementAccess().getRule();
	}

	//CompoundStatement:
	//	IfStatement
	//	| LoopStatement
	//	| ExtendedReturnStatement
	//	| AcceptStatement
	//	| CaseStatement
	//	| BlockStatement
	//	| SelectStatement;
	public CompoundStatementElements getCompoundStatementAccess() {
		return pCompoundStatement;
	}
	
	public ParserRule getCompoundStatementRule() {
		return getCompoundStatementAccess().getRule();
	}

	//NullStatement:
	//	null?=NULL_;
	public NullStatementElements getNullStatementAccess() {
		return pNullStatement;
	}
	
	public ParserRule getNullStatementRule() {
		return getNullStatementAccess().getRule();
	}

	//LibrarySpecification:
	//	SubprogramSpecification // TODO: Check name is always Qualified_identifier even for functions.
	//	| PackageDefinition;
	public LibrarySpecificationElements getLibrarySpecificationAccess() {
		return pLibrarySpecification;
	}
	
	public ParserRule getLibrarySpecificationRule() {
		return getLibrarySpecificationAccess().getRule();
	}

	//GenericItems:
	//	{GenericItems} (genericItems+=GenericItem PV)*;
	public GenericItemsElements getGenericItemsAccess() {
		return pGenericItems;
	}
	
	public ParserRule getGenericItemsRule() {
		return getGenericItemsAccess().getRule();
	}

	//GenericItem:
	//	GenericFormalParameterDeclaration | UseClause;
	public GenericItemElements getGenericItemAccess() {
		return pGenericItem;
	}
	
	public ParserRule getGenericItemRule() {
		return getGenericItemAccess().getRule();
	}

	//GenericFormalParameterDeclaration:
	//	FormalObjectDeclaration
	//	| FormalTypeDeclaration
	//	| FormalSubprogramDeclaration
	//	| FormalPackageDeclaration;
	public GenericFormalParameterDeclarationElements getGenericFormalParameterDeclarationAccess() {
		return pGenericFormalParameterDeclaration;
	}
	
	public ParserRule getGenericFormalParameterDeclarationRule() {
		return getGenericFormalParameterDeclarationAccess().getRule();
	}

	//FormalObjectDeclaration:
	//	idList=DefiningIdentifierList DP mode=Mode (optNullExclusion=OptNullExclusion subtypeMark=Name
	//	| anonymousAccessDefinition=AnonymousAccessDefinition) (DPE defaultExpression=Expression)?;
	public FormalObjectDeclarationElements getFormalObjectDeclarationAccess() {
		return pFormalObjectDeclaration;
	}
	
	public ParserRule getFormalObjectDeclarationRule() {
		return getFormalObjectDeclarationAccess().getRule();
	}

	//FormalTypeDeclaration:
	//	TYPE_ identifier=IDENTIFIER discriminantPart=DiscriminantPart? IS_ formalTypeDefinition=FormalTypeDefinition;
	public FormalTypeDeclarationElements getFormalTypeDeclarationAccess() {
		return pFormalTypeDeclaration;
	}
	
	public ParserRule getFormalTypeDeclarationRule() {
		return getFormalTypeDeclarationAccess().getRule();
	}

	//FormalTypeDefinition:
	//	FormalPrivateTypeDefinition
	//	| FormalDerivedTypeDefinition
	//	| {FormalTypeDefinition} FormalDiscreteTypeDefinition
	//	| {FormalTypeDefinition} FormalSignedIntegerTypeDefinition
	//	| {FormalTypeDefinition} FormalModularTypeDefinition
	//	| {FormalTypeDefinition} FormalFloatingPointDefinition
	//	| {FormalTypeDefinition} FormalOrdinaryFixedPointDefinition
	//	| {FormalTypeDefinition} FormalDecimalFixedPointDefinition
	//	| ArrayTypeDefinition
	//	| AccessTypeDefinition
	//	| InterfaceTypeDefinition;
	public FormalTypeDefinitionElements getFormalTypeDefinitionAccess() {
		return pFormalTypeDefinition;
	}
	
	public ParserRule getFormalTypeDefinitionRule() {
		return getFormalTypeDefinitionAccess().getRule();
	}

	//FormalDiscreteTypeDefinition:
	//	PG BOIT PD;
	public FormalDiscreteTypeDefinitionElements getFormalDiscreteTypeDefinitionAccess() {
		return pFormalDiscreteTypeDefinition;
	}
	
	public ParserRule getFormalDiscreteTypeDefinitionRule() {
		return getFormalDiscreteTypeDefinitionAccess().getRule();
	}

	//FormalSignedIntegerTypeDefinition:
	//	RANGE_ BOIT;
	public FormalSignedIntegerTypeDefinitionElements getFormalSignedIntegerTypeDefinitionAccess() {
		return pFormalSignedIntegerTypeDefinition;
	}
	
	public ParserRule getFormalSignedIntegerTypeDefinitionRule() {
		return getFormalSignedIntegerTypeDefinitionAccess().getRule();
	}

	//FormalModularTypeDefinition:
	//	MOD_ BOIT;
	public FormalModularTypeDefinitionElements getFormalModularTypeDefinitionAccess() {
		return pFormalModularTypeDefinition;
	}
	
	public ParserRule getFormalModularTypeDefinitionRule() {
		return getFormalModularTypeDefinitionAccess().getRule();
	}

	//FormalFloatingPointDefinition:
	//	DIGITS_ BOIT;
	public FormalFloatingPointDefinitionElements getFormalFloatingPointDefinitionAccess() {
		return pFormalFloatingPointDefinition;
	}
	
	public ParserRule getFormalFloatingPointDefinitionRule() {
		return getFormalFloatingPointDefinitionAccess().getRule();
	}

	//FormalOrdinaryFixedPointDefinition:
	//	DELTA_ BOIT;
	public FormalOrdinaryFixedPointDefinitionElements getFormalOrdinaryFixedPointDefinitionAccess() {
		return pFormalOrdinaryFixedPointDefinition;
	}
	
	public ParserRule getFormalOrdinaryFixedPointDefinitionRule() {
		return getFormalOrdinaryFixedPointDefinitionAccess().getRule();
	}

	//FormalDecimalFixedPointDefinition:
	//	DELTA_ BOIT DIGITS_ BOIT;
	public FormalDecimalFixedPointDefinitionElements getFormalDecimalFixedPointDefinitionAccess() {
		return pFormalDecimalFixedPointDefinition;
	}
	
	public ParserRule getFormalDecimalFixedPointDefinitionRule() {
		return getFormalDecimalFixedPointDefinitionAccess().getRule();
	}

	//FormalPrivateTypeDefinition:
	//	{FormalPrivateTypeDefinition} (abstract?=ABSTRACT_? tagged?=TAGGED_)? limited?=LIMITED_? PRIVATE_;
	public FormalPrivateTypeDefinitionElements getFormalPrivateTypeDefinitionAccess() {
		return pFormalPrivateTypeDefinition;
	}
	
	public ParserRule getFormalPrivateTypeDefinitionRule() {
		return getFormalPrivateTypeDefinitionAccess().getRule();
	}

	//FormalDerivedTypeDefinition:
	//	absract=ABSTRACT_? (limited?=LIMITED_ | synchronized?=SYNCHRONIZED_)? NEW_ subtypeMark=Name ((AND_
	//	interfaceList=InterfaceList)? WITH_ PRIVATE_)?;
	public FormalDerivedTypeDefinitionElements getFormalDerivedTypeDefinitionAccess() {
		return pFormalDerivedTypeDefinition;
	}
	
	public ParserRule getFormalDerivedTypeDefinitionRule() {
		return getFormalDerivedTypeDefinitionAccess().getRule();
	}

	//FormalSubprogramDeclaration:
	//	WITH_ subprogramSpecification=SubprogramSpecification (IS_ abstract=ABSTRACT_? subprogramDefault=SubprogramDefault)?;
	public FormalSubprogramDeclarationElements getFormalSubprogramDeclarationAccess() {
		return pFormalSubprogramDeclaration;
	}
	
	public ParserRule getFormalSubprogramDeclarationRule() {
		return getFormalSubprogramDeclarationAccess().getRule();
	}

	//SubprogramDefault:
	//	{SubprogramDefault} (defaultName=PATHNAME // TODO: To be confirmed it is not a Name as specified by the RM.
	//	| BOIT
	//	| NULL_);
	public SubprogramDefaultElements getSubprogramDefaultAccess() {
		return pSubprogramDefault;
	}
	
	public ParserRule getSubprogramDefaultRule() {
		return getSubprogramDefaultAccess().getRule();
	}

	//FormalPackageDeclaration:
	//	WITH_ PACKAGE_ name=IDENTIFIER IS_ NEW_ genericPackageName=PATHIDENTIFIER
	//	formalPackageActualPart=FormalPackageActualPart;
	public FormalPackageDeclarationElements getFormalPackageDeclarationAccess() {
		return pFormalPackageDeclaration;
	}
	
	public ParserRule getFormalPackageDeclarationRule() {
		return getFormalPackageDeclarationAccess().getRule();
	}

	//FormalPackageActualPart:
	//	{FormalPackageActualPart} (=> PG (OTHERS_ FLECHE)? box?=BOIT PD
	//	| => genericActualPart=GenericActualPart?
	//	| => PG formalPackageAssociation+=FormalPackageAssociation (V formalPackageAssociation+=FormalPackageAssociation)* (V
	//	OTHERS_ FLECHE BOIT)? PD);
	public FormalPackageActualPartElements getFormalPackageActualPartAccess() {
		return pFormalPackageActualPart;
	}
	
	public ParserRule getFormalPackageActualPartRule() {
		return getFormalPackageActualPartAccess().getRule();
	}

	//FormalPackageAssociation:
	//	genericAssociation=GenericAssociation
	//	| genericFormalParameterSelectorName=SelectorName DPE BOIT;
	public FormalPackageAssociationElements getFormalPackageAssociationAccess() {
		return pFormalPackageAssociation;
	}
	
	public ParserRule getFormalPackageAssociationRule() {
		return getFormalPackageAssociationAccess().getRule();
	}

	//ExceptionDeclaration:
	//	idList=DefiningIdentifierList DP EXCEPTION_ (RENAMES_ renamedName=Name)?;
	public ExceptionDeclarationElements getExceptionDeclarationAccess() {
		return pExceptionDeclaration;
	}
	
	public ParserRule getExceptionDeclarationRule() {
		return getExceptionDeclarationAccess().getRule();
	}

	//ObjectDeclaration:
	//	DataInstanceDeclaration
	//	| SingleProtectedDeclaration;
	public ObjectDeclarationElements getObjectDeclarationAccess() {
		return pObjectDeclaration;
	}
	
	public ParserRule getObjectDeclarationRule() {
		return getObjectDeclarationAccess().getRule();
	}

	//DataInstanceDeclaration:
	//	definingIdentifierList=DefiningIdentifierList DP aliased?=ALIASED_? constant?=CONSTANT_?
	//	(subtypeIndication=SubtypeIndication (DPE expression=Expression | RENAMES_ objectName=Name)?
	//	| anonymousAccessDefinition=AnonymousAccessDefinition (DPE expression=Expression | RENAMES_ objectName=Name)?
	//	| arrayTypeDefinition=ArrayTypeDefinition (DPE expression=Expression)?);
	public DataInstanceDeclarationElements getDataInstanceDeclarationAccess() {
		return pDataInstanceDeclaration;
	}
	
	public ParserRule getDataInstanceDeclarationRule() {
		return getDataInstanceDeclarationAccess().getRule();
	}

	//// TODO: for RENAMES alternatives, check Defining_identifier_list's size = 1 and Subtype_indication has no constraint.
	//SingleProtectedDeclaration:
	//	PROTECTED_ name=IDENTIFIER IS_ (NEW_ interfaceList=InterfaceList WITH_)? protectedDefinition=ProtectedDefinition;
	public SingleProtectedDeclarationElements getSingleProtectedDeclarationAccess() {
		return pSingleProtectedDeclaration;
	}
	
	public ParserRule getSingleProtectedDeclarationRule() {
		return getSingleProtectedDeclarationAccess().getRule();
	}

	//Pragma:
	//	PRAGMA_ name=IDENTIFIER (PG pragmaArgumentAssociation+=PragmaArgumentAssociation (V
	//	pragmaArgumentAssociation+=PragmaArgumentAssociation)* PD)?;
	public PragmaElements getPragmaAccess() {
		return pPragma;
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}

	//PragmaArgumentAssociation:
	//	(name=IDENTIFIER FLECHE)? effectiveArgument=Expression;
	public PragmaArgumentAssociationElements getPragmaArgumentAssociationAccess() {
		return pPragmaArgumentAssociation;
	}
	
	public ParserRule getPragmaArgumentAssociationRule() {
		return getPragmaArgumentAssociationAccess().getRule();
	}

	//SubtypeDeclaration:
	//	SUBTYPE_ name=IDENTIFIER IS_ subtypeIndication=SubtypeIndication;
	public SubtypeDeclarationElements getSubtypeDeclarationAccess() {
		return pSubtypeDeclaration;
	}
	
	public ParserRule getSubtypeDeclarationRule() {
		return getSubtypeDeclarationAccess().getRule();
	}

	//NumberDeclaration:
	//	idList=DefiningIdentifierList DP CONSTANT_ DPE staticExpression=Expression;
	public NumberDeclarationElements getNumberDeclarationAccess() {
		return pNumberDeclaration;
	}
	
	public ParserRule getNumberDeclarationRule() {
		return getNumberDeclarationAccess().getRule();
	}

	//AssignmentStatement:
	//	variableName=Name DPE initialValue=Expression;
	public AssignmentStatementElements getAssignmentStatementAccess() {
		return pAssignmentStatement;
	}
	
	public ParserRule getAssignmentStatementRule() {
		return getAssignmentStatementAccess().getRule();
	}

	//IfStatement:
	//	IF_ ifCondition=Expression THEN_
	//	thenStatements=SequenceOfStatements (ELSIF_ elsifConditions+=Expression THEN_
	//	elsifStatements+=SequenceOfStatements)* (ELSE_ elseStatements=SequenceOfStatements)?
	//	END_ IF_;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//CaseStatement:
	//	CASE_ caseValue=Expression IS_
	//	caseStatementAlternatives+=CaseStatementAlternative+
	//	END_ CASE_;
	public CaseStatementElements getCaseStatementAccess() {
		return pCaseStatement;
	}
	
	public ParserRule getCaseStatementRule() {
		return getCaseStatementAccess().getRule();
	}

	//CaseStatementAlternative:
	//	WHEN_ discreteChoiceList=DiscreteChoiceList FLECHE sequenceOfStatements=SequenceOfStatements;
	public CaseStatementAlternativeElements getCaseStatementAlternativeAccess() {
		return pCaseStatementAlternative;
	}
	
	public ParserRule getCaseStatementAlternativeRule() {
		return getCaseStatementAlternativeAccess().getRule();
	}

	//LoopStatement:
	//	(name=IDENTIFIER DP)? iterationScheme=IterationScheme?
	//	LOOP_
	//	sequenceOfStatements=SequenceOfStatements
	//	END_ LOOP_ sameName=IDENTIFIER?;
	public LoopStatementElements getLoopStatementAccess() {
		return pLoopStatement;
	}
	
	public ParserRule getLoopStatementRule() {
		return getLoopStatementAccess().getRule();
	}

	//IterationScheme:
	//	WHILE_ condition=Expression
	//	| FOR_ iterationSpecification=LoopParameterSpecification;
	public IterationSchemeElements getIterationSchemeAccess() {
		return pIterationScheme;
	}
	
	public ParserRule getIterationSchemeRule() {
		return getIterationSchemeAccess().getRule();
	}

	//LoopParameterSpecification:
	//	identifier=IDENTIFIER IN_ REVERSE_? discreteSubtypeDefinition=DiscreteSubtypeDefinition;
	public LoopParameterSpecificationElements getLoopParameterSpecificationAccess() {
		return pLoopParameterSpecification;
	}
	
	public ParserRule getLoopParameterSpecificationRule() {
		return getLoopParameterSpecificationAccess().getRule();
	}

	//BlockStatement:
	//	(blockStatementIdentifier=IDENTIFIER DP)? (DECLARE_ (declarativeItems+=DeclarativeItem PV)*)?
	//	BEGIN_
	//	handledSequenceOfStatements=HandledSequenceOfStatements
	//	END_ IDENTIFIER?;
	public BlockStatementElements getBlockStatementAccess() {
		return pBlockStatement;
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}

	//ExitStatement:
	//	{ExitStatement} EXIT_ name=[LoopStatement|IDENTIFIER]? (WHEN_ condition=Expression)?;
	public ExitStatementElements getExitStatementAccess() {
		return pExitStatement;
	}
	
	public ParserRule getExitStatementRule() {
		return getExitStatementAccess().getRule();
	}

	//GotoStatement:
	//	GOTO_ labelId=IDENTIFIER;
	public GotoStatementElements getGotoStatementAccess() {
		return pGotoStatement;
	}
	
	public ParserRule getGotoStatementRule() {
		return getGotoStatementAccess().getRule();
	}

	//ProcedureOrEntryCallStatement:
	//	callee=Name;
	public ProcedureOrEntryCallStatementElements getProcedureOrEntryCallStatementAccess() {
		return pProcedureOrEntryCallStatement;
	}
	
	public ParserRule getProcedureOrEntryCallStatementRule() {
		return getProcedureOrEntryCallStatementAccess().getRule();
	}

	//SimpleReturnStatement:
	//	{SimpleReturnStatement} RETURN_ returnValue=Expression?;
	public SimpleReturnStatementElements getSimpleReturnStatementAccess() {
		return pSimpleReturnStatement;
	}
	
	public ParserRule getSimpleReturnStatementRule() {
		return getSimpleReturnStatementAccess().getRule();
	}

	//ExtendedReturnStatement:
	//	RETURN_ identifier=IDENTIFIER DP ALIASED_? returnSubtype=ReturnSubtypeIndication (DPE expression=Expression)? (DO_
	//	handledSequenceOfStatements=HandledSequenceOfStatements
	//	END_ RETURN_)?;
	public ExtendedReturnStatementElements getExtendedReturnStatementAccess() {
		return pExtendedReturnStatement;
	}
	
	public ParserRule getExtendedReturnStatementRule() {
		return getExtendedReturnStatementAccess().getRule();
	}

	//ReturnSubtypeIndication:
	//	SubtypeIndication
	//	| AnonymousAccessDefinition;
	public ReturnSubtypeIndicationElements getReturnSubtypeIndicationAccess() {
		return pReturnSubtypeIndication;
	}
	
	public ParserRule getReturnSubtypeIndicationRule() {
		return getReturnSubtypeIndicationAccess().getRule();
	}

	//PackageBody:
	//	PACKAGE_ BODY_ name=[PackageDeclaration|PATHIDENTIFIER] IS_ (declarativeItems+=DeclarativeItem PV)* (BEGIN_
	//	handledSequenceOfStatements=HandledSequenceOfStatements)? END_ endName=[PackageDeclaration|PATHIDENTIFIER]? // TODO: Check endName=name
	//;
	public PackageBodyElements getPackageBodyAccess() {
		return pPackageBody;
	}
	
	public ParserRule getPackageBodyRule() {
		return getPackageBodyAccess().getRule();
	}

	//TaskDefinition:
	//	{TaskDefinition} (taskItems+=TaskItem PV)* (PRIVATE_ (taskItems+=TaskItem PV)*)?;
	public TaskDefinitionElements getTaskDefinitionAccess() {
		return pTaskDefinition;
	}
	
	public ParserRule getTaskDefinitionRule() {
		return getTaskDefinitionAccess().getRule();
	}

	//TaskBody:
	//	TASK_ BODY_ name=[TaskDeclaration|IDENTIFIER] IS_ (declarativeItems+=DeclarativeItem PV)*
	//	BEGIN_
	//	handledSequenceOfStatements=HandledSequenceOfStatements
	//	END_ endId=[TaskDeclaration|IDENTIFIER]?;
	public TaskBodyElements getTaskBodyAccess() {
		return pTaskBody;
	}
	
	public ParserRule getTaskBodyRule() {
		return getTaskBodyAccess().getRule();
	}

	//ProtectedBody:
	//	PROTECTED_ BODY_ identifier=IDENTIFIER IS_ protectedOperationItem+=ProtectedOperationItem* END_ idTask=IDENTIFIER?;
	public ProtectedBodyElements getProtectedBodyAccess() {
		return pProtectedBody;
	}
	
	public ParserRule getProtectedBodyRule() {
		return getProtectedBodyAccess().getRule();
	}

	//ProtectedOperationItem:
	//	SubprogramDeclaration
	//	| => SubprogramBody
	//	| EntryBody
	//	| AspectClause;
	public ProtectedOperationItemElements getProtectedOperationItemAccess() {
		return pProtectedOperationItem;
	}
	
	public ParserRule getProtectedOperationItemRule() {
		return getProtectedOperationItemAccess().getRule();
	}

	//AcceptStatement:
	//	ACCEPT_ entryName=[EntryDeclaration|IDENTIFIER] (PG entryIndex=EntryIndex PD)? formalPart=FormalPart? (DO_
	//	handledSequenceOfStatements=HandledSequenceOfStatements END_ entryidentifier=IDENTIFIER?)?;
	public AcceptStatementElements getAcceptStatementAccess() {
		return pAcceptStatement;
	}
	
	public ParserRule getAcceptStatementRule() {
		return getAcceptStatementAccess().getRule();
	}

	//EntryIndex:
	//	Expression;
	public EntryIndexElements getEntryIndexAccess() {
		return pEntryIndex;
	}
	
	public ParserRule getEntryIndexRule() {
		return getEntryIndexAccess().getRule();
	}

	//EntryBody:
	//	ENTRY_ name=[EntryDeclaration|IDENTIFIER] entryBodyFormalPart=EntryBodyFormalPart entryBarrier=EntryBarrier IS_
	//	(declarativeItems+=DeclarativeItem PV)*
	//	BEGIN_
	//	handledSequenceOfStatements=HandledSequenceOfStatements
	//	END_ endid=IDENTIFIER?;
	public EntryBodyElements getEntryBodyAccess() {
		return pEntryBody;
	}
	
	public ParserRule getEntryBodyRule() {
		return getEntryBodyAccess().getRule();
	}

	//EntryBodyFormalPart:
	//	{EntryBodyFormalPart} (PG entryIndexSpecification=EntryIndexSpecification PD)? formalPart=FormalPart?;
	public EntryBodyFormalPartElements getEntryBodyFormalPartAccess() {
		return pEntryBodyFormalPart;
	}
	
	public ParserRule getEntryBodyFormalPartRule() {
		return getEntryBodyFormalPartAccess().getRule();
	}

	//EntryBarrier:
	//	WHEN_ condition=Expression;
	public EntryBarrierElements getEntryBarrierAccess() {
		return pEntryBarrier;
	}
	
	public ParserRule getEntryBarrierRule() {
		return getEntryBarrierAccess().getRule();
	}

	//EntryIndexSpecification:
	//	FOR_ name=IDENTIFIER IN_ discreteSubtypeDefinition=DiscreteSubtypeDefinition;
	public EntryIndexSpecificationElements getEntryIndexSpecificationAccess() {
		return pEntryIndexSpecification;
	}
	
	public ParserRule getEntryIndexSpecificationRule() {
		return getEntryIndexSpecificationAccess().getRule();
	}

	//RequeueStatement:
	//	REQUEUE_ name=Name (abort?=WITH_ ABORT_)?;
	public RequeueStatementElements getRequeueStatementAccess() {
		return pRequeueStatement;
	}
	
	public ParserRule getRequeueStatementRule() {
		return getRequeueStatementAccess().getRule();
	}

	//DelayStatement:
	//	DELAY_ until=UNTIL_? delay=Expression;
	public DelayStatementElements getDelayStatementAccess() {
		return pDelayStatement;
	}
	
	public ParserRule getDelayStatementRule() {
		return getDelayStatementAccess().getRule();
	}

	//SelectStatement:
	//	=> SelectiveAccept
	//	| => TimedEntryCall
	//	| => ConditionalEntryCall
	//	| => AsynchronousSelect;
	public SelectStatementElements getSelectStatementAccess() {
		return pSelectStatement;
	}
	
	public ParserRule getSelectStatementRule() {
		return getSelectStatementAccess().getRule();
	}

	//SelectiveAccept:
	//	SELECT_ selectguard=Guard?
	//	selectAlternative=SelectAlternative PV (guardedAlternatives+=GuardedAlternative PV)* (ELSE_
	//	elseStatements=SequenceOfStatements)?
	//	END_ SELECT_;
	public SelectiveAcceptElements getSelectiveAcceptAccess() {
		return pSelectiveAccept;
	}
	
	public ParserRule getSelectiveAcceptRule() {
		return getSelectiveAcceptAccess().getRule();
	}

	//GuardedAlternative:
	//	OR_ guard=Guard? alternative=SelectAlternative;
	public GuardedAlternativeElements getGuardedAlternativeAccess() {
		return pGuardedAlternative;
	}
	
	public ParserRule getGuardedAlternativeRule() {
		return getGuardedAlternativeAccess().getRule();
	}

	//Guard:
	//	WHEN_ condition=Expression FLECHE;
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	//SelectAlternative:
	//	AcceptAlternative
	//	| DelayAlternative
	//	| {SelectAlternative} TERMINATE_;
	public SelectAlternativeElements getSelectAlternativeAccess() {
		return pSelectAlternative;
	}
	
	public ParserRule getSelectAlternativeRule() {
		return getSelectAlternativeAccess().getRule();
	}

	//AcceptAlternative:
	//	acceptStatement=AcceptStatement (PV sequenceOfStatements=SequenceOfStatements)?;
	public AcceptAlternativeElements getAcceptAlternativeAccess() {
		return pAcceptAlternative;
	}
	
	public ParserRule getAcceptAlternativeRule() {
		return getAcceptAlternativeAccess().getRule();
	}

	//DelayAlternative:
	//	delayStatement=DelayStatement (PV sequenceOfStatements=SequenceOfStatements)?;
	public DelayAlternativeElements getDelayAlternativeAccess() {
		return pDelayAlternative;
	}
	
	public ParserRule getDelayAlternativeRule() {
		return getDelayAlternativeAccess().getRule();
	}

	//TimedEntryCall:
	//	SELECT_ entryCallAlternative=EntryCallAlternative PV OR_ delayAlternative=DelayAlternative PV END_ SELECT_;
	public TimedEntryCallElements getTimedEntryCallAccess() {
		return pTimedEntryCall;
	}
	
	public ParserRule getTimedEntryCallRule() {
		return getTimedEntryCallAccess().getRule();
	}

	//EntryCallAlternative:
	//	call=ProcedureOrEntryCallStatement (PV sequenceOfStatements=SequenceOfStatements)?;
	public EntryCallAlternativeElements getEntryCallAlternativeAccess() {
		return pEntryCallAlternative;
	}
	
	public ParserRule getEntryCallAlternativeRule() {
		return getEntryCallAlternativeAccess().getRule();
	}

	//ConditionalEntryCall:
	//	SELECT_ entryCallAlternative=EntryCallAlternative
	//	ELSE_ elseSequenceOfStatements=SequenceOfStatements
	//	END_ SELECT_;
	public ConditionalEntryCallElements getConditionalEntryCallAccess() {
		return pConditionalEntryCall;
	}
	
	public ParserRule getConditionalEntryCallRule() {
		return getConditionalEntryCallAccess().getRule();
	}

	//AsynchronousSelect:
	//	SELECT_ triggeringAlternative=TriggeringAlternative PV
	//	THEN_ ABORT_ abortablePart=AbortablePart
	//	END_ SELECT_;
	public AsynchronousSelectElements getAsynchronousSelectAccess() {
		return pAsynchronousSelect;
	}
	
	public ParserRule getAsynchronousSelectRule() {
		return getAsynchronousSelectAccess().getRule();
	}

	//TriggeringAlternative:
	//	triggeringStatement=TriggeringStatement (PV sequenceOfStatements=SequenceOfStatements)?;
	public TriggeringAlternativeElements getTriggeringAlternativeAccess() {
		return pTriggeringAlternative;
	}
	
	public ParserRule getTriggeringAlternativeRule() {
		return getTriggeringAlternativeAccess().getRule();
	}

	//TriggeringStatement:
	//	ProcedureOrEntryCallStatement
	//	| DelayStatement;
	public TriggeringStatementElements getTriggeringStatementAccess() {
		return pTriggeringStatement;
	}
	
	public ParserRule getTriggeringStatementRule() {
		return getTriggeringStatementAccess().getRule();
	}

	//AbortablePart:
	//	SequenceOfStatements;
	public AbortablePartElements getAbortablePartAccess() {
		return pAbortablePart;
	}
	
	public ParserRule getAbortablePartRule() {
		return getAbortablePartAccess().getRule();
	}

	//AbortStatement:
	//	ABORT_ TaskNames;
	public AbortStatementElements getAbortStatementAccess() {
		return pAbortStatement;
	}
	
	public ParserRule getAbortStatementRule() {
		return getAbortStatementAccess().getRule();
	}

	//TaskNames:
	//	taskNames+=Name (V taskNames+=Name)*;
	public TaskNamesElements getTaskNamesAccess() {
		return pTaskNames;
	}
	
	public ParserRule getTaskNamesRule() {
		return getTaskNamesAccess().getRule();
	}

	//BodyStub:
	//	(SubprogramSpecification
	//	| PackageBodyStub
	//	| TaskBodyStub
	//	| ProtectedBodyStub) IS_ SEPARATE_;
	public BodyStubElements getBodyStubAccess() {
		return pBodyStub;
	}
	
	public ParserRule getBodyStubRule() {
		return getBodyStubAccess().getRule();
	}

	//PackageBodyStub:
	//	PACKAGE_ BODY_ name=IDENTIFIER;
	public PackageBodyStubElements getPackageBodyStubAccess() {
		return pPackageBodyStub;
	}
	
	public ParserRule getPackageBodyStubRule() {
		return getPackageBodyStubAccess().getRule();
	}

	//TaskBodyStub:
	//	TASK_ BODY_ name=IDENTIFIER;
	public TaskBodyStubElements getTaskBodyStubAccess() {
		return pTaskBodyStub;
	}
	
	public ParserRule getTaskBodyStubRule() {
		return getTaskBodyStubAccess().getRule();
	}

	//ProtectedBodyStub:
	//	PROTECTED_ BODY_ name=IDENTIFIER;
	public ProtectedBodyStubElements getProtectedBodyStubAccess() {
		return pProtectedBodyStub;
	}
	
	public ParserRule getProtectedBodyStubRule() {
		return getProtectedBodyStubAccess().getRule();
	}

	//SeparateSubunit:
	//	SEPARATE_ PG parentUnitName=PATHIDENTIFIER PD properBody=ProperBody;
	public SeparateSubunitElements getSeparateSubunitAccess() {
		return pSeparateSubunit;
	}
	
	public ParserRule getSeparateSubunitRule() {
		return getSeparateSubunitAccess().getRule();
	}

	//RaiseStatement:
	//	{RaiseStatement} RAISE_ (exceptionName=Name (WITH_ withExpression=Expression)?)?;
	public RaiseStatementElements getRaiseStatementAccess() {
		return pRaiseStatement;
	}
	
	public ParserRule getRaiseStatementRule() {
		return getRaiseStatementAccess().getRule();
	}

	//GenericActualPart:
	//	PG genericAssociation+=GenericAssociation (V genericAssociation+=GenericAssociation)* PD;
	public GenericActualPartElements getGenericActualPartAccess() {
		return pGenericActualPart;
	}
	
	public ParserRule getGenericActualPartRule() {
		return getGenericActualPartAccess().getRule();
	}

	//GenericAssociation:
	//	(selectorName=SelectorName FLECHE)? expplicitGenericActualParam=ExplicitGenericActualParameter;
	public GenericAssociationElements getGenericAssociationAccess() {
		return pGenericAssociation;
	}
	
	public ParserRule getGenericAssociationRule() {
		return getGenericAssociationAccess().getRule();
	}

	//ExplicitGenericActualParameter:
	//	Expression // TODO : semantic check: 
	//	// if crossref is Expression = Name, check it is
	//	//        | Variable_name
	//	//        | Subprogram_name
	//	//        | Entry_name
	//	//        | Subtype_mark
	//	//        | Package_instance_name
	//;
	public ExplicitGenericActualParameterElements getExplicitGenericActualParameterAccess() {
		return pExplicitGenericActualParameter;
	}
	
	public ParserRule getExplicitGenericActualParameterRule() {
		return getExplicitGenericActualParameterAccess().getRule();
	}

	////Code_statement: // TODO: To be removed
	////        qualifiedExpression=Qualified_expression PV
	////        ;
	/////////////////////////////////////////////////////////////////////////////////
	////
	////                       Grammar module : TYPES.XTEXT 
	////
	/////////////////////////////////////////////////////////////////////////////////
	//TypeDefinition:
	//	EnumerationTypeDefinition
	//	| RealTypeDefinition
	//	| RecordTypeDefinition
	//	| DerivedTypeDefinition
	//	| IntegerTypeDefinition
	//	| ArrayTypeDefinition
	//	| AccessTypeDefinition
	//	| InterfaceTypeDefinition;
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//DiscriminantPart:
	//	UnknownDiscriminantPart
	//	| KnownDiscriminantPart;
	public DiscriminantPartElements getDiscriminantPartAccess() {
		return pDiscriminantPart;
	}
	
	public ParserRule getDiscriminantPartRule() {
		return getDiscriminantPartAccess().getRule();
	}

	//UnknownDiscriminantPart:
	//	PG box?=BOIT PD;
	public UnknownDiscriminantPartElements getUnknownDiscriminantPartAccess() {
		return pUnknownDiscriminantPart;
	}
	
	public ParserRule getUnknownDiscriminantPartRule() {
		return getUnknownDiscriminantPartAccess().getRule();
	}

	//KnownDiscriminantPart:
	//	PG discriminantsSpecification+=DiscriminantSpecification (PV discriminantsSpecification+=DiscriminantSpecification)*
	//	PD;
	public KnownDiscriminantPartElements getKnownDiscriminantPartAccess() {
		return pKnownDiscriminantPart;
	}
	
	public ParserRule getKnownDiscriminantPartRule() {
		return getKnownDiscriminantPartAccess().getRule();
	}

	//DiscriminantSpecification:
	//	definingIdentifiers=DefiningIdentifierList DP optNullExclusion=OptNullExclusion
	//	(accessDefinition=NotNullAccessDefinition | subtypeMark=Name) (DPE defaultValue=Expression)?;
	public DiscriminantSpecificationElements getDiscriminantSpecificationAccess() {
		return pDiscriminantSpecification;
	}
	
	public ParserRule getDiscriminantSpecificationRule() {
		return getDiscriminantSpecificationAccess().getRule();
	}

	//InterfaceList:
	//	interfaceSubtypeMark+=Name (AND_ interfaceSubtypeMark+=Name)*;
	public InterfaceListElements getInterfaceListAccess() {
		return pInterfaceList;
	}
	
	public ParserRule getInterfaceListRule() {
		return getInterfaceListAccess().getRule();
	}

	//InterfaceTypeDefinition:
	//	{InterfaceTypeDefinition} (limited?=LIMITED_ | task?=TASK_ | protected?=PROTECTED_ | synchro?=SYNCHRONIZED_)?
	//	INTERFACE_ (AND_ interfaceList=InterfaceList)?;
	public InterfaceTypeDefinitionElements getInterfaceTypeDefinitionAccess() {
		return pInterfaceTypeDefinition;
	}
	
	public ParserRule getInterfaceTypeDefinitionRule() {
		return getInterfaceTypeDefinitionAccess().getRule();
	}

	//DerivedTypeDefinition:
	//	abstract=ABSTRACT_? limited=LIMITED_? NEW_ subtypeIndication=SubtypeIndication ((AND_ interfaceList=InterfaceList)?
	//	recordExtentionPart=RecordExtensionPart)?;
	public DerivedTypeDefinitionElements getDerivedTypeDefinitionAccess() {
		return pDerivedTypeDefinition;
	}
	
	public ParserRule getDerivedTypeDefinitionRule() {
		return getDerivedTypeDefinitionAccess().getRule();
	}

	//RecordExtensionPart:
	//	WITH_ recordDefinition=RecordDefinition;
	public RecordExtensionPartElements getRecordExtensionPartAccess() {
		return pRecordExtensionPart;
	}
	
	public ParserRule getRecordExtensionPartRule() {
		return getRecordExtensionPartAccess().getRule();
	}

	//AccessTypeDefinition:
	//	optNullExclusion=OptNullExclusion accessDefinition=AccessSpecification;
	public AccessTypeDefinitionElements getAccessTypeDefinitionAccess() {
		return pAccessTypeDefinition;
	}
	
	public ParserRule getAccessTypeDefinitionRule() {
		return getAccessTypeDefinitionAccess().getRule();
	}

	//AccessSpecification:
	//	AccessToDataDefinition
	//	| AccessToSubprogramDefinition;
	public AccessSpecificationElements getAccessSpecificationAccess() {
		return pAccessSpecification;
	}
	
	public ParserRule getAccessSpecificationRule() {
		return getAccessSpecificationAccess().getRule();
	}

	//AccessToSubprogramDefinition:
	//	{AccessToSubprogramDefinition} ACCESS_ protected?=PROTECTED_? (PROCEDURE_ formalPart=FormalPart?
	//	| FUNCTION_ parameterAndResultProfile=ParameterAndResultProfile);
	public AccessToSubprogramDefinitionElements getAccessToSubprogramDefinitionAccess() {
		return pAccessToSubprogramDefinition;
	}
	
	public ParserRule getAccessToSubprogramDefinitionRule() {
		return getAccessToSubprogramDefinitionAccess().getRule();
	}

	//AccessToDataDefinition:
	//	ACCESS_ generalAccessModifier=GeneralAccessModifier? subtypeIndication=SubtypeIndication;
	public AccessToDataDefinitionElements getAccessToDataDefinitionAccess() {
		return pAccessToDataDefinition;
	}
	
	public ParserRule getAccessToDataDefinitionRule() {
		return getAccessToDataDefinitionAccess().getRule();
	}

	//GeneralAccessModifier:
	//	ALL_
	//	| CONSTANT_;
	public GeneralAccessModifierElements getGeneralAccessModifierAccess() {
		return pGeneralAccessModifier;
	}
	
	public ParserRule getGeneralAccessModifierRule() {
		return getGeneralAccessModifierAccess().getRule();
	}

	//ArrayTypeDefinition:
	//	ARRAY_
	//	PG arrayIndexes=ArrayIndexes PD OF_ componentDefinition=ComponentDefinition;
	public ArrayTypeDefinitionElements getArrayTypeDefinitionAccess() {
		return pArrayTypeDefinition;
	}
	
	public ParserRule getArrayTypeDefinitionRule() {
		return getArrayTypeDefinitionAccess().getRule();
	}

	//ArrayIndexes:
	//	=> UnconstrainedIndexes
	//	| ConstrainedIndexes;
	public ArrayIndexesElements getArrayIndexesAccess() {
		return pArrayIndexes;
	}
	
	public ParserRule getArrayIndexesRule() {
		return getArrayIndexesAccess().getRule();
	}

	//UnconstrainedIndexes:
	//	subtypeMark+=Name RANGE_ BOIT (V subtypeMark+=Name RANGE_ BOIT)*;
	public UnconstrainedIndexesElements getUnconstrainedIndexesAccess() {
		return pUnconstrainedIndexes;
	}
	
	public ParserRule getUnconstrainedIndexesRule() {
		return getUnconstrainedIndexesAccess().getRule();
	}

	//ConstrainedIndexes:
	//	constrainedIndex+=DiscreteSubtypeDefinition (V constrainedIndex+=DiscreteSubtypeDefinition)*;
	public ConstrainedIndexesElements getConstrainedIndexesAccess() {
		return pConstrainedIndexes;
	}
	
	public ParserRule getConstrainedIndexesRule() {
		return getConstrainedIndexesAccess().getRule();
	}

	//DiscreteSubtypeDefinition:
	//	=> DiscreteRange
	//	| SubtypeIndication // TODO: Semantic rule: check Subtype_indication is discrete. 
	//;
	public DiscreteSubtypeDefinitionElements getDiscreteSubtypeDefinitionAccess() {
		return pDiscreteSubtypeDefinition;
	}
	
	public ParserRule getDiscreteSubtypeDefinitionRule() {
		return getDiscreteSubtypeDefinitionAccess().getRule();
	}

	//ComponentDefinition:
	//	aliased?=ALIASED_? (subtypeIndication=SubtypeIndication
	//	| anonymousAccessDefinition=AnonymousAccessDefinition);
	public ComponentDefinitionElements getComponentDefinitionAccess() {
		return pComponentDefinition;
	}
	
	public ParserRule getComponentDefinitionRule() {
		return getComponentDefinitionAccess().getRule();
	}

	//AnonymousAccessDefinition:
	//	optNullExclusion=OptNullExclusion accessDef=NotNullAccessDefinition;
	public AnonymousAccessDefinitionElements getAnonymousAccessDefinitionAccess() {
		return pAnonymousAccessDefinition;
	}
	
	public ParserRule getAnonymousAccessDefinitionRule() {
		return getAnonymousAccessDefinitionAccess().getRule();
	}

	//NotNullAccessDefinition:
	//	ACCESS_ (AccessToDataInstance
	//	| AccessToSubprogramDefinition);
	public NotNullAccessDefinitionElements getNotNullAccessDefinitionAccess() {
		return pNotNullAccessDefinition;
	}
	
	public ParserRule getNotNullAccessDefinitionRule() {
		return getNotNullAccessDefinitionAccess().getRule();
	}

	//AccessToDataInstance:
	//	constant=CONSTANT_? name=Name;
	public AccessToDataInstanceElements getAccessToDataInstanceAccess() {
		return pAccessToDataInstance;
	}
	
	public ParserRule getAccessToDataInstanceRule() {
		return getAccessToDataInstanceAccess().getRule();
	}

	//ParameterAndResultProfile:
	//	formalPart=FormalPart? RETURN_ (opt_nullExclusion=OptNullExclusion subtypeMark=Name // TODO: check this rule
	//	| anonymousAccessDefinition=AnonymousAccessDefinition);
	public ParameterAndResultProfileElements getParameterAndResultProfileAccess() {
		return pParameterAndResultProfile;
	}
	
	public ParserRule getParameterAndResultProfileRule() {
		return getParameterAndResultProfileAccess().getRule();
	}

	//FormalPart:
	//	PG parameterSpecifications+=ParameterSpecification (PV parameterSpecifications+=ParameterSpecification)* PD;
	public FormalPartElements getFormalPartAccess() {
		return pFormalPart;
	}
	
	public ParserRule getFormalPartRule() {
		return getFormalPartAccess().getRule();
	}

	//ParameterSpecification:
	//	definingIdentifiers=DefiningIdentifierList DP (mode=Mode optNullExclusion=OptNullExclusion subtypeMark=Name
	//	| anonymousAccessDefinition=AnonymousAccessDefinition) (DPE defaultExpression=Expression)?;
	public ParameterSpecificationElements getParameterSpecificationAccess() {
		return pParameterSpecification;
	}
	
	public ParserRule getParameterSpecificationRule() {
		return getParameterSpecificationAccess().getRule();
	}

	//Mode:
	//	{Mode} in?=IN_? out?=OUT_?;
	public ModeElements getModeAccess() {
		return pMode;
	}
	
	public ParserRule getModeRule() {
		return getModeAccess().getRule();
	}

	////Discrete_subtype_indication: TODO: To remove
	////      subtypeIndication=Subtype_indication
	////    ;
	//IntegerTypeDefinition:
	//	SignedIntegerTypeDefinition
	//	| ModularTypeDefinition;
	public IntegerTypeDefinitionElements getIntegerTypeDefinitionAccess() {
		return pIntegerTypeDefinition;
	}
	
	public ParserRule getIntegerTypeDefinitionRule() {
		return getIntegerTypeDefinitionAccess().getRule();
	}

	//SignedIntegerTypeDefinition:
	//	RANGE_ first=SimpleExpression PP last=SimpleExpression;
	public SignedIntegerTypeDefinitionElements getSignedIntegerTypeDefinitionAccess() {
		return pSignedIntegerTypeDefinition;
	}
	
	public ParserRule getSignedIntegerTypeDefinitionRule() {
		return getSignedIntegerTypeDefinitionAccess().getRule();
	}

	//ModularTypeDefinition:
	//	MOD_ staticExpression=Expression;
	public ModularTypeDefinitionElements getModularTypeDefinitionAccess() {
		return pModularTypeDefinition;
	}
	
	public ParserRule getModularTypeDefinitionRule() {
		return getModularTypeDefinitionAccess().getRule();
	}

	//EnumerationTypeDefinition:
	//	PG enumerationliteralspecifications+=EnumerationLiteralSpecification (V
	//	enumerationliteralspecifications+=EnumerationLiteralSpecification)* PD;
	public EnumerationTypeDefinitionElements getEnumerationTypeDefinitionAccess() {
		return pEnumerationTypeDefinition;
	}
	
	public ParserRule getEnumerationTypeDefinitionRule() {
		return getEnumerationTypeDefinitionAccess().getRule();
	}

	//EnumerationLiteralSpecification:
	//	IDENTIFIER
	//	| CHARACTER_LITERAL;
	public EnumerationLiteralSpecificationElements getEnumerationLiteralSpecificationAccess() {
		return pEnumerationLiteralSpecification;
	}
	
	public ParserRule getEnumerationLiteralSpecificationRule() {
		return getEnumerationLiteralSpecificationAccess().getRule();
	}

	//RecordTypeDefinition:
	//	(abstract?=ABSTRACT_? tagged?=TAGGED_)? limited?=LIMITED_? recordDefinition=RecordDefinition;
	public RecordTypeDefinitionElements getRecordTypeDefinitionAccess() {
		return pRecordTypeDefinition;
	}
	
	public ParserRule getRecordTypeDefinitionRule() {
		return getRecordTypeDefinitionAccess().getRule();
	}

	//RecordDefinition:
	//	RECORD_ (componentList=ComponentList
	//	| null=NULL_ PV) END_ RECORD_
	//	| null=NULL_ RECORD_;
	public RecordDefinitionElements getRecordDefinitionAccess() {
		return pRecordDefinition;
	}
	
	public ParserRule getRecordDefinitionRule() {
		return getRecordDefinitionAccess().getRule();
	}

	//ComponentList:
	//	(componentItems+=ComponentItem PV)* optVariantPart=OptVariantPart // TODO: this is not strict enough, look at original def to see how we can make this strict enough OR validation
	//;
	public ComponentListElements getComponentListAccess() {
		return pComponentList;
	}
	
	public ParserRule getComponentListRule() {
		return getComponentListAccess().getRule();
	}

	//OptVariantPart:
	//	{OptVariantPart} (variantPart=VariantPart PV)?;
	public OptVariantPartElements getOptVariantPartAccess() {
		return pOptVariantPart;
	}
	
	public ParserRule getOptVariantPartRule() {
		return getOptVariantPartAccess().getRule();
	}

	//ComponentItem:
	//	ComponentDeclaration
	//	| AspectClause // TODO: Check if it is really a RM's bug.
	//;
	public ComponentItemElements getComponentItemAccess() {
		return pComponentItem;
	}
	
	public ParserRule getComponentItemRule() {
		return getComponentItemAccess().getRule();
	}

	//ComponentDeclaration:
	//	definingIdentifiers=DefiningIdentifierList DP componentDefinition=ComponentDefinition (DPE
	//	defaultExpression=Expression)?;
	public ComponentDeclarationElements getComponentDeclarationAccess() {
		return pComponentDeclaration;
	}
	
	public ParserRule getComponentDeclarationRule() {
		return getComponentDeclarationAccess().getRule();
	}

	//DefiningIdentifierList:
	//	name+=IDENTIFIER (V name+=IDENTIFIER)*;
	public DefiningIdentifierListElements getDefiningIdentifierListAccess() {
		return pDefiningIdentifierList;
	}
	
	public ParserRule getDefiningIdentifierListRule() {
		return getDefiningIdentifierListAccess().getRule();
	}

	//AspectClause:
	//	FOR_ name=PATHNAME USE_ (expression=Expression
	//	// TODO: Check that the following syntactic constraint is satisfied:
	//	//  Local_name "'" attributeDesignator = Attribute_designator USE_ expression=Expression
	//	//  Local_name USE_ (enumerationAggregate=Enumeration_aggregate 
	//	| RECORD_ (mod=ModClause PV)? (componentClause+=ComponentClause PV)*
	//	END_ RECORD_
	//	| AT_ expression=Expression
	//	// TODO: Check that name is Direct_name for AT_ expression alt                   
	//);
	public AspectClauseElements getAspectClauseAccess() {
		return pAspectClause;
	}
	
	public ParserRule getAspectClauseRule() {
		return getAspectClauseAccess().getRule();
	}

	//ModClause:
	//	AT_ MOD_ mod=Expression;
	public ModClauseElements getModClauseAccess() {
		return pModClause;
	}
	
	public ParserRule getModClauseRule() {
		return getModClauseAccess().getRule();
	}

	//ComponentClause:
	//	localName=PATHIDENTIFIER AT_ position=Expression RANGE_ firstBit=SimpleExpression PP lastBit=SimpleExpression;
	public ComponentClauseElements getComponentClauseAccess() {
		return pComponentClause;
	}
	
	public ParserRule getComponentClauseRule() {
		return getComponentClauseAccess().getRule();
	}

	//VariantPart:
	//	CASE_ name=DIRECT_NAME IS_
	//	variants+=Variant+
	//	END_ CASE_;
	public VariantPartElements getVariantPartAccess() {
		return pVariantPart;
	}
	
	public ParserRule getVariantPartRule() {
		return getVariantPartAccess().getRule();
	}

	//Variant:
	//	WHEN_ discreteChoiceList=DiscreteChoiceList FLECHE componentList=ComponentList;
	public VariantElements getVariantAccess() {
		return pVariant;
	}
	
	public ParserRule getVariantRule() {
		return getVariantAccess().getRule();
	}

	//DiscreteChoiceList:
	//	discreteChoiceList+=DiscreteChoice (BV discreteChoiceList+=DiscreteChoice)*;
	public DiscreteChoiceListElements getDiscreteChoiceListAccess() {
		return pDiscreteChoiceList;
	}
	
	public ParserRule getDiscreteChoiceListRule() {
		return getDiscreteChoiceListAccess().getRule();
	}

	//RealTypeDefinition:
	//	FloatingPointDefinition
	//	| FixedPointDefinition;
	public RealTypeDefinitionElements getRealTypeDefinitionAccess() {
		return pRealTypeDefinition;
	}
	
	public ParserRule getRealTypeDefinitionRule() {
		return getRealTypeDefinitionAccess().getRule();
	}

	//FloatingPointDefinition:
	//	DIGITS_ digits=Expression realRangeSpecification=RealRangeSpecification?;
	public FloatingPointDefinitionElements getFloatingPointDefinitionAccess() {
		return pFloatingPointDefinition;
	}
	
	public ParserRule getFloatingPointDefinitionRule() {
		return getFloatingPointDefinitionAccess().getRule();
	}

	//RealRangeSpecification:
	//	RANGE_ lowerBound=SimpleExpression PP upperBound=SimpleExpression;
	public RealRangeSpecificationElements getRealRangeSpecificationAccess() {
		return pRealRangeSpecification;
	}
	
	public ParserRule getRealRangeSpecificationRule() {
		return getRealRangeSpecificationAccess().getRule();
	}

	//// TODO: semantic rule to check: lowerBound_ and upperBound_ are static 
	//FixedPointDefinition:
	//	DELTA_ delta=Expression (realRangeSpecification=RealRangeSpecification
	//	| DIGITS_ digits=Expression realRangeSpecification=RealRangeSpecification?);
	public FixedPointDefinitionElements getFixedPointDefinitionAccess() {
		return pFixedPointDefinition;
	}
	
	public ParserRule getFixedPointDefinitionRule() {
		return getFixedPointDefinitionAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	////
	////                       Grammar module : EXPRESSIONS.XTEXT 
	////
	/////////////////////////////////////////////////////////////////////////////////
	//Expression:
	//	relations+=Relation (booleanOperator+=BooleanOperator relations+=Relation)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//BooleanOperator:
	//	XOR_ | AND_ THEN_? | OR_ ELSE_?;
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return pBooleanOperator;
	}
	
	public ParserRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}

	//Relation:
	//	simpleExpression=SimpleExpression (relationalOperator=RelationalOperator subSimpleExpression=SimpleExpression
	//	| membership=Membership)?;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//Membership:
	//	not?=NOT_? IN_ interval=Interval;
	public MembershipElements getMembershipAccess() {
		return pMembership;
	}
	
	public ParserRule getMembershipRule() {
		return getMembershipAccess().getRule();
	}

	//Interval:
	//	=> Range | Name;
	public IntervalElements getIntervalAccess() {
		return pInterval;
	}
	
	public ParserRule getIntervalRule() {
		return getIntervalAccess().getRule();
	}

	//SimpleExpression:
	//	unaryAddingOperator=UnaryAddingOperator?
	//	terms+=Term (binaryAddingOperators+=BinaryAddingOperator terms+=Term)*;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}

	//Term:
	//	factors+=Factor (multiplyingOperators+=MultiplyingOperator factors+=Factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Factor:
	//	primary=Primary (ETOI2 exponent=Primary)?
	//	| abs?=ABS_ primary=Primary
	//	| not?=NOT_ primary=Primary;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}

	//Primary:
	//	NumericLiteral
	//	| Null
	//	| StringLiteral
	//	| ParenthesizedExpression
	//	| QualifiedName
	//	| Allocator;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//NumericLiteral:
	//	value=NUMERIC_LITERAL;
	public NumericLiteralElements getNumericLiteralAccess() {
		return pNumericLiteral;
	}
	
	public ParserRule getNumericLiteralRule() {
		return getNumericLiteralAccess().getRule();
	}

	//Null:
	//	value=NULL_;
	public NullElements getNullAccess() {
		return pNull;
	}
	
	public ParserRule getNullRule() {
		return getNullAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING_LITERAL;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//QualifiedName:
	//	name=Name qualifier=Qualifier?;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//// TODO: OPERATOR_SYMBOL is never followed by a Qualifier
	//ParenthesizedExpression:
	//	Aggregate;
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return pParenthesizedExpression;
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//Qualifier:
	//	QUOTE Aggregate // TODO: Semantic rule: Check Name is a subtype_mark 
	//;
	public QualifierElements getQualifierAccess() {
		return pQualifier;
	}
	
	public ParserRule getQualifierRule() {
		return getQualifierAccess().getRule();
	}

	//Allocator:
	//	NEW_ typeName=Name qualifier=Qualifier? // TODO : Semantic Rule : Subtype_indication is never followed by qualifier.       
	//;
	public AllocatorElements getAllocatorAccess() {
		return pAllocator;
	}
	
	public ParserRule getAllocatorRule() {
		return getAllocatorAccess().getRule();
	}

	//SubtypeIndication:
	//	opt_nullExclusion=OptNullExclusion subtypeMark=PATHIDENTIFIER opt_constraint=OptConstraint // TODO: Check semantic rule : 'NOT NULL' only for access type, Name. 
	//;
	public SubtypeIndicationElements getSubtypeIndicationAccess() {
		return pSubtypeIndication;
	}
	
	public ParserRule getSubtypeIndicationRule() {
		return getSubtypeIndicationAccess().getRule();
	}

	//OptNullExclusion:
	//	{OptNullExclusion} not_null=NullExclusion?;
	public OptNullExclusionElements getOptNullExclusionAccess() {
		return pOptNullExclusion;
	}
	
	public ParserRule getOptNullExclusionRule() {
		return getOptNullExclusionAccess().getRule();
	}

	//NullExclusion:
	//	NOT_ NULL_;
	public NullExclusionElements getNullExclusionAccess() {
		return pNullExclusion;
	}
	
	public ParserRule getNullExclusionRule() {
		return getNullExclusionAccess().getRule();
	}

	//OptConstraint:
	//	{OptConstraint} optConstraint=(CompositeConstraint
	//	| ScalarConstraint)?;
	public OptConstraintElements getOptConstraintAccess() {
		return pOptConstraint;
	}
	
	public ParserRule getOptConstraintRule() {
		return getOptConstraintAccess().getRule();
	}

	//ScalarConstraint:
	//	RangeConstraint
	//	| DigitsConstraint
	//	| DeltaConstraint;
	public ScalarConstraintElements getScalarConstraintAccess() {
		return pScalarConstraint;
	}
	
	public ParserRule getScalarConstraintRule() {
		return getScalarConstraintAccess().getRule();
	}

	//DigitsConstraint:
	//	DIGITS_ digits=SimpleExpression rangeConstraint=RangeConstraint?;
	public DigitsConstraintElements getDigitsConstraintAccess() {
		return pDigitsConstraint;
	}
	
	public ParserRule getDigitsConstraintRule() {
		return getDigitsConstraintAccess().getRule();
	}

	//DeltaConstraint:
	//	DELTA_ delta=SimpleExpression rangeConstraint=RangeConstraint?;
	public DeltaConstraintElements getDeltaConstraintAccess() {
		return pDeltaConstraint;
	}
	
	public ParserRule getDeltaConstraintRule() {
		return getDeltaConstraintAccess().getRule();
	}

	//RangeConstraint:
	//	RANGE_ Range;
	public RangeConstraintElements getRangeConstraintAccess() {
		return pRangeConstraint;
	}
	
	public ParserRule getRangeConstraintRule() {
		return getRangeConstraintAccess().getRule();
	}

	//// TODO: Check that it is composed either of Discriminant associations, 
	////       either of Discrete ranges 
	////       NB: the latter designates range of indexes in arrays.
	//CompositeConstraint:
	//	=> DiscriminantConstraint
	//	| IndexConstraint;
	public CompositeConstraintElements getCompositeConstraintAccess() {
		return pCompositeConstraint;
	}
	
	public ParserRule getCompositeConstraintRule() {
		return getCompositeConstraintAccess().getRule();
	}

	//DiscriminantConstraint:
	//	PG discriminantAssociation+=DiscriminantAssociation (V discriminantAssociation+=DiscriminantAssociation)* PD;
	public DiscriminantConstraintElements getDiscriminantConstraintAccess() {
		return pDiscriminantConstraint;
	}
	
	public ParserRule getDiscriminantConstraintRule() {
		return getDiscriminantConstraintAccess().getRule();
	}

	//IndexConstraint:
	//	PG discreteRange+=DiscreteRange (V discreteRange+=DiscreteRange)* PD;
	public IndexConstraintElements getIndexConstraintAccess() {
		return pIndexConstraint;
	}
	
	public ParserRule getIndexConstraintRule() {
		return getIndexConstraintAccess().getRule();
	}

	//DiscriminantAssociation:
	//	discriminantSelectors=DiscriminantSelectors? actualParameter=Expression;
	public DiscriminantAssociationElements getDiscriminantAssociationAccess() {
		return pDiscriminantAssociation;
	}
	
	public ParserRule getDiscriminantAssociationRule() {
		return getDiscriminantAssociationAccess().getRule();
	}

	//DiscriminantSelectors:
	//	discriminantSelectorName+=SelectorName (BV discriminantSelectorName+=SelectorName)* FLECHE;
	public DiscriminantSelectorsElements getDiscriminantSelectorsAccess() {
		return pDiscriminantSelectors;
	}
	
	public ParserRule getDiscriminantSelectorsRule() {
		return getDiscriminantSelectorsAccess().getRule();
	}

	//DiscreteRange:
	//	=> Range
	//	| SubtypeIndication;
	public DiscreteRangeElements getDiscreteRangeAccess() {
		return pDiscreteRange;
	}
	
	public ParserRule getDiscreteRangeRule() {
		return getDiscreteRangeAccess().getRule();
	}

	//// TODO: Check the following syntactic rule 
	////       (because this syntactic rule is unified with record aggregate)
	////       NULL_ RECORD_ is not allowed for an array aggregate
	////Component_association_list: {Record_component_association_list}
	////          (componentAssociation += Component_association (V componentAssociation += Component_association)*
	////        | nullRecord?=NULL_ RECORD_)
	////        ;
	//// TODO: Check the following syntactic rule :
	////       positional and named associations are not mixed
	////       Other syntactic rule to check : "<>" must be associated with a non empty
	////       componentChoiceList. 
	////Component_association:{Component_association}
	////         (=> componentsChoiceList=Component_choice_list FLECHE)? 
	////         (expression = Expression | box?=BOIT)
	////        ;
	//// TODO: Unified with Array aggregate
	////       (i.e : Selector_name has been replaced by Dscrete_choice in Component_choice_list).
	////       To balance this, check the following syntactic rule :
	////       Discrete_range is equivalent to a Selector_name only for a record aggregate
	//ComponentChoiceList:
	//	componentSelectorName+=SelectorName (BV componentSelectorName+=SelectorName)*
	//	| others?=OTHERS_;
	public ComponentChoiceListElements getComponentChoiceListAccess() {
		return pComponentChoiceList;
	}
	
	public ParserRule getComponentChoiceListRule() {
		return getComponentChoiceListAccess().getRule();
	}

	//DiscreteChoice:
	//	=> Range
	//	| => Expression // TODO: Could reduced to a name that is a subtype_indication
	//	| SubtypeIndication
	//	| {DiscreteChoice} OTHERS_;
	public DiscreteChoiceElements getDiscreteChoiceAccess() {
		return pDiscreteChoice;
	}
	
	public ParserRule getDiscreteChoiceRule() {
		return getDiscreteChoiceAccess().getRule();
	}

	//// TODO : Because array aggregate rules are unified with record aggregate rules
	////        check that an array aggregate is not preceded by Ancestor_part WITH_ 
	//Aggregate:
	//	PG (=> ArrayAggregate
	//	| => RecordAggregate
	//	| ExtensionAggregate) PD;
	public AggregateElements getAggregateAccess() {
		return pAggregate;
	}
	
	public ParserRule getAggregateRule() {
		return getAggregateAccess().getRule();
	}

	//RecordAggregate:
	//	RecordComponentAssociationList;
	public RecordAggregateElements getRecordAggregateAccess() {
		return pRecordAggregate;
	}
	
	public ParserRule getRecordAggregateRule() {
		return getRecordAggregateAccess().getRule();
	}

	//RecordComponentAssociationList:
	//	recordComponentAssociation+=RecordComponentAssociation (V recordComponentAssociation+=RecordComponentAssociation)*
	//	| nullRecord?=NULL_ RECORD_;
	public RecordComponentAssociationListElements getRecordComponentAssociationListAccess() {
		return pRecordComponentAssociationList;
	}
	
	public ParserRule getRecordComponentAssociationListRule() {
		return getRecordComponentAssociationListAccess().getRule();
	}

	//RecordComponentAssociation:
	//	=> InitializedComponents // TODO: Here is an ambiguity with Positional_array_aggregate for singleton '( value )'
	//	| UninitializedComponents;
	public RecordComponentAssociationElements getRecordComponentAssociationAccess() {
		return pRecordComponentAssociation;
	}
	
	public ParserRule getRecordComponentAssociationRule() {
		return getRecordComponentAssociationAccess().getRule();
	}

	//// TODO: So, disambiguate by type checking thanks to the inferred type.
	//InitializedComponents:
	//	(componentChoiceList+=ComponentChoiceList FLECHE)? value=Expression;
	public InitializedComponentsElements getInitializedComponentsAccess() {
		return pInitializedComponents;
	}
	
	public ParserRule getInitializedComponentsRule() {
		return getInitializedComponentsAccess().getRule();
	}

	//UninitializedComponents:
	//	componentChoiceList+=ComponentChoiceList FLECHE box?=BOIT;
	public UninitializedComponentsElements getUninitializedComponentsAccess() {
		return pUninitializedComponents;
	}
	
	public ParserRule getUninitializedComponentsRule() {
		return getUninitializedComponentsAccess().getRule();
	}

	//ExtensionAggregate:
	//	ancestorPart=AncestorPart WITH_ recordComponentAssociationList=RecordComponentAssociationList;
	public ExtensionAggregateElements getExtensionAggregateAccess() {
		return pExtensionAggregate;
	}
	
	public ParserRule getExtensionAggregateRule() {
		return getExtensionAggregateAccess().getRule();
	}

	//ArrayAggregate:
	//	=> PositionalArrayAggregate
	//	| NamedArrayAggregate;
	public ArrayAggregateElements getArrayAggregateAccess() {
		return pArrayAggregate;
	}
	
	public ParserRule getArrayAggregateRule() {
		return getArrayAggregateAccess().getRule();
	}

	//PositionalArrayAggregate:
	//	initialValues+=Expression (V initialValues+=Expression)+ (V OTHERS_ FLECHE (othersValue=Expression |
	//	othersBox?=BOIT))? // So, disambiguate by type checking thanks to the inferred type.
	//;
	public PositionalArrayAggregateElements getPositionalArrayAggregateAccess() {
		return pPositionalArrayAggregate;
	}
	
	public ParserRule getPositionalArrayAggregateRule() {
		return getPositionalArrayAggregateAccess().getRule();
	}

	//NamedArrayAggregate:
	//	arrayComponentAssociation+=ArrayComponentAssociation (V arrayComponentAssociation+=ArrayComponentAssociation)* // TODO: Here is an ambiguity with Record_component_association_list
	//;
	public NamedArrayAggregateElements getNamedArrayAggregateAccess() {
		return pNamedArrayAggregate;
	}
	
	public ParserRule getNamedArrayAggregateRule() {
		return getNamedArrayAggregateAccess().getRule();
	}

	//ArrayComponentAssociation:
	//	discreteChoiceList=DiscreteChoiceList FLECHE (expression=Expression | box?=BOIT);
	public ArrayComponentAssociationElements getArrayComponentAssociationAccess() {
		return pArrayComponentAssociation;
	}
	
	public ParserRule getArrayComponentAssociationRule() {
		return getArrayComponentAssociationAccess().getRule();
	}

	//AncestorPart:
	//	Expression // TODO: Expression could be a the name of a subtype
	//	//       check this semantic rule.
	//	// | Name TODO: Remove this rule
	//;
	public AncestorPartElements getAncestorPartAccess() {
		return pAncestorPart;
	}
	
	public ParserRule getAncestorPartRule() {
		return getAncestorPartAccess().getRule();
	}

	//PATHIDENTIFIER:
	//	(IDENTIFIER P)* IDENTIFIER;
	public PATHIDENTIFIERElements getPATHIDENTIFIERAccess() {
		return pPATHIDENTIFIER;
	}
	
	public ParserRule getPATHIDENTIFIERRule() {
		return getPATHIDENTIFIERAccess().getRule();
	}

	//PATHNAME:
	//	(IDENTIFIER P)* DIRECT_NAME;
	public PATHNAMEElements getPATHNAMEAccess() {
		return pPATHNAME;
	}
	
	public ParserRule getPATHNAMERule() {
		return getPATHNAMEAccess().getRule();
	}

	//DIRECT_NAME:
	//	IDENTIFIER
	//	| OPERATOR_SYMBOL;
	public DIRECT_NAMEElements getDIRECT_NAMEAccess() {
		return pDIRECT_NAME;
	}
	
	public ParserRule getDIRECT_NAMERule() {
		return getDIRECT_NAMEAccess().getRule();
	}

	//Name:
	//	name=SelectorName primaryName=PrimaryName?;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//SelectorName:
	//	IDENTIFIER
	//	| CHARACTER_LITERAL
	//	| OPERATOR_SYMBOL;
	public SelectorNameElements getSelectorNameAccess() {
		return pSelectorName;
	}
	
	public ParserRule getSelectorNameRule() {
		return getSelectorNameAccess().getRule();
	}

	//PrimaryName:
	//	{PrimaryName} (PG parameterAssociation+=ParameterAssociation (V parameterAssociation+=ParameterAssociation)* PD
	//	primaryName=PrimaryName?
	//	| P (ALL_ | name=Name) | QUOTE attributeDesignator=AttributeDesignator);
	public PrimaryNameElements getPrimaryNameAccess() {
		return pPrimaryName;
	}
	
	public ParserRule getPrimaryNameRule() {
		return getPrimaryNameAccess().getRule();
	}

	//ParameterAssociation:
	//	(selectorName=SelectorName FLECHE)? parameterEffectiveValue=ParameterEffectiveValue;
	public ParameterAssociationElements getParameterAssociationAccess() {
		return pParameterAssociation;
	}
	
	public ParserRule getParameterAssociationRule() {
		return getParameterAssociationAccess().getRule();
	}

	//ParameterEffectiveValue:
	//	=> Range // Note : Discrete_range - Subtype_indication  
	//	| Expression // TODO: check Could be a Name that is a Subtype_indication.
	//	//       then, It must be checked by a semantic rule.
	//	//                           | => subtypeIndication = Subtype_indication	            // TODO: To delete very probably given what is said just above.           	                          
	//;
	public ParameterEffectiveValueElements getParameterEffectiveValueAccess() {
		return pParameterEffectiveValue;
	}
	
	public ParserRule getParameterEffectiveValueRule() {
		return getParameterEffectiveValueAccess().getRule();
	}

	//AttributeDesignator:
	//	{AttributeDesignator} (IDENTIFIER staticExpression=ParenthesizedExpression?
	//	| ACCESS_
	//	| DELTA_
	//	| DIGITS_);
	public AttributeDesignatorElements getAttributeDesignatorAccess() {
		return pAttributeDesignator;
	}
	
	public ParserRule getAttributeDesignatorRule() {
		return getAttributeDesignatorAccess().getRule();
	}

	//Range:
	//	=> EntityRange
	//	| ExplicitRange;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	//EntityRange:
	//	name=Name QUOTE RANGE_ (PG index=Expression PD)?;
	public EntityRangeElements getEntityRangeAccess() {
		return pEntityRange;
	}
	
	public ParserRule getEntityRangeRule() {
		return getEntityRangeAccess().getRule();
	}

	//ExplicitRange:
	//	first=SimpleExpression PP last=SimpleExpression;
	public ExplicitRangeElements getExplicitRangeAccess() {
		return pExplicitRange;
	}
	
	public ParserRule getExplicitRangeRule() {
		return getExplicitRangeAccess().getRule();
	}

	//BinaryAddingOperator:
	//	PLUS
	//	| MOINS
	//	| ET_COM;
	public BinaryAddingOperatorElements getBinaryAddingOperatorAccess() {
		return pBinaryAddingOperator;
	}
	
	public ParserRule getBinaryAddingOperatorRule() {
		return getBinaryAddingOperatorAccess().getRule();
	}

	//UnaryAddingOperator:
	//	PLUS
	//	| MOINS;
	public UnaryAddingOperatorElements getUnaryAddingOperatorAccess() {
		return pUnaryAddingOperator;
	}
	
	public ParserRule getUnaryAddingOperatorRule() {
		return getUnaryAddingOperatorAccess().getRule();
	}

	//MultiplyingOperator:
	//	ETOI
	//	| SLASH
	//	| MOD_
	//	| REM_;
	public MultiplyingOperatorElements getMultiplyingOperatorAccess() {
		return pMultiplyingOperator;
	}
	
	public ParserRule getMultiplyingOperatorRule() {
		return getMultiplyingOperatorAccess().getRule();
	}

	//RelationalOperator:
	//	EG
	//	| DIFF
	//	| INF
	//	| INFE
	//	| SUP
	//	| SUPE;
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return pRelationalOperator;
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//terminal ABORT_:
	//	"abort";
	public TerminalRule getABORT_Rule() {
		return tABORT_;
	} 

	//terminal ABS_:
	//	"abs";
	public TerminalRule getABS_Rule() {
		return tABS_;
	} 

	//terminal ABSTRACT_:
	//	"abstract";
	public TerminalRule getABSTRACT_Rule() {
		return tABSTRACT_;
	} 

	//terminal ACCEPT_:
	//	"accept";
	public TerminalRule getACCEPT_Rule() {
		return tACCEPT_;
	} 

	//terminal ACCESS_:
	//	"access";
	public TerminalRule getACCESS_Rule() {
		return tACCESS_;
	} 

	//terminal ALIASED_:
	//	"aliased";
	public TerminalRule getALIASED_Rule() {
		return tALIASED_;
	} 

	//terminal ALL_:
	//	"all";
	public TerminalRule getALL_Rule() {
		return tALL_;
	} 

	//terminal AND_:
	//	"and";
	public TerminalRule getAND_Rule() {
		return tAND_;
	} 

	//terminal ARRAY_:
	//	"array";
	public TerminalRule getARRAY_Rule() {
		return tARRAY_;
	} 

	//terminal AT_:
	//	"at";
	public TerminalRule getAT_Rule() {
		return tAT_;
	} 

	//terminal BEGIN_:
	//	"begin";
	public TerminalRule getBEGIN_Rule() {
		return tBEGIN_;
	} 

	//terminal BODY_:
	//	"body";
	public TerminalRule getBODY_Rule() {
		return tBODY_;
	} 

	//terminal CASE_:
	//	"case";
	public TerminalRule getCASE_Rule() {
		return tCASE_;
	} 

	//terminal CONSTANT_:
	//	"constant";
	public TerminalRule getCONSTANT_Rule() {
		return tCONSTANT_;
	} 

	//terminal DECLARE_:
	//	"declare";
	public TerminalRule getDECLARE_Rule() {
		return tDECLARE_;
	} 

	//terminal DELAY_:
	//	"delay";
	public TerminalRule getDELAY_Rule() {
		return tDELAY_;
	} 

	//terminal DELTA_:
	//	"delta";
	public TerminalRule getDELTA_Rule() {
		return tDELTA_;
	} 

	//terminal DIGITS_:
	//	"digits";
	public TerminalRule getDIGITS_Rule() {
		return tDIGITS_;
	} 

	//terminal DO_:
	//	"do";
	public TerminalRule getDO_Rule() {
		return tDO_;
	} 

	//terminal ELSE_:
	//	"else";
	public TerminalRule getELSE_Rule() {
		return tELSE_;
	} 

	//terminal ELSIF_:
	//	"elsif";
	public TerminalRule getELSIF_Rule() {
		return tELSIF_;
	} 

	//terminal END_:
	//	"end";
	public TerminalRule getEND_Rule() {
		return tEND_;
	} 

	//terminal ENTRY_:
	//	"entry";
	public TerminalRule getENTRY_Rule() {
		return tENTRY_;
	} 

	//terminal EXCEPTION_:
	//	"exception";
	public TerminalRule getEXCEPTION_Rule() {
		return tEXCEPTION_;
	} 

	//terminal EXIT_:
	//	"exit";
	public TerminalRule getEXIT_Rule() {
		return tEXIT_;
	} 

	//terminal FOR_:
	//	"for";
	public TerminalRule getFOR_Rule() {
		return tFOR_;
	} 

	//terminal FUNCTION_:
	//	"function";
	public TerminalRule getFUNCTION_Rule() {
		return tFUNCTION_;
	} 

	//terminal GENERIC_:
	//	"generic";
	public TerminalRule getGENERIC_Rule() {
		return tGENERIC_;
	} 

	//terminal GOTO_:
	//	"goto";
	public TerminalRule getGOTO_Rule() {
		return tGOTO_;
	} 

	//terminal IF_:
	//	"if";
	public TerminalRule getIF_Rule() {
		return tIF_;
	} 

	//terminal IN_:
	//	"in";
	public TerminalRule getIN_Rule() {
		return tIN_;
	} 

	//terminal INTERFACE_:
	//	"interface";
	public TerminalRule getINTERFACE_Rule() {
		return tINTERFACE_;
	} 

	//terminal IS_:
	//	"is";
	public TerminalRule getIS_Rule() {
		return tIS_;
	} 

	//terminal LIMITED_:
	//	"limited";
	public TerminalRule getLIMITED_Rule() {
		return tLIMITED_;
	} 

	//terminal LOOP_:
	//	"loop";
	public TerminalRule getLOOP_Rule() {
		return tLOOP_;
	} 

	//terminal MOD_:
	//	"mod";
	public TerminalRule getMOD_Rule() {
		return tMOD_;
	} 

	//terminal NEW_:
	//	"new";
	public TerminalRule getNEW_Rule() {
		return tNEW_;
	} 

	//terminal NOT_:
	//	"not";
	public TerminalRule getNOT_Rule() {
		return tNOT_;
	} 

	//terminal NULL_:
	//	"null";
	public TerminalRule getNULL_Rule() {
		return tNULL_;
	} 

	//terminal OF_:
	//	"of";
	public TerminalRule getOF_Rule() {
		return tOF_;
	} 

	//terminal OR_:
	//	"or";
	public TerminalRule getOR_Rule() {
		return tOR_;
	} 

	//terminal OTHERS_:
	//	"others";
	public TerminalRule getOTHERS_Rule() {
		return tOTHERS_;
	} 

	//terminal OUT_:
	//	"out";
	public TerminalRule getOUT_Rule() {
		return tOUT_;
	} 

	//terminal OVERRIDING_:
	//	"overriding";
	public TerminalRule getOVERRIDING_Rule() {
		return tOVERRIDING_;
	} 

	//terminal PACKAGE_:
	//	"package";
	public TerminalRule getPACKAGE_Rule() {
		return tPACKAGE_;
	} 

	//terminal PRAGMA_:
	//	"pragma";
	public TerminalRule getPRAGMA_Rule() {
		return tPRAGMA_;
	} 

	//terminal PRIVATE_:
	//	"private";
	public TerminalRule getPRIVATE_Rule() {
		return tPRIVATE_;
	} 

	//terminal PROCEDURE_:
	//	"procedure";
	public TerminalRule getPROCEDURE_Rule() {
		return tPROCEDURE_;
	} 

	//terminal PROTECTED_:
	//	"protected";
	public TerminalRule getPROTECTED_Rule() {
		return tPROTECTED_;
	} 

	//terminal RAISE_:
	//	"raise";
	public TerminalRule getRAISE_Rule() {
		return tRAISE_;
	} 

	//terminal RANGE_:
	//	"range";
	public TerminalRule getRANGE_Rule() {
		return tRANGE_;
	} 

	//terminal RECORD_:
	//	"record";
	public TerminalRule getRECORD_Rule() {
		return tRECORD_;
	} 

	//terminal REM_:
	//	"rem";
	public TerminalRule getREM_Rule() {
		return tREM_;
	} 

	//terminal RENAMES_:
	//	"renames";
	public TerminalRule getRENAMES_Rule() {
		return tRENAMES_;
	} 

	//terminal REQUEUE_:
	//	"requeue";
	public TerminalRule getREQUEUE_Rule() {
		return tREQUEUE_;
	} 

	//terminal RETURN_:
	//	"return";
	public TerminalRule getRETURN_Rule() {
		return tRETURN_;
	} 

	//terminal REVERSE_:
	//	"reverse";
	public TerminalRule getREVERSE_Rule() {
		return tREVERSE_;
	} 

	//terminal SELECT_:
	//	"select";
	public TerminalRule getSELECT_Rule() {
		return tSELECT_;
	} 

	//terminal SEPARATE_:
	//	"separate";
	public TerminalRule getSEPARATE_Rule() {
		return tSEPARATE_;
	} 

	//terminal SUBTYPE_:
	//	"subtype";
	public TerminalRule getSUBTYPE_Rule() {
		return tSUBTYPE_;
	} 

	//terminal SYNCHRONIZED_:
	//	"synchronized";
	public TerminalRule getSYNCHRONIZED_Rule() {
		return tSYNCHRONIZED_;
	} 

	//terminal TAGGED_:
	//	"tagged";
	public TerminalRule getTAGGED_Rule() {
		return tTAGGED_;
	} 

	//terminal TASK_:
	//	"task";
	public TerminalRule getTASK_Rule() {
		return tTASK_;
	} 

	//terminal TERMINATE_:
	//	"terminate";
	public TerminalRule getTERMINATE_Rule() {
		return tTERMINATE_;
	} 

	//terminal THEN_:
	//	"then";
	public TerminalRule getTHEN_Rule() {
		return tTHEN_;
	} 

	//terminal TYPE_:
	//	"type";
	public TerminalRule getTYPE_Rule() {
		return tTYPE_;
	} 

	//terminal UNTIL_:
	//	"until";
	public TerminalRule getUNTIL_Rule() {
		return tUNTIL_;
	} 

	//terminal USE_:
	//	"use";
	public TerminalRule getUSE_Rule() {
		return tUSE_;
	} 

	//terminal WHEN_:
	//	"when";
	public TerminalRule getWHEN_Rule() {
		return tWHEN_;
	} 

	//terminal WHILE_:
	//	"while";
	public TerminalRule getWHILE_Rule() {
		return tWHILE_;
	} 

	//terminal WITH_:
	//	"with";
	public TerminalRule getWITH_Rule() {
		return tWITH_;
	} 

	//terminal XOR_:
	//	"xor";
	public TerminalRule getXOR_Rule() {
		return tXOR_;
	} 

	//terminal NUMERIC_LITERAL:
	//	DECIMAL_LITERAL
	//	| BASED_LITERAL;
	public TerminalRule getNUMERIC_LITERALRule() {
		return tNUMERIC_LITERAL;
	} 

	//terminal fragment DECIMAL_LITERAL:
	//	NUMERAL (P NUMERAL)? EXPONENT?;
	public TerminalRule getDECIMAL_LITERALRule() {
		return tDECIMAL_LITERAL;
	} 

	//terminal fragment NUMERAL:
	//	DIGIT ('_'? DIGIT)*;
	public TerminalRule getNUMERALRule() {
		return tNUMERAL;
	} 

	//terminal WS:
	//	'\\u0020' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal IDENTIFIER:
	//	'^'
	//	//IDENTIFIER_START (IDENTIFIER_START | IDENTIFIER_EXTEND)*
	//;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	} 

	//terminal fragment IDENTIFIER_START:
	//	LETTER_UPPERCASE
	//	| LETTER_LOWERCASE
	//	| LETTER_TITLECASE
	//	| LETTER_MODIFIER
	//	//| LETTER_OTHER  //TODO: Fix it and uncomment
	//	| NUMBER_LETTER;
	public TerminalRule getIDENTIFIER_STARTRule() {
		return tIDENTIFIER_START;
	} 

	//terminal fragment LETTER_UPPERCASE:
	//	'A'..'Z';
	public TerminalRule getLETTER_UPPERCASERule() {
		return tLETTER_UPPERCASE;
	} 

	//terminal fragment LETTER_LOWERCASE:
	//	'a'..'z';
	public TerminalRule getLETTER_LOWERCASERule() {
		return tLETTER_LOWERCASE;
	} 

	//terminal fragment LETTER_TITLECASE:
	//	'\\u01C5' | '\\u01C8' | '\\u01CB' | '\\u01F2' | '\\u1F88'..'\\u1F8F' |
	//	'\\u1F98'..'\\u1F9F' | '\\u1FA8'..'\\u1FAF' | '\\u1FBC' | '\\u1FCC' |
	//	'\\u1FFC';
	public TerminalRule getLETTER_TITLECASERule() {
		return tLETTER_TITLECASE;
	} 

	//terminal fragment LETTER_MODIFIER:
	//	'\\u02B0'..'\\u02C1' | '\\u02C6'..'\\u02D1' | '\\u02E0'..'\\u02E4' |
	//	'\\u02EC' | '\\u02EE' | '\\u0374' | '\\u037A' | '\\u0559' | '\\u0640' |
	//	'\\u06E5' | '\\u06E6' | '\\u07F4' | '\\u07F5' | '\\u07FA' | '\\u081A' |
	//	'\\u0824' | '\\u0828' | '\\u0971' | '\\u0E46' | '\\u0EC6' | '\\u10FC' |
	//	'\\u17D7' | '\\u1843' | '\\u1AA7' | '\\u1C78'..'\\u1C7D' |
	//	'\\u1D2C'..'\\u1D6A' | '\\u1D78' | '\\u1D9B'..'\\u1DBF' | '\\u2071' |
	//	'\\u207F' | '\\u2090'..'\\u209C' | '\\u2C7C' | '\\u2C7D' | '\\u2D6F' |
	//	'\\u2E2F' | '\\u3005' | '\\u3031'..'\\u3035' | '\\u303B' | '\\u309D' |
	//	'\\u309E' | '\\u30FC'..'\\u30FE' | '\\uA015' | '\\uA4F8'..'\\uA4FD' |
	//	'\\uA60C' | '\\uA67F' | '\\uA717'..'\\uA71F' | '\\uA770' | '\\uA788' |
	//	'\\uA7F8' | '\\uA7F9' | '\\uA9CF' | '\\uAA70' | '\\uAADD' | '\\uAAF3' |
	//	'\\uAAF4' | '\\uFF70' | '\\uFF9E' | '\\uFF9F' //| '\\u16F93' .. '\\u16F9F' is not accepted by ANTLR. TODO: See what to do
	//;
	public TerminalRule getLETTER_MODIFIERRule() {
		return tLETTER_MODIFIER;
	} 

	//terminal fragment LETTER_OTHER:
	//	'\\u00AA' | '\\u00BA' | '\\u01BB' | '\\u01C0' | '\\u01C3' | '\\u0294' |
	//	'\\u05D0' | '\\u05EA' | '\\u05F0' | '\\u05F2' | '\\u0620' | '\\u063F' | '\\u0641' | '\\u064A' | '\\u066E' | '\\u066F' |
	//	'\\u0671' | '\\u06D3' |
	//	'\\u06D5' | '\\u06EE' | '\\u06EF' | '\\u06FA' | '\\u06FC' | '\\u06FF' | '\\u0710' | '\\u0712' | '\\u072F' |
	//	'\\u074D' | '\\u07A5' | '\\u07B1' | '\\u07CA' | '\\u07EA' | '\\u0800' | '\\u0815' | '\\u0840' | '\\u0858' | '\\u08A0' |
	//	'\\u08A2' | '\\u08AC' | '\\u0904' | '\\u0939' | '\\u093D' | '\\u0950' | '\\u0958' | '\\u0961' | '\\u0972' | '\\u0977' |
	//	'\\u0979' | '\\u097F' | '\\u0985' | '\\u098C' | '\\u098F' | '\\u0990' | '\\u0993' | '\\u09A8' | '\\u09AA' | '\\u09B0' |
	//	'\\u09B2' |
	//	'\\u09B6' | '\\u09B9' | '\\u09BD' | '\\u09CE' | '\\u09DC' | '\\u09DD' | '\\u09DF' | '\\u09E1' | '\\u09F0' | '\\u09F1' |
	//	'\\u0A05' | '\\u0A0A' | '\\u0A0F' | '\\u0A10' | '\\u0A13' | '\\u0A28' | '\\u0A2A' | '\\u0A30' | '\\u0A32' | '\\u0A33' |
	//	'\\u0A35' | '\\u0A36' |
	//	'\\u0A38' | '\\u0A39' | '\\u0A59' | '\\u0A5C' | '\\u0A5E' | '\\u0A72' | '\\u0A74' | '\\u0A85' | '\\u0A8D' | '\\u0A8F' |
	//	'\\u0A91' |
	//	'\\u0A93' | '\\u0AA8' | '\\u0AAA' | '\\u0AB0' | '\\u0AB2' | '\\u0AB3' | '\\u0AB5' | '\\u0AB9' | '\\u0ABD' | '\\u0AD0' |
	//	'\\u0AE0' | '\\u0AE1' | '\\u0B05' | '\\u0B0C' | '\\u0B0F' | '\\u0B10' | '\\u0B13' | '\\u0B28' | '\\u0B2A' | '\\u0B30' |
	//	'\\u0B32' | '\\u0B33' |
	//	'\\u0B35' | '\\u0B39' | '\\u0B3D' | '\\u0B5C' | '\\u0B5D' | '\\u0B5F' | '\\u0B61' | '\\u0B71' | '\\u0B83' |
	//	'\\u0B85' | '\\u0B8A' | '\\u0B8E' | '\\u0B90' | '\\u0B92' | '\\u0B95' | '\\u0B99' | '\\u0B9A' | '\\u0B9C' | '\\u0B9E' |
	//	'\\u0B9F' |
	//	'\\u0BA3' | '\\u0BA4' | '\\u0BA8' | '\\u0BAA' | '\\u0BAE' | '\\u0BB9' | '\\u0BD0' | '\\u0C05' | '\\u0C0C' | '\\u0C0E' |
	//	'\\u0C10' |
	//	'\\u0C12' | '\\u0C28' | '\\u0C2A' | '\\u0C33' | '\\u0C35' | '\\u0C39' | '\\u0C3D' | '\\u0C58' | '\\u0C59' | '\\u0C60' |
	//	'\\u0C61' |
	//	'\\u0C85' | '\\u0C8C' | '\\u0C8E' | '\\u0C90' | '\\u0C92' | '\\u0CA8' | '\\u0CAA' | '\\u0CB3' | '\\u0CB5' | '\\u0CB9' |
	//	'\\u0CBD' |
	//	'\\u0CDE' | '\\u0CE0' | '\\u0CE1' | '\\u0CF1' | '\\u0CF2' | '\\u0D05' | '\\u0D0C' | '\\u0D0E' | '\\u0D10' | '\\u0D12' |
	//	'\\u0D3A' |
	//	'\\u0D3D' | '\\u0D4E' | '\\u0D60' | '\\u0D61' | '\\u0D7A' | '\\u0D7F' | '\\u0D85' | '\\u0D96' | '\\u0D9A' | '\\u0DB1' |
	//	'\\u0DB3' | '\\u0DBB' | '\\u0DBD' | '\\u0DC0' | '\\u0DC6' | '\\u0E01' | '\\u0E30' | '\\u0E32' | '\\u0E33' | '\\u0E40' |
	//	'\\u0E45' |
	//	'\\u0E81' | '\\u0E82' | '\\u0E84' | '\\u0E87' | '\\u0E88' | '\\u0E8A' | '\\u0E8D' | '\\u0E94' | '\\u0E97' |
	//	'\\u0E99' | '\\u0E9F' | '\\u0EA1' | '\\u0EA3' | '\\u0EA5' | '\\u0EA7' | '\\u0EAA' | '\\u0EAB' | '\\u0EAD' | '\\u0EB0' |
	//	'\\u0EB2' | '\\u0EB3' | '\\u0EBD' | '\\u0EC0' | '\\u0EC4' | '\\u0EDC' | '\\u0EDF' | '\\u0F00' | '\\u0F40' | '\\u0F47' |
	//	'\\u0F49' | '\\u0F6C' | '\\u0F88' | '\\u0F8C' | '\\u1000' | '\\u102A' | '\\u103F' | '\\u1050' | '\\u1055' | '\\u105A' |
	//	'\\u105D' |
	//	'\\u1061' | '\\u1065' | '\\u1066' | '\\u106E' | '\\u1070' | '\\u1075' | '\\u1081' | '\\u108E' | '\\u10D0' | '\\u10FA' |
	//	'\\u10FD' | '\\u1248' | '\\u124A' | '\\u124D' | '\\u1250' | '\\u1256' | '\\u1258' | '\\u125A' | '\\u125D' | '\\u1260' |
	//	'\\u1288' |
	//	'\\u128A' | '\\u128D' | '\\u1290' | '\\u12B0' | '\\u12B2' | '\\u12B5' | '\\u12B8' | '\\u12BE' | '\\u12C0' | '\\u12C2' |
	//	'\\u12C5' |
	//	'\\u12C8' | '\\u12D6' | '\\u12D8' | '\\u1310' | '\\u1312' | '\\u1315' | '\\u1318' | '\\u135A' | '\\u1380' | '\\u138F' |
	//	'\\u13A0' | '\\u13F4' |
	//	'\\u1401' | '\\u166C' | '\\u166F' | '\\u167F' | '\\u1681' | '\\u169A' | '\\u16A0' | '\\u16EA' | '\\u1700' | '\\u170C' |
	//	'\\u170E' | '\\u1711' |
	//	'\\u1720' | '\\u1731' | '\\u1740' | '\\u1751' | '\\u1760' | '\\u176C' | '\\u176E' | '\\u1770' | '\\u1780' | '\\u17B3' |
	//	'\\u17DC' |
	//	'\\u1820' | '\\u1842' | '\\u1844' | '\\u1877' | '\\u1880' | '\\u18A8' | '\\u18AA' | '\\u18B0' | '\\u18F5' | '\\u1900' |
	//	'\\u191C' |
	//	'\\u1950' | '\\u196D' | '\\u1970' | '\\u1974' | '\\u1980' | '\\u19AB' | '\\u19C1' | '\\u19C7' | '\\u1A00' | '\\u1A16' |
	//	'\\u1A20' | '\\u1A54' |
	//	'\\u1B05' | '\\u1B33' | '\\u1B45' | '\\u1B4B' | '\\u1B83' | '\\u1BA0' | '\\u1BAE' | '\\u1BAF' | '\\u1BBA' | '\\u1BE5' |
	//	'\\u1C00' | '\\u1C23' |
	//	'\\u1C4D' | '\\u1C4F' | '\\u1C5A' | '\\u1C77' | '\\u1CE9' | '\\u1CEC' | '\\u1CEE' | '\\u1CF1' | '\\u1CF5' | '\\u1CF6' |
	//	'\\u2135' | '\\u2138' |
	//	'\\u2D30' | '\\u2D67' | '\\u2D80' | '\\u2D96' | '\\u2DA0' | '\\u2DA6' | '\\u2DA8' | '\\u2DAE' | '\\u2DB0' | '\\u2DB6' |
	//	'\\u2DB8' | '\\u2DBE' |
	//	'\\u2DC0' | '\\u2DC6' | '\\u2DC8' | '\\u2DCE' | '\\u2DD0' | '\\u2DD6' | '\\u2DD8' | '\\u2DDE' | '\\u3006' | '\\u303C' |
	//	'\\u3041' | '\\u3096' | '\\u309F' | '\\u30A1' | '\\u30FA' | '\\u30FF' | '\\u3105' | '\\u312D' | '\\u3131' | '\\u318E' |
	//	'\\u31A0' | '\\u31BA' | '\\u31F0' | '\\u31FF' | '\\u3400' | '\\u4DB5' | '\\u4E00' | '\\u9FCC' |
	//	'\\uA000' | '\\uA014' | '\\uA016' | '\\uA48C' | '\\uA4D0' | '\\uA4F7' | '\\uA500' | '\\uA60B' | '\\uA610' | '\\uA61F' |
	//	'\\uA62A' | '\\uA62B' |
	//	'\\uA66E' | '\\uA6A0' | '\\uA6E5' | '\\uA7FB' | '\\uA801' | '\\uA803' | '\\uA805' | '\\uA807' | '\\uA80A' | '\\uA80C' |
	//	'\\uA822' |
	//	'\\uA840' | '\\uA873' | '\\uA882' | '\\uA8B3' | '\\uA8F2' | '\\uA8F7' | '\\uA8FB' | '\\uA90A' | '\\uA925' | '\\uA930' |
	//	'\\uA946' |
	//	'\\uA960' | '\\uA97C' | '\\uA984' | '\\uA9B2' | '\\uAA00' | '\\uAA28' | '\\uAA40' | '\\uAA42' | '\\uAA44' | '\\uAA4B' |
	//	'\\uAA60' | '\\uAA6F' |
	//	'\\uAA71' | '\\uAA76' | '\\uAA7A' | '\\uAA80' | '\\uAAAF' | '\\uAAB1' | '\\uAAB5' | '\\uAAB6' | '\\uAAB9' | '\\uAABD' |
	//	'\\uAAC0' | '\\uAAC2' | '\\uAADB' | '\\uAADC' | '\\uAAE0' | '\\uAAEA' | '\\uAAF2' | '\\uAB01' | '\\uAB06' |
	//	'\\uAB09' | '\\uAB0E' | '\\uAB11' | '\\uAB16' | '\\uAB20' | '\\uAB26' | '\\uAB28' | '\\uAB2E' | '\\uABC0' | '\\uABE2' |
	//	'\\uAC00' |
	//	'\\uD7A3' | '\\uD7B0' | '\\uD7C6' | '\\uD7CB' | '\\uD7FB' | '\\uF900' | '\\uFA6D' | '\\uFA70' | '\\uFAD9' | '\\uFB1D' |
	//	'\\uFB1F' | '\\uFB28' | '\\uFB2A' | '\\uFB36' | '\\uFB38' | '\\uFB3C' | '\\uFB3E' | '\\uFB40' | '\\uFB41' | '\\uFB43' |
	//	'\\uFB44' |
	//	'\\uFB46' | '\\uFBB1' | '\\uFBD3' | '\\uFD3D' | '\\uFD50' | '\\uFD8F' | '\\uFD92' | '\\uFDC7' | '\\uFDF0' | '\\uFDFB' |
	//	'\\uFE70' | '\\uFE74' |
	//	'\\uFE76' | '\\uFEFC' | '\\uFF66' | '\\uFF6F' | '\\uFF71' | '\\uFF9D' | '\\uFFA0' | '\\uFFBE' | '\\uFFC2' | '\\uFFC7' |
	//	'\\uFFCA' | '\\uFFCF' |
	//	'\\uFFD2' | '\\uFFD7' | '\\uFFDA' | '\\uFFDC' | '\\u10000' | '\\u1000B' //| '\\u1000D' | '\\u10026' | '\\u10028' | '\\u1003A' | '\\u1003C' | '\\u1003D' | 
	//	//'\\u1003F' | '\\u1004D' | '\\u10050' | '\\u1005D' | '\\u10080' | '\\u100FA' | '\\u10280' | '\\u1029C' | '\\u102A0' | '\\u102D0' | '\\u10300' | '\\u1031E' | 
	//	//'\\u10330' | '\\u10340' | '\\u10342' | '\\u10349' | '\\u10380' | '\\u1039D' | '\\u103A0' | '\\u103C3' | '\\u103C8' | '\\u103CF' | '\\u10450' | '\\u1049D' | 
	//	//'\\u10800' | '\\u10805' | '\\u10808' | '\\u1080A' | '\\u10835' | '\\u10837' | '\\u10838' | '\\u1083C' | '\\u1083F' | '\\u10855' | 
	//	//'\\u10900' | '\\u10915' | '\\u10920' | '\\u10939' | '\\u10980' | '\\u109B7' | '\\u109BE' | '\\u109BF' | '\\u10A00' | '\\u10A10' | '\\u10A13' | 
	//	//'\\u10A15' | '\\u10A17' | '\\u10A19' | '\\u10A33' | '\\u10A60' | '\\u10A7C' | '\\u10B00' | '\\u10B35' | '\\u10B40' | '\\u10B55' | '\\u10B60' | '\\u10B72' | 
	//	//'\\u10C00' | '\\u10C48' | '\\u11003' | '\\u11037' | '\\u11083' | '\\u110AF' | '\\u110D0' | '\\u110E8' | '\\u11103' | '\\u11126' | '\\u11183' | '\\u111B2' | 
	//	//'\\u111C1' | '\\u111C4' | '\\u11680' | '\\u116AA' | '\\u12000' | '\\u1236E' | '\\u13000' | '\\u1342E' | '\\u16800' | '\\u16A38' | '\\u16F00' | '\\u16F44' | 
	//	//'\\u16F50' | '\\u1B000' | '\\u1B001' | '\\u1EE00' | '\\u1EE03' | '\\u1EE05' | '\\u1EE1F' | '\\u1EE21' | '\\u1EE22' | '\\u1EE24' | 
	//	//'\\u1EE27' | '\\u1EE29' | '\\u1EE32' | '\\u1EE34' | '\\u1EE37' | '\\u1EE39' | '\\u1EE3B' | '\\u1EE42' | 
	//	//'\\u1EE47' | '\\u1EE49' | '\\u1EE4B' | '\\u1EE4D' | '\\u1EE4F' | '\\u1EE51' | '\\u1EE52' | '\\u1EE54' | 
	//	//'\\u1EE57' | '\\u1EE59' | '\\u1EE5B' | '\\u1EE5D' | '\\u1EE5F' | '\\u1EE61' | '\\u1EE62' | 
	//	//'\\u1EE64' | '\\u1EE67' | '\\u1EE6A' | '\\u1EE6C' | '\\u1EE72' | '\\u1EE74' | '\\u1EE77' | '\\u1EE79' | '\\u1EE7C' | '\\u1EE7E' | 
	//	//'\\u1EE80' | '\\u1EE89' | '\\u1EE8B' | '\\u1EE9B' | '\\u1EEA1' | '\\u1EEA3' | '\\u1EEA5' | '\\u1EEA9' | '\\u1EEAB' | '\\u1EEBB' | '\\u20000' | 
	//	//'\\u2A6D6' | '\\u2A700' | '\\u2B734' | '\\u2B740' | '\\u2B81D' | '\\u2F800' | '\\u2FA1D'  // TODO: Fix unicode
	//;
	public TerminalRule getLETTER_OTHERRule() {
		return tLETTER_OTHER;
	} 

	//terminal fragment NUMBER_LETTER:
	//	'\\u16EE'..'\\u16F0' | '\\u2160'..'\\u2182' | '\\u2185'..'\\u2188' | '\\u3007' | '\\u3021'..'\\u3029' |
	//	'\\u3038'..'\\u303A' | '\\uA6E6'..'\\uA6EF' // | '\\u10140' ..  '\\u10174' | '\\u10341' | '\\u1034A' | '\\u103D1' ..  '\\u103D5' | is not accepted by ANTLR. TODO: See what to do 
	//	//'\\u12400' ..  '\\u12462' is not accepted by ANTLR. TODO: See what to do   // TODO: Fix unicode
	//;
	public TerminalRule getNUMBER_LETTERRule() {
		return tNUMBER_LETTER;
	} 

	//terminal fragment IDENTIFIER_EXTEND:
	//	MARKNON_SPACING
	//	| MARKSPACING_COMBINING
	//	| NUMBER_DECIMAL
	//	| PUNCTUATION_CONNECTOR
	//	| OTHER_FORMAT;
	public TerminalRule getIDENTIFIER_EXTENDRule() {
		return tIDENTIFIER_EXTEND;
	} 

	//terminal fragment NUMBER_DECIMAL:
	//	'\\u0030'..'\\u0039' | '\\u0660'..'\\u0669' | '\\u06F0'..'\\u06F9' | '\\u07C0'..'\\u07C9' | '\\u0966'..'\\u096F' |
	//	'\\u09E6'..'\\u09EF' | '\\u0A66'..'\\u0A6F' | '\\u0AE6'..'\\u0AEF' | '\\u0B66'..'\\u0B6F' | '\\u0BE6'..'\\u0BEF' |
	//	'\\u0C66'..'\\u0C6F' |
	//	'\\u0CE6'..'\\u0CEF' | '\\u0D66'..'\\u0D6F' | '\\u0E50'..'\\u0E59' | '\\u0ED0'..'\\u0ED9' | '\\u0F20'..'\\u0F29' |
	//	'\\u1040'..'\\u1049' |
	//	'\\u1090'..'\\u1099' | '\\u17E0'..'\\u17E9' | '\\u1810'..'\\u1819' | '\\u1946'..'\\u194F' | '\\u19D0'..'\\u19D9' |
	//	'\\u1A80'..'\\u1A89' |
	//	'\\u1A90'..'\\u1A99' | '\\u1B50'..'\\u1B59' | '\\u1BB0'..'\\u1BB9' | '\\u1C40'..'\\u1C49' | '\\u1C50'..'\\u1C59' |
	//	'\\uA620'..'\\uA629' |
	//	'\\uA8D0'..'\\uA8D9' | '\\uA900'..'\\uA909' | '\\uA9D0'..'\\uA9D9' | '\\uAA50'..'\\uAA59' | '\\uABF0'..'\\uABF9' |
	//	'\\uFF10'..'\\uFF19' //| 
	//	// '\\u104A0' .. '\\u104A9' | '\\u11066' .. '\\u1106F' | '\\u110F0' .. '\\u110F9' | '\\u11136' .. '\\u1113F' | '\\u111D0' .. '\\u111D9' | '\\u116C0' .. '\\u116C9' | is not accepted by ANTLR. TODO: See what to do 
	//	// '\\u1D7CE' .. '\\u1D7FF' is not accepted by ANTLR. TODO: See what to do    // TODO: Fix unicode
	//;
	public TerminalRule getNUMBER_DECIMALRule() {
		return tNUMBER_DECIMAL;
	} 

	//terminal fragment MARKSPACING_COMBINING:
	//	'\\u0903' | '\\u093B' | '\\u093E'..'\\u0940' | '\\u0949'..'\\u094C' | '\\u094E' | '\\u094F' |
	//	'\\u0982' | '\\u0983' | '\\u09BE'..'\\u09C0' | '\\u09C7' | '\\u09C8' | '\\u09CB' | '\\u09CC' | '\\u09D7' | '\\u0A03' |
	//	'\\u0A3E'..'\\u0A40' | '\\u0A83' | '\\u0ABE'..'\\u0AC0' | '\\u0AC9' | '\\u0ACB' | '\\u0ACC' | '\\u0B02' | '\\u0B03' |
	//	'\\u0B3E' | '\\u0B40' | '\\u0B47' | '\\u0B48' | '\\u0B4B' | '\\u0B4C' | '\\u0B57' | '\\u0BBE' | '\\u0BBF' |
	//	'\\u0BC1' | '\\u0BC2' | '\\u0BC6'..'\\u0BC8' | '\\u0BCA'..'\\u0BCC' | '\\u0BD7' | '\\u0C01'..'\\u0C03' | '\\u0C41'..'\\u0C44' |
	//	'\\u0C82' | '\\u0C83' | '\\u0CBE' | '\\u0CC0'..'\\u0CC4' | '\\u0CC7' | '\\u0CC8' | '\\u0CCA' | '\\u0CCB' | '\\u0CD5' | '\\u0CD6'
	//	|
	//	'\\u0D02' | '\\u0D03' | '\\u0D3E'..'\\u0D40' | '\\u0D46'..'\\u0D48' | '\\u0D4A'..'\\u0D4C' | '\\u0D57' | '\\u0D82' | '\\u0D83' |
	//	'\\u0DCF'..'\\u0DD1' | '\\u0DD8'..'\\u0DDF' | '\\u0DF2' | '\\u0DF3' | '\\u0F3E' | '\\u0F3F' | '\\u0F7F' | '\\u102B' | '\\u102C'
	//	|
	//	'\\u1031' | '\\u1038' | '\\u103B' | '\\u103C' | '\\u1056' | '\\u1057' | '\\u1062'..'\\u1064' | '\\u1067'..'\\u106D' |
	//	'\\u1083' | '\\u1084' | '\\u1087'..'\\u108C' | '\\u108F' | '\\u109A'..'\\u109C' | '\\u17B6' | '\\u17BE'..'\\u17C5' |
	//	'\\u17C7' | '\\u17C8' | '\\u1923'..'\\u1926' | '\\u1929'..'\\u192B' | '\\u1930' | '\\u1931' | '\\u1933'..'\\u1938' |
	//	'\\u19B0'..'\\u19C0' |
	//	'\\u19C8' | '\\u19C9' | '\\u1A19'..'\\u1A1B' | '\\u1A55' | '\\u1A57' | '\\u1A61' | '\\u1A63' | '\\u1A64' |
	//	'\\u1A6D'..'\\u1A72' | '\\u1B04' | '\\u1B35' | '\\u1B3B' | '\\u1B3D'..'\\u1B41' | '\\u1B43' | '\\u1B44' |
	//	'\\u1B82' | '\\u1BA1' | '\\u1BA6' | '\\u1BA7' | '\\u1BAA' | '\\u1BAC' | '\\u1BAD' | '\\u1BE7' |
	//	'\\u1BEA'..'\\u1BEC' | '\\u1BEE' | '\\u1BF2' | '\\u1BF3' | '\\u1C24'..'\\u1C2B' | '\\u1C34' | '\\u1C35' | '\\u1CE1' |
	//	'\\u1CF2' | '\\u1CF3' | '\\u302E' | '\\u302F' | '\\uA823' | '\\uA824' | '\\uA827' | '\\uA880' | '\\uA881' | '\\uA8B4'..'\\uA8C3'
	//	|
	//	'\\uA952' | '\\uA953' | '\\uA983' | '\\uA9B4' | '\\uA9B5' | '\\uA9BA' | '\\uA9BB' | '\\uA9BD'..'\\uA9C0' | '\\uAA2F' | '\\uAA30'
	//	|
	//	'\\uAA33' | '\\uAA34' | '\\uAA4D' | '\\uAA7B' | '\\uAAEB' | '\\uAAEE' | '\\uAAEF' | '\\uAAF5' |
	//	'\\uABE3' | '\\uABE4' | '\\uABE6' | '\\uABE7' | '\\uABE9' | '\\uABEA' | '\\uABEC' | '\\u11000' | '\\u11002' //| 
	//	// '\\u11082' | '\\u110B0' .. '\\u110B2' | '\\u110B7' | '\\u110B8' | '\\u1112C' | '\\u11182' | '\\u111B3' .. '\\u111B5' |  is not accepted by ANTLR. TODO: See what to do 
	//	// '\\u111BF' | '\\u111C0' | '\\u116AC' | '\\u116AE' | '\\u116AF' | '\\u116B6' | '\\u16F51' .. '\\u16F7E' | '\\u1D165' | '\\u1D166' | is not accepted by ANTLR. TODO: See what to do 
	//	//'\\u1D16D' .. '\\u1D172' is not accepted by ANTLR. TODO: See what to do   // TODO: Fix unicode
	//;
	public TerminalRule getMARKSPACING_COMBININGRule() {
		return tMARKSPACING_COMBINING;
	} 

	//terminal fragment OTHER_FORMAT:
	//	'\\u00AD' | '\\u0600'..'\\u0604' | '\\u06DD' | '\\u070F' | '\\u200B'..'\\u200F' |
	//	'\\u202A'..'\\u202E' | '\\u2060'..'\\u2064' | '\\u206A'..'\\u206F' |
	//	'\\uFEFF' | '\\uFFF9'..'\\uFFFB' //| '\\u110BD' | '\\u1D173' .. '\\u1D17A' |
	//	//'\\uE0001' | '\\uE0020' .. '\\uE007F'
	//;
	public TerminalRule getOTHER_FORMATRule() {
		return tOTHER_FORMAT;
	} 

	//terminal fragment MARKNON_SPACING:
	//	'\\u0300'..'\\u036F' | '\\u0483'..'\\u0487' | '\\u0591'..'\\u05BD' |
	//	'\\u05BF' | '\\u05C1' | '\\u05C2' | '\\u05C4' | '\\u05C5' | '\\u05C7' |
	//	'\\u0610'..'\\u061A' | '\\u064B'..'\\u065F' | '\\u0670' |
	//	'\\u06D6'..'\\u06DC' | '\\u06DF'..'\\u06E4' | '\\u06E7' |
	//	'\\u06E8' | '\\u06EA'..'\\u06ED' | '\\u0711' | '\\u0730'..'\\u074A' |
	//	'\\u07A6'..'\\u07B0' | '\\u07EB'..'\\u07F3' | '\\u0816'..'\\u0819' |
	//	'\\u081B'..'\\u0823' | '\\u0825'..'\\u0827' | '\\u0829'..'\\u082D' |
	//	'\\u0859'..'\\u085B' | '\\u08E4'..'\\u08FE' | '\\u0900'..'\\u0902' |
	//	'\\u093A' | '\\u093C' | '\\u0941'..'\\u0948' | '\\u094D' |
	//	'\\u0951'..'\\u0957' | '\\u0962' | '\\u0963' | '\\u0981' |
	//	'\\u09BC' | '\\u09C1'..'\\u09C4' | '\\u09CD' | '\\u09E2' | '\\u09E3' |
	//	'\\u0A01' | '\\u0A02' | '\\u0A3C' | '\\u0A41' | '\\u0A42' | '\\u0A47' |
	//	'\\u0A48' | '\\u0A4B'..'\\u0A4D' | '\\u0A51' | '\\u0A70' | '\\u0A71' |
	//	'\\u0A75' | '\\u0A81' | '\\u0A82' | '\\u0ABC' | '\\u0AC1'..'\\u0AC5' |
	//	'\\u0AC7' | '\\u0AC8' | '\\u0ACD' | '\\u0AE2' | '\\u0AE3' | '\\u0B01' |
	//	'\\u0B3C' | '\\u0B3F' | '\\u0B41'..'\\u0B44' | '\\u0B4D' | '\\u0B56' |
	//	'\\u0B62' | '\\u0B63' | '\\u0B82' | '\\u0BC0' | '\\u0BCD' | '\\u0C3E'..'\\u0C40' |
	//	'\\u0C46'..'\\u0C48' | '\\u0C4A'..'\\u0C4D' | '\\u0C55' | '\\u0C56' | '\\u0C62' |
	//	'\\u0C63' | '\\u0CBC' | '\\u0CBF' | '\\u0CC6' | '\\u0CCC' | '\\u0CCD' | '\\u0CE2' |
	//	'\\u0CE3' | '\\u0D41'..'\\u0D44' | '\\u0D4D' | '\\u0D62' | '\\u0D63' | '\\u0DCA' |
	//	'\\u0DD2'..'\\u0DD4' | '\\u0DD6' | '\\u0E31' | '\\u0E34'..'\\u0E3A' |
	//	'\\u0E47'..'\\u0E4E' | '\\u0EB1' | '\\u0EB4'..'\\u0EB9' | '\\u0EBB' |
	//	'\\u0EBC' | '\\u0EC8'..'\\u0ECD' | '\\u0F18' | '\\u0F19' | '\\u0F35' |
	//	'\\u0F37' | '\\u0F39' | '\\u0F71'..'\\u0F7E' | '\\u0F80'..'\\u0F84' |
	//	'\\u0F86' | '\\u0F87' | '\\u0F8D'..'\\u0F97' | '\\u0F99'..'\\u0FBC' |
	//	'\\u0FC6' | '\\u102D'..'\\u1030' | '\\u1032'..'\\u1037' | '\\u1039' |
	//	'\\u103A' | '\\u103D' | '\\u103E' | '\\u1058' | '\\u1059' | '\\u105E'..'\\u1060' |
	//	'\\u1071'..'\\u1074' | '\\u1082' | '\\u1085' | '\\u1086' | '\\u108D' |
	//	'\\u109D' | '\\u135D'..'\\u135F' | '\\u1712'..'\\u1714' | '\\u1732'..'\\u1734' |
	//	'\\u1752' | '\\u1753' | '\\u1772' | '\\u1773' | '\\u17B4' | '\\u17B5' | '\\u17B7'..'\\u17BD' |
	//	'\\u17C6' | '\\u17C9'..'\\u17D3' | '\\u17DD' | '\\u180B'..'\\u180D' | '\\u18A9' |
	//	'\\u1920'..'\\u1922' | '\\u1927' | '\\u1928' | '\\u1932' | '\\u1939'..'\\u193B' |
	//	'\\u1A17' | '\\u1A18' | '\\u1A56' | '\\u1A58'..'\\u1A5E' | '\\u1A60' | '\\u1A62' |
	//	'\\u1A65'..'\\u1A6C' | '\\u1A73'..'\\u1A7C' | '\\u1A7F' | '\\u1B00'..'\\u1B03' |
	//	'\\u1B34' | '\\u1B36'..'\\u1B3A' | '\\u1B3C' | '\\u1B42' | '\\u1B6B'..'\\u1B73' |
	//	'\\u1B80' | '\\u1B81' | '\\u1BA2'..'\\u1BA5' | '\\u1BA8' | '\\u1BA9' | '\\u1BAB' |
	//	'\\u1BE6' | '\\u1BE8' | '\\u1BE9' | '\\u1BED' | '\\u1BEF'..'\\u1BF1' | '\\u1C2C'..'\\u1C33' |
	//	'\\u1C36' | '\\u1C37' | '\\u1CD0'..'\\u1CD2' | '\\u1CD4'..'\\u1CE0' | '\\u1CE2'..'\\u1CE8' |
	//	'\\u1CED' | '\\u1CF4' | '\\u1DC0'..'\\u1DE6' | '\\u1DFC'..'\\u1DFF' | '\\u20D0'..'\\u20DC' |
	//	'\\u20E1' | '\\u20E5'..'\\u20F0' | '\\u2CEF'..'\\u2CF1' | '\\u2D7F' | '\\u2DE0'..'\\u2DFF' |
	//	'\\u302A'..'\\u302D' | '\\u3099' | '\\u309A' | '\\uA66F' | '\\uA674'..'\\uA67D' |
	//	'\\uA69F' | '\\uA6F0' | '\\uA6F1' | '\\uA802' | '\\uA806' | '\\uA80B' | '\\uA825' |
	//	'\\uA826' | '\\uA8C4' | '\\uA8E0'..'\\uA8F1' | '\\uA926'..'\\uA92D' | '\\uA947'..'\\uA951' |
	//	'\\uA980'..'\\uA982' | '\\uA9B3' | '\\uA9B6'..'\\uA9B9' | '\\uA9BC' | '\\uAA29'..'\\uAA2E' |
	//	'\\uAA31' | '\\uAA32' | '\\uAA35' | '\\uAA36' | '\\uAA43' | '\\uAA4C' | '\\uAAB0' |
	//	'\\uAAB2'..'\\uAAB4' | '\\uAAB7' | '\\uAAB8' | '\\uAABE' | '\\uAABF' | '\\uAAC1' |
	//	'\\uAAEC' | '\\uAAED' | '\\uAAF6' | '\\uABE5' | '\\uABE8' | '\\uABED' | '\\uFB1E' |
	//	'\\uFE00'..'\\uFE0F' | '\\uFE20'..'\\uFE26' //| '\\u101FD' | '\\u10A01' .. '\\u10A03' | 
	//	//'\\u10A05' | '\\u10A06' | '\\u10A0C' .. '\\u10A0F' | '\\u10A38' .. '\\u10A3A' | '\\u10A3F' | 
	//	//'\\u11001' | '\\u11038' .. '\\u11046' | '\\u11080' | '\\u11081' | '\\u110B3' .. '\\u110B6' |
	//	//'\\u110B9' | '\\u110BA' | '\\u11100' .. '\\u11102' | '\\u11127' .. '\\u1112B' | '\\u1112D' .. '\\u11134' |
	//	//'\\u11180' | '\\u11181' | '\\u111B6' .. '\\u111BE' | '\\u116AB' | '\\u116AD' | '\\u116B0' .. '\\u116B5' |
	//	//'\\u116B7' | '\\u16F8F' .. '\\u16F92' | '\\u1D167' .. '\\u1D169' | '\\u1D17B' .. '\\u1D182' |
	//	//'\\u1D185' .. '\\u1D18B' | '\\u1D1AA' .. '\\u1D1AD' | '\\u1D242' .. '\\u1D244' | '\\uE0100' .. '\\uE01EF'	  // TODO: Fix unicode
	//;
	public TerminalRule getMARKNON_SPACINGRule() {
		return tMARKNON_SPACING;
	} 

	//terminal fragment PUNCTUATION_CONNECTOR:
	//	'\\u005F' | '\\u203F' | '\\u2040' | '\\u2054' | '\\uFE33' | '\\uFE34' | '\\uFE4D'..'\\uFE4F' |
	//	'\\uFF3F';
	public TerminalRule getPUNCTUATION_CONNECTORRule() {
		return tPUNCTUATION_CONNECTOR;
	} 

	//terminal fragment EXPONENT:
	//	("E" | "e") ("-" | "+"?) NUMERAL;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	} 

	//terminal fragment DIGIT:
	//	"0"
	//	| "1"
	//	| "2"
	//	| "3"
	//	| "4"
	//	| "5"
	//	| "6"
	//	| "7"
	//	| "8"
	//	| "9";
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	} 

	//terminal fragment BASED_LITERAL:
	//	BASE "#" BASED_NUMERAL (P BASED_NUMERAL)? "#" EXPONENT?;
	public TerminalRule getBASED_LITERALRule() {
		return tBASED_LITERAL;
	} 

	//terminal fragment BASE:
	//	NUMERAL;
	public TerminalRule getBASERule() {
		return tBASE;
	} 

	//terminal fragment BASED_NUMERAL:
	//	EXTENDED_DIGIT ('_'? EXTENDED_DIGIT)*;
	public TerminalRule getBASED_NUMERALRule() {
		return tBASED_NUMERAL;
	} 

	//terminal fragment EXTENDED_DIGIT:
	//	DIGIT
	//	| "A"
	//	| "B"
	//	| "C"
	//	| "D"
	//	| "E"
	//	| "F";
	public TerminalRule getEXTENDED_DIGITRule() {
		return tEXTENDED_DIGIT;
	} 

	//terminal CHARACTER_LITERAL:
	//	'\\u0027' GRAPHIC_CHARACTER '\\u0027';
	public TerminalRule getCHARACTER_LITERALRule() {
		return tCHARACTER_LITERAL;
	} 

	//terminal fragment GRAPHIC_CHARACTER:
	//	'\\u0020'..'\\u1FFF' // '\\uFFFF' //'\\u10FFFF'          // TODO: Fix UNICODE and escape chars
	//;
	public TerminalRule getGRAPHIC_CHARACTERRule() {
		return tGRAPHIC_CHARACTER;
	} 

	//terminal OPERATOR_SYMBOL:
	//	'"' ("and" | "or" | "xor" | '='
	//	| '/=' | '<' | '<=' | '>'
	//	| '>=' | '-' | '+' | '&'
	//	| '**' | '*' | '/' | "mod"
	//	| "rem" | "abs" | "not")
	//	'"';
	public TerminalRule getOPERATOR_SYMBOLRule() {
		return tOPERATOR_SYMBOL;
	} 

	//terminal STRING_LITERAL:
	//	'"' STRING_ELEMENT* '"';
	public TerminalRule getSTRING_LITERALRule() {
		return tSTRING_LITERAL;
	} 

	//terminal fragment STRING_ELEMENT:
	//	NONQUOTATION_MARKGRAPHIC_CHARACTER;
	public TerminalRule getSTRING_ELEMENTRule() {
		return tSTRING_ELEMENT;
	} 

	//terminal fragment NONQUOTATION_MARKGRAPHIC_CHARACTER:
	//	'\\u0020'..'!' | '#'..'\\u1FFF' // '\\uFFFF' //'\\u10FFFF' // TODO: Fix unicode
	//;
	public TerminalRule getNONQUOTATION_MARKGRAPHIC_CHARACTERRule() {
		return tNONQUOTATION_MARKGRAPHIC_CHARACTER;
	} 

	//terminal SL_COMMENT:
	//	"--" NONEND_OFLINE_CHARACTER*;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal fragment NONEND_OFLINE_CHARACTER:
	//	GRAPHIC_CHARACTER;
	public TerminalRule getNONEND_OFLINE_CHARACTERRule() {
		return tNONEND_OFLINE_CHARACTER;
	} 

	//terminal PV:
	//	';';
	public TerminalRule getPVRule() {
		return tPV;
	} 

	//terminal DP:
	//	':';
	public TerminalRule getDPRule() {
		return tDP;
	} 

	//terminal P:
	//	'.';
	public TerminalRule getPRule() {
		return tP;
	} 

	//terminal V:
	//	',';
	public TerminalRule getVRule() {
		return tV;
	} 

	//terminal PG:
	//	'(';
	public TerminalRule getPGRule() {
		return tPG;
	} 

	//terminal PD:
	//	')';
	public TerminalRule getPDRule() {
		return tPD;
	} 

	//terminal ET_COM:
	//	'&';
	public TerminalRule getET_COMRule() {
		return tET_COM;
	} 

	//terminal PLUS:
	//	'+';
	public TerminalRule getPLUSRule() {
		return tPLUS;
	} 

	//terminal MOINS:
	//	'-';
	public TerminalRule getMOINSRule() {
		return tMOINS;
	} 

	//terminal ETOI:
	//	'*';
	public TerminalRule getETOIRule() {
		return tETOI;
	} 

	//terminal ETOI2:
	//	'**';
	public TerminalRule getETOI2Rule() {
		return tETOI2;
	} 

	//terminal SLASH:
	//	'/';
	public TerminalRule getSLASHRule() {
		return tSLASH;
	} 

	//terminal QUOTE:
	//	"'";
	public TerminalRule getQUOTERule() {
		return tQUOTE;
	} 

	//terminal FLECHE:
	//	'=>';
	public TerminalRule getFLECHERule() {
		return tFLECHE;
	} 

	//terminal BV:
	//	'|' | '!';
	public TerminalRule getBVRule() {
		return tBV;
	} 

	//terminal DPE:
	//	':=';
	public TerminalRule getDPERule() {
		return tDPE;
	} 

	//terminal PP:
	//	'..';
	public TerminalRule getPPRule() {
		return tPP;
	} 

	//terminal BOIT:
	//	'<>';
	public TerminalRule getBOITRule() {
		return tBOIT;
	} 

	//terminal EG:
	//	'=';
	public TerminalRule getEGRule() {
		return tEG;
	} 

	//terminal DIFF:
	//	'/=';
	public TerminalRule getDIFFRule() {
		return tDIFF;
	} 

	//terminal INF:
	//	'<';
	public TerminalRule getINFRule() {
		return tINF;
	} 

	//terminal INFE:
	//	'<=';
	public TerminalRule getINFERule() {
		return tINFE;
	} 

	//terminal SUP:
	//	'>';
	public TerminalRule getSUPRule() {
		return tSUP;
	} 

	//terminal SUPE:
	//	'>=';
	public TerminalRule getSUPERule() {
		return tSUPE;
	} 

	//terminal CHG:
	//	'<<';
	public TerminalRule getCHGRule() {
		return tCHG;
	} 

	//terminal CHD:
	//	'>>';
	public TerminalRule getCHDRule() {
		return tCHD;
	} 
}
